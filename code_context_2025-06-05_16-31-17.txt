===== frontend/tsconfig.json =====
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "baseUrl": "src",
    "paths": {
      "@components/*": [
        "components/*"
      ],
      "@styles/*": [
        "styles/*"
      ],
      "@utils/*": [
        "utils/*"
      ]
    },
    "typeRoots": ["./node_modules/@types", "./src/types"] // Added ./src/types for custom type definitions
  },
  "include": [
    "src", // Standard include
    "src/types" // Include custom types directory if you create one (e.g., src/types/custom.d.ts)
  ],
  "exclude": ["node_modules"] // Standard exclude
}

===== frontend/postcss.config.js =====
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};


===== frontend/.babelrc =====
{
  "presets": ["react-app"],
  "plugins": ["@babel/plugin-proposal-nullish-coalescing-operator"]
}


===== frontend/eslint.config.mjs =====
// eslint.config.mjs
import globals from "globals"; 
import pluginJs from "@eslint/js"; // Renamed to avoid conflict if you meant something else by 'js' 
import pluginReact from "eslint-plugin-react"; 
import pluginReactHooks from "eslint-plugin-react-hooks"; // Added this 
import { defineConfig } from "eslint/config"; // Keep if using ESLint v9+ style 
 
export default defineConfig([ 
  { 
    files: ["src/**/*.{js,jsx,ts,tsx}"], // Apply to all relevant files in src 
    plugins: { 
      react: pluginReact, 
      "react-hooks": pluginReactHooks, // Register the plugin 
    }, 
    languageOptions: { 
      globals: globals.browser, 
      ecmaVersion: 2021, 
      sourceType: 'module', 
      parserOptions: { 
        ecmaFeatures: { 
          jsx: true, 
        }, 
      }, 
    }, 
    rules: { 
      ...pluginJs.configs.recommended.rules, // Basic JS rules 
      ...pluginReact.configs.recommended.rules, // React specific rules 
      ...pluginReactHooks.configs.recommended.rules, // Rules for Hooks 
      "react/react-in-jsx-scope": "off", // Not needed with new JSX transform 
      "react/jsx-uses-react": "off",    // Not needed with new JSX transform 
      "no-unused-vars": ["warn", { "argsIgnorePattern": "^_" }], // Warn on unused vars 
    }, 
    settings: { 
      react: { 
        version: "detect", // Automatically detect React version 
      }, 
    }, 
  } 
]);


===== frontend/tailwind.config.js =====
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        'node-bg': 'var(--node-bg)',
        'node-border': 'var(--node-border)',
        'node-border-selected': 'var(--node-border-selected)',
        'node-text': 'var(--node-text)',
        'node-text-secondary': 'var(--node-text-secondary)',
        'node-icon-color': 'var(--node-icon-color)',
        'accent-cyan': 'var(--accent-cyan)',
        'accent-cyan-darker': 'var(--accent-cyan-darker)',
        'accent-pink': 'var(--accent-pink)',
        'accent-green': 'var(--accent-green)',
        'bg-primary': 'var(--bg-primary)',
        'bg-secondary': 'var(--bg-secondary)',
        'text-primary': 'var(--text-primary)',
        'text-secondary': 'var(--text-secondary)',
        'input-bg': 'var(--input-bg)',
        'input-border': 'var(--input-border)',
      },
    },
  },
  plugins: [
    require('tailwind-scrollbar'),
  ],
}


===== frontend/src/styles/globals.css =====
@tailwind base;
@tailwind components;
@tailwind utilities;

/* React Flow specific styles */
/* Estas clases ya no son necesarias aquí si el layout se maneja bien con flex/grid y w-full/h-full */
/* .react-flow-container {
  width: 100%;
  height: 100%;
  position: relative;
}

.react-flow__viewport {
  width: 100%;
  height: 100%;
}

.react-flow__background {
  width: 100%;
  height: 100%;
} */

/* Ensure proper sizing for the graph container */
/* Esta clase es buena, la usaremos */
.graph-container {
  width: 100%;
  /* height: 100%; Let flex-grow determine height */
  min-height: 300px; /* Fallback minimum height */
  position: relative; /* Important for ReactFlow's positioning context */
}

:root {
  /* Base colors */
  --bg-primary: #001F3F;
  --bg-secondary: #0A0F1A;
  --text-primary: #FFFFFF;
  --text-secondary: #94A3B8;
  --accent-cyan: #00E5FF;
  --accent-cyan-darker: #00B8CC;
  --accent-green: #34D399;
  --accent-purple: #A78BFA;
  --accent-orange: #FBBF24;
  --accent-pink: #F472B6;
  --accent-red: #E53E3E;
  --accent-yellow: #D69E2E;

  /* Node specific colors */
  --node-bg: var(--bg-secondary);
  --node-border: var(--accent-cyan-darker);
  --node-border-selected: var(--accent-cyan);
  --node-border-alert: #F56565; /* Rojo brillante para alertas */
  --node-border-warning: #ECC94B; /* Amarillo/Naranja para warnings */
  --node-shadow-selected: 0 0 15px var(--accent-cyan);
  --node-text: var(--text-primary);
  --node-text-secondary: var(--text-secondary);
  --node-icon-color: var(--accent-cyan);
  --node-bg-hover: #0F172A;

  /* Edge colors */
  --edge-default-color: #6B7280;
  --edge-selected-color: var(--accent-cyan);
  --edge-label-color: var(--text-secondary);

  /* RGB components for rgba() usage */
  --r-accent-cyan: 0;
  --g-accent-cyan: 229;
  --b-accent-cyan: 255;
  --r-node-border-alert: 245;
  --g-node-border-alert: 101;
  --b-node-border-alert: 101;

  --bg-glass: rgba(10, 15, 26, 0.6);
  --border-glass: rgba(0, 229, 255, 0.2);
  --accent-pink: #F472B6;
  --accent-purple: #A78BFA;
  --accent-orange: #F59E0B;
  --accent-green: #34D399;

  --input-bg: #101827; /* Fondo para inputs */
  --input-border: #303F5E; /* Borde para inputs y elementos sutiles del grafo */
  --input-focus-border: var(--accent-cyan); /* Corregido: sin espacio */

  /* Estilos específicos del Grafo */
  --graph-bg: var(--bg-primary); /* Corregido: sin espacio */
  --graph-lines-color: var(--input-border);

  --node-person-icon-color: var(--accent-cyan); /* Corregido */
  --node-company-icon-color: var(--accent-pink); /* Corregido */
  --node-generic-icon-color: var(--text-secondary); /* Corregido */

  /* Variables de styles.css (para consistencia si se usan en otros lados) */
  --hue: 200;
  --saturation-accent: 100%;
  --lightness-accent: 50%;
  --first-color: hsl(var(--hue), var(--saturation-accent), var(--lightness-accent)); /* Corregido */
  --first-color-alt: hsl(var(--hue), var(--saturation-accent), 45%);
  --first-color-light: hsl(var(--hue), var(--saturation-accent), 65%);
  --bg-dark-primary: #05080D;
  --bg-form-color: hsla(212, 70%, 10%, 0.75);
  --input-bg-color: #0E1625;
  --title-color: var(--first-color); /* Corregido */
  --text-color: #C0C8D8;
  --text-color-light: #8892b0;
  --text-on-accent: var(--bg-dark-primary); /* Corregido */
  --body-color: var(--bg-dark-primary); /* Corregido */
  --container-color: var(--bg-form-color); /* Corregido */
  --input-border-color: hsl(var(--hue), var(--saturation-accent), 35%);
}

body, #root, .App {
  @apply bg-bg-primary text-text-primary font-sans;
  margin: 0;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  flex-grow: 1; /* Asegurar que ocupen toda la altura disponible */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* Custom scrollbar */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}
::-webkit-scrollbar-track {
  background: var(--bg-secondary); /* Corregido */
}
::-webkit-scrollbar-thumb {
  background: var(--accent-cyan-darker); /* Corregido */
  border-radius: 4px;
}
::-webkit-scrollbar-thumb:hover {
  background: var(--accent-cyan); /* Corregido */
}

/* React Flow specific styles */
.react-flow__minimap {
  background-color: var(--bg-secondary) !important;
  border: 1px solid var(--accent-cyan-darker) !important;
  border-radius: 4px;
}
.react-flow__controls-button {
  background-color: var(--bg-secondary) !important;
  border: 1px solid var(--accent-cyan-darker) !important;
  color: var(--accent-cyan) !important;
  fill: var(--accent-cyan) !important;
  box-shadow: none !important;
}
.react-flow__controls-button:hover {
  background-color: var(--input-bg) !important;
}
.react-flow__attribution {
  display: none;
}

/* Estilo para las aristas */
.react-flow__edge-path {
  stroke-width: 1.5;
}
.react-flow__edge.selected .react-flow__edge-path,
.react-flow__edge:hover .react-flow__edge-path {
  stroke: var(--edge-selected-color); /* Corregido */
}

/* React Flow handle styles */
.react-flow__handle {
  width: 10px !important;
  height: 10px !important;
  border-radius: 3px !important;
  z-index: 10 !important;
  transition: all 0.2s ease !important;
  opacity: 0.6 !important;
  background-color: var(--accent-cyan) !important; /* Default, can be overridden */
  border: 2px solid var(--bg-secondary) !important;
}

.react-flow__handle:hover,
.react-flow__node:hover .react-flow__handle,
.react-flow__node.react-flow__node-dragging .react-flow__handle {
  transform: scale(1.3) !important;
  opacity: 1 !important;
}

.react-flow__handle-connecting {
  transform: scale(1.4) !important;
  opacity: 1 !important;
}

/* Specific handle type styles */
.react-flow__handle.handle-source {
  background-color: var(--accent-pink) !important;
}
.react-flow__handle.handle-source:hover {
  box-shadow: 0 0 6px var(--accent-pink) !important;
}
.react-flow__handle.handle-source.react-flow__handle-connecting {
  background-color: var(--accent-pink) !important;
  box-shadow: 0 0 8px var(--accent-pink) !important;
}

.react-flow__handle.handle-target {
  background-color: var(--accent-green) !important;
}
.react-flow__handle.handle-target:hover {
  box-shadow: 0 0 6px var(--accent-green) !important;
}
.react-flow__handle.handle-target.react-flow__handle-connecting {
  background-color: var(--accent-green) !important;
  box-shadow: 0 0 8px var(--accent-green) !important;
}

/* Ensure connection line is visible and styled */
.react-flow__connection-path,
.react-flow__connectionline {
  stroke: var(--accent-cyan) !important;
  stroke-width: 2.5 !important;
  z-index: 9 !important; /* Below handles but above other elements */
}

/* Node selection style */
.react-flow__node.selected > div {
  border-color: var(--node-border-selected) !important;
  box-shadow: var(--node-shadow-selected) !important;
}

/* Edge selection style */
.react-flow__edge.selected .react-flow__edge-path,
.react-flow__edge:hover .react-flow__edge-path {
  stroke: var(--edge-selected-color) !important;
  stroke-width: 2.5 !important;
}

@keyframes nodeEnterAnimation {
  0% {
    transform: scale(0.3) translateZ(0);
    opacity: 0;
  }
  70% {
    transform: scale(1.1) translateZ(0);
    opacity: 0.9;
  }
  100% {
    transform: scale(1) translateZ(0);
    opacity: 1;
  }
}

@keyframes edgeEnterAnimation {
  from {
    opacity: 0;
    stroke-dasharray: 2000;
    stroke-dashoffset: 2000;
  }
  to {
    opacity: 1;
    stroke-dashoffset: 0;
  }
}

.react-flow__node.node-appear {
  animation: nodeEnterAnimation 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275) forwards;
}

.react-flow__edge.edge-appear .react-flow__edge-path {
  animation: edgeEnterAnimation 0.4s ease-out forwards;
  animation-delay: 0.05s; 
}

.react-flow__edge.edge-appear-static .react-flow__edge-path {
  opacity: 1;
}

/* Node specific styles */
.person-node, .company-node {
  /* Default subtle glow */
  box-shadow: 0 0 5px rgba(var(--r-accent-cyan), var(--g-accent-cyan), var(--b-accent-cyan), 0.3),
              0 0 8px rgba(var(--r-accent-cyan), var(--g-accent-cyan), var(--b-accent-cyan), 0.2);
  transition: box-shadow 0.3s ease-in-out, border-color 0.3s ease-in-out;
}

.node-alert-style {
  border-color: var(--node-border-alert) !important;
  box-shadow: 0 0 8px rgba(var(--r-node-border-alert), var(--g-node-border-alert), var(--b-node-border-alert), 0.7),
              0 0 12px rgba(var(--r-node-border-alert), var(--g-node-border-alert), var(--b-node-border-alert), 0.5),
              0 0 0 2px var(--node-border-alert) inset !important;
  animation: pulse-border-alert 1.5s infinite ease-in-out;
}

.node-warning-style {
  border-color: var(--node-border-warning) !important;
  box-shadow: 0 0 8px var(--node-border-warning),
              0 0 12px var(--node-border-warning);
}

@keyframes pulse-border-alert {
  0%, 100% { 
    box-shadow: 0 0 8px rgba(var(--r-node-border-alert), var(--g-node-border-alert), var(--b-node-border-alert), 0.7),
                0 0 12px rgba(var(--r-node-border-alert), var(--g-node-border-alert), var(--b-node-border-alert), 0.5);
  }
  50% { 
    box-shadow: 0 0 12px rgba(var(--r-node-border-alert), var(--g-node-border-alert), var(--b-node-border-alert), 1),
                0 0 18px rgba(var(--r-node-border-alert), var(--g-node-border-alert), var(--b-node-border-alert), 0.7);
  }
}

/* Node content styles */
.node-content {
  width: 100%;
  overflow: hidden;
}

.detail-item {
  margin-top: 0.25rem;
  padding: 0.25rem;
  background: rgba(0, 0, 0, 0.2);
  border-radius: 0.25rem;
  font-size: 0.75rem;
  line-height: 1;
}

.detail-label {
  color: var(--accent-cyan);
  font-weight: 500;
}

.detail-value {
  color: var(--text-secondary);
  word-break: break-word;
}

/* Upload area styles */
.upload-area {
  border: 2px dashed var(--accent-cyan-darker);
  border-radius: 0.5rem;
  padding: 2rem;
  text-align: center;
  cursor: pointer;
  transition: all 0.2s ease-in-out;
}

.upload-area:hover {
  border-color: var(--accent-cyan);
  background: rgba(0, 229, 255, 0.05);
}

.upload-area:focus {
  outline: none;
  border-color: var(--accent-cyan);
  box-shadow: 0 0 0 2px rgba(0, 229, 255, 0.2);
}

/* Action buttons */
.graph-action-button {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.5rem 1rem;
  border-radius: 0.375rem;
  font-weight: 500;
  transition: all 0.2s ease-in-out;
}

.graph-action-button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.overwrite-button {
  background: var(--accent-red);
  color: white;
}

.overwrite-button:hover:not(:disabled) {
  background: #DC2626;
}

.merge-button {
  background: var(--accent-green);
  color: white;
}

.merge-button:hover:not(:disabled) {
  background: #059669;
}

===== frontend/src/styles/GraphPage.css =====
/* frontend/src/styles/GraphPage.css */

.graph-page-container {
  display: flex;
  flex-direction: column;
  width: 100%;
  height: 100vh;
  min-height: 100vh;
  background-color: var(--bg-primary);
  color: var(--text-primary);
  overflow: hidden;
}

/* Barra superior */
.top-bar {
  display: flex;
  align-items: center;
  justify-content: space-between;
  width: 100%;
  padding: 0.5rem 1rem;
  background-color: var(--bg-secondary);
  border-bottom: 1px solid var(--input-border);
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  flex-shrink: 0;
  z-index: 10;
}

/* Botones de acción */
.graph-action-button {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.5rem 1rem;
  font-size: 0.875rem;
  font-weight: 500;
  border-radius: 0.375rem;
  transition: all 0.2s ease;
  background-color: transparent;
  color: var(--text-primary);
  border: 1px solid transparent;
}

.graph-action-button:hover:not(:disabled) {
  background-color: var(--accent-cyan/10);
  color: var(--accent-cyan);
}

.graph-action-button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

/* Contenedor del grafo */
.graph-viewport-wrapper {
  width: 100%;
  height: 100%;
  position: relative;
  background-color: var(--graph-bg);
  border-radius: 0.5rem;
  overflow: hidden;
}

/* Panel de detalles */
.details-panel {
  display: flex;
  flex-direction: column;
  height: 100%;
  background-color: var(--bg-secondary);
  border-left: 1px solid var(--input-border);
  box-shadow: -2px 0 4px rgba(0, 0, 0, 0.1);
}

.details-panel-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0.75rem 1rem;
  border-bottom: 1px solid var(--input-border);
  flex-shrink: 0;
}

.details-panel-content {
  flex: 1;
  overflow: auto;
  padding: 1rem;
}

/* Mensaje de placeholder */
.placeholder-message {
  position: absolute;
  inset: 0;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  color: var(--text-secondary);
  font-size: 1rem;
  padding: 1.5rem;
  text-align: center;
  background-color: var(--bg-primary);
  pointer-events: none;
}

.upload-panel {
  padding: 1rem;
  background-color: var(--bg-secondary);
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
  border-radius: 0.5rem;
  flex-shrink: 0;
}

.panel-title {
  font-size: 1.25rem;
  font-weight: 600;
  margin-bottom: 0.5rem;
  color: var(--accent-cyan);
  text-align: center;
}

.upload-panel-content {
  display: flex;
  flex-direction: row;
  align-items: stretch; /* Make children same height */
  justify-content: space-between; /* Distribute space between children */
  gap: 1rem; /* Reduced gap */
  margin-top: 0.5rem; /* Reduced margin */
}

.upload-area {
  flex: 1; /* Share space equally */
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 0.5rem; /* Reduced padding */
  border: 1px dashed var(--input-border-hover);
  border-radius: 0.5rem;
  text-align: center;
  min-height: 120px; /* Reduced min-height */
}

.loaded-file-info {
  flex: 1; /* Share space equally */
  display: flex;
  flex-direction: column;
  align-items: center; /* Center children horizontally */
  justify-content: center; /* Also center vertically */
  padding: 0.5rem; /* Reduced padding */
  border: 1px dashed var(--input-border-hover);
  border-radius: 0.5rem;
  min-height: 120px; /* Reduced min-height */
}

.file-name-display {
  font-size: 0.75rem;
  color: var(--text-secondary);
  margin-top: 0.75rem;
  text-align: center;
}

.action-buttons-container {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  gap: 1rem;
  margin-top: 1rem;
}

.graph-viewport-container {
  flex: 1 1 auto; /* Changed from flex-grow/flex-shrink/flex-basis to shorthand */
  display: flex; /* Added to ensure proper flex behavior */
  width: 100%; /* Explicit width */
  height: calc(100vh - 300px); /* Explicit height, accounting for header and upload panel */
  min-height: 400px; /* Keep minimum height */
  margin-top: 1rem;
  background-color: var(--graph-bg);
  border-radius: 0.5rem;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
  position: relative;
  overflow: hidden;
  box-sizing: border-box;
}

.reactflow-wrapper {
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  box-sizing: border-box;
}

.json-details-viewer {
  width: 100%;
  max-width: 40rem;
  margin-top: 1rem;
  text-align: left;
}

.json-details-summary {
  cursor: pointer;
  color: var(--accent-cyan);
  text-decoration: underline;
  font-weight: 600;
}

.json-details-pre {
  font-size: 0.75rem;
  white-space: pre-wrap;
  word-break: break-word;
  color: var(--text-secondary);
  overflow: auto;
  max-height: 20rem;
  margin-top: 0.5rem;
  padding: 0.75rem;
  background-color: var(--input-bg);
  border-radius: 0.5rem;
  border: 1px solid var(--input-border);
}

.graph-page-center {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  height: 100vh; /* Full viewport height */
  min-height: 100vh;
  overflow: hidden; /* Prevent scrolling */
}

/* Adding styles for scroll functionality and scrollbar customization */
.graph-page-container .overflow-auto {
  overflow: auto;
  max-height: 80vh; /* Limit height for scrolling */
}

/* Custom scrollbar styles */
.graph-page-container .overflow-auto::-webkit-scrollbar {
  width: 8px;
}

.graph-page-container .overflow-auto::-webkit-scrollbar-thumb {
  background-color: var(--accent-cyan-darker);
  border-radius: 4px;
}

.graph-page-container .overflow-auto::-webkit-scrollbar-track {
  background-color: var(--bg-secondary);
}

/* Styles for the resizable details section */
.details-section {
  position: relative;
  background-color: var(--bg-secondary);
  border: 1px solid var(--input-border-hover);
  overflow: auto;
}

.resize-handle {
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 10px;
  cursor: ns-resize;
  background-color: var(--accent-cyan);
}

/* Estilos específicos de nodos */
.react-flow__node {
  transition: all 0.2s ease;
  border-radius: 0.5rem;
}

.react-flow__node:hover {
  box-shadow: 0 0 10px rgba(0, 229, 255, 0.2);
}

.react-flow__node.selected {
  box-shadow: 0 0 15px rgba(0, 229, 255, 0.4);
}

/* Estilos específicos de aristas */
.react-flow__edge {
  transition: all 0.2s ease;
}

.react-flow__edge:hover {
  filter: brightness(1.2);
}

.react-flow__edge.selected {
  filter: brightness(1.4);
}

.react-flow__edge-path {
  transition: all 0.2s ease;
}

.react-flow__edge-text {
  font-size: 0.75rem;
  fill: var(--edge-label-color);
  transition: all 0.2s ease;
  pointer-events: none;
  user-select: none;
  text-anchor: middle;
  dominant-baseline: middle;
  paint-order: stroke;
  stroke: var(--bg-secondary);
  stroke-width: 3px;
}

.react-flow__edge-text:hover {
  fill: var(--accent-cyan);
}

/* Animaciones */
.edge-appear {
  animation: edgeAppear 0.4s ease-out forwards;
}

.edge-appear-static {
  opacity: 1;
}

@keyframes edgeAppear {
  from {
    opacity: 0;
    stroke-dasharray: 2000;
    stroke-dashoffset: 2000;
  }
  to {
    opacity: 1;
    stroke-dashoffset: 0;
  }
}

.node-appear {
  animation: nodeAppear 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275) forwards;
}

.node-appear-static {
  opacity: 1;
}

@keyframes nodeAppear {
  0% {
    transform: scale(0.3) translateZ(0);
    opacity: 0;
  }
  70% {
    transform: scale(1.1) translateZ(0);
    opacity: 0.9;
  }
  100% {
    transform: scale(1) translateZ(0);
    opacity: 1;
  }
}

/* Línea de conexión */
.react-flow__connection-path {
  stroke: var(--accent-cyan);
  stroke-width: 2;
}

.react-flow__connection-line {
  stroke: var(--accent-cyan);
  stroke-width: 2;
  stroke-dasharray: 5;
}

/* Estilos para el nodo cuando se está arrastrando una conexión */
.react-flow__node.react-flow__node-dragging .react-flow__handle {
  opacity: 1;
  transform: scale(1.2);
}

===== frontend/src/App.js =====
import React from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
// Asegúrate de que estas importaciones de CSS estén comentadas o eliminadas si no las necesitas aquí directamente
// import './App.css'; // Comentado si los estilos principales están en globals.css o son de Tailwind
import LoginPage from './pages/LoginPage'; // .tsx extension is usually not needed here
import GraphPage from './pages/GraphPage'; // .tsx extension is usually not needed here
// import PrivateRoute from './components/auth/PrivateRoute'; // Module not found - Commented out
import './styles/globals.css'; // Importante: tus estilos globales y Tailwind

function App() {
  console.log("App component is rendering");
  // Esta variable isAuthenticated se usa para la redirección inicial en la ruta "/"
  // PrivateRoute maneja la autenticación para las rutas protegidas después de eso.
  // const isAuthenticated = !!localStorage.getItem('access_token'); // Used below

  return (
    <Router>
      {/* Contenedor principal de la aplicación */}
      <div className="App flex flex-col h-screen bg-gray-700"> {/* Fondo gris oscuro para ver el contenedor App */}
        <header
          className="App-header" // Puedes añadir clases de Tailwind aquí si quieres
          style={{
            backgroundColor: '#1e1e1e', // Un color de header distintivo
            padding: '20px',
            textAlign: 'center',
            color: 'white',
            flexShrink: 0, // Importante: Evita que el header se encoja si el contenido de main es grande
            borderBottom: '2px solid var(--accent-cyan)' // Un borde para distinguirlo
          }}
        >
          <h1>Nodex</h1>
        </header>

        {/* Contenedor principal del contenido */}
        <main
          className="flex-grow overflow-auto" // Tailwind classes para que ocupe el espacio y permita scroll
          style={{
            border: '5px solid limegreen', // Borde verde para depurar <main>
            backgroundColor: 'rgba(50, 50, 150, 0.3)', // Fondo azulado semi-transparente para <main>
            // minHeight: '0', // Asegura que flex-grow pueda funcionar correctamente.
            // display: 'flex', // Si quieres que el contenido interno use flex
            // flexDirection: 'column', // Si quieres que el contenido interno se apile verticalmente
          }}
        >
          {/* Div interno para probar el layout dentro de main */}
          <div style={{
              border: '3px dashed yellow',
              // flexGrow: 1, // Descomenta si main tiene display:flex y flexDirection:column y quieres que este div crezca
              minHeight: '100%', // Intenta que este div ocupe toda la altura de main
              backgroundColor: 'rgba(255, 255, 0, 0.1)',
              padding: '10px', // Añade padding para ver el contenido
              display: 'flex', // Para que GraphPage pueda usar flex si es necesario
              flexDirection: 'column' // Para que GraphPage pueda usar flex si es necesario
            }}
          >
            <p style={{color: 'yellow', textAlign: 'center', flexShrink: 0}}>CONTENIDO INTERNO DE MAIN - ¿VES ESTO EN AMARILLO?</p>
            
            {/* Las Rutas van aquí, dentro del div amarillo para ver si se renderizan */}
            <div style={{ flexGrow: 1, border: '2px solid orange', position: 'relative' /* Para ReactFlow */}}> {/* Contenedor para las rutas */}
              <Routes>
                <Route path="/login" element={<LoginPage />} />
                {/* <Route element={<PrivateRoute />}> // PrivateRoute.tsx not found
                  <Route path="/graph" element={<GraphPage />} />
                </Route> */}
                {/* Temporarily making /graph public for testing without PrivateRoute */}
                <Route path="/graph" element={<GraphPage />} />
                <Route
                  path="/"
                  element={
                    // Re-evaluar aquí para la redirección inicial
                    localStorage.getItem('access_token') ? <Navigate to="/graph" replace /> : <Navigate to="/login" replace />
                  }
                />
                {/* Ruta catch-all para redirigir si no se encuentra la ruta */}
                <Route
                  path="*"
                  element={<Navigate to="/" replace />}
                />
              </Routes>
            </div>
          </div>
        </main>
      </div>
    </Router>
  );
}

export default App;

===== frontend/src/types/graph.ts =====
import { Node, Edge } from 'reactflow';

export interface DemoNodeData {
  name: string;
  typeDetails: string;
  status: 'normal' | 'warning' | 'alert' | 'delayed';
  icon?: string;
  details?: Record<string, any>;
  title?: string;
  location?: string;
  rawJsonData?: any; // To store the complete JSON data for the person
  imageUrl?: string; // For profile image
  onImageUpload?: (nodeId: string, file: File) => void; // For image upload functionality
  isHighlighted?: boolean; // For highlighting nodes
}

export interface JsonData {
  nodes?: Node<DemoNodeData>[];
  edges?: Edge[];
  [key: string]: any; // Allow for other properties in the JSON
}

// Re-export types for convenience
export type { Node, Edge };
export type { DemoNodeData as NodeData }; 

===== frontend/src/App.css =====
body {
  margin: 0;
  font-family: Arial, sans-serif;
  background-color: #121212;
  color: #ffffff;
  min-height: 100vh;
  height: 100vh;
  overflow: hidden;
}

.App {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  height: 100vh;
  overflow: hidden;
}

.App-header {
  background-color: #1e1e1e;
  padding: 20px;
  text-align: center;
  flex-shrink: 0;
}

main {
  flex: 1 1 auto;
  display: flex;
  flex-direction: column;
  min-height: 0;
  overflow: hidden;
  padding: 0; /* Remove padding to avoid layout issues for GraphPage */
}


===== frontend/src/index.js =====
import React from 'react';
import { createRoot } from 'react-dom/client';
import './styles/globals.css'; // MANTENER ESTE (Tailwind y variables principales)
// import './assets/css/styles.css'; // COMENTAR TEMPORALMENTE para aislar problemas de CSS
// import './App.css'; // COMENTAR TEMPORALMENTE para aislar problemas de CSS
import App from './App.tsx'; // Changed from App to App.tsx

const container = document.getElementById('root');
const root = createRoot(container);

root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

===== frontend/src/App.tsx =====
// frontend/src/App.tsx
import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate, useLocation } from 'react-router-dom';
import LoginPage from './pages/LoginPage';
import GraphPageWithProvider from './pages/GraphPage';
import './styles/globals.css';

const AppContent: React.FC = () => {
  const [isAuthenticated, setIsAuthenticated] = useState(!!localStorage.getItem('access_token'));
  const location = useLocation();

  useEffect(() => {
    const checkAuth = () => {
      const token = localStorage.getItem('access_token');
      setIsAuthenticated(!!token);
    };
    checkAuth();
    const handleLoginSuccess = () => {
      console.log("AppContent: loginSuccess event received, updating auth state.");
      checkAuth();
    };
    window.addEventListener('loginSuccess', handleLoginSuccess);
    return () => {
      window.removeEventListener('loginSuccess', handleLoginSuccess);
    };
  }, [location.key]);

  console.log("AppContent rendering, isAuthenticated:", isAuthenticated);

  return (
    // .App class from globals.css applies: bg-bg-primary text-text-primary font-sans flex flex-col min-h-screen
    <div className="App"> 
      <header
        className="App-header" // This class is defined in App.css, ensure it's flex-shrink-0
        style={{
          backgroundColor: 'var(--bg-secondary)',
          padding: '1rem',
          textAlign: 'center',
          color: 'var(--text-primary)',
          flexShrink: 0, 
          borderBottom: '1px solid var(--input-border)'
        }}
      >
        <h1 className="text-2xl font-semibold text-accent-cyan">Nodex</h1>
      </header>
      {/* main needs to be a flex container that grows and allows its children to grow */}
      <main
        className="flex-grow flex flex-col" // Ensures main itself is a flex container and grows
        style={{
          position: 'relative', // For absolutely positioned children if needed
          minHeight: '0', // CRUCIAL for flex children that also grow
        }}
      >
        {/* Routes will render GraphPageWithProvider, which has .graph-page-container (flex-grow) */}
        <Routes>
          <Route 
            path="/login" 
            element={!isAuthenticated ? <LoginPage /> : <Navigate to="/graph" replace />} 
          />
          <Route
            path="/graph"
            element={isAuthenticated ? <GraphPageWithProvider /> : <Navigate to="/login" replace />}
          />
          <Route
            path="/"
            element={<Navigate to={isAuthenticated ? "/graph" : "/login"} replace />}
          />
          <Route
            path="*"
            element={<Navigate to="/" replace />}
          />
        </Routes>
      </main>
    </div>
  );
};

function App() {
  return (
    <Router>
      <AppContent />
    </Router>
  );
}

export default App;

===== frontend/src/assets/css/styles.css =====
/* GLE FONTS ===============*/
@import url("https://fonts.googleapis.com/css2?family=Poppins:wght@400;500&display=swap");

/* ============ VARIABLES CSS ===============*/
:root {
  /* ======= Colors (Inspired by User Image) ==========*/
  --hue: 200; /* Use hue for cyan/blue tones (e.g., 200 for a bright sky blue/cyan) */
  --saturation-accent: 100%;
  --lightness-accent: 50%; /* For a bright #00E5FF like cyan */

  --first-color: hsl(var(--hue), var(--saturation-accent), var(--lightness-accent)); /* Bright Cyan */
  --first-color-alt: hsl(var(--hue), var(--saturation-accent), 45%); /* Slightly darker cyan for hover */
  --first-color-light: hsl(var(--hue), var(--saturation-accent), 65%); /* Lighter cyan */

  --bg-dark-primary: #05080D; /* Very dark, almost black with a hint of blue */
  --bg-form-color: hsla(212, 70%, 10%, 0.75); /* Dark blue, slightly transparent for form background */
  --input-bg-color: #0E1625; /* Dark blue for input background */

  --title-color: var(--first-color); /* Bright Cyan for titles */
  --text-color: #C0C8D8; /* Light grayish blue for general text */
  --text-color-light: #8892b0; /* Muted blue-gray for labels, secondary text */
  --text-on-accent: var(--bg-dark-primary); /* Dark text for buttons with cyan background */

  --body-color: var(--bg-dark-primary);
  --container-color: var(--bg-form-color); /* For the form itself */
  --input-border-color: hsl(var(--hue), var(--saturation-accent), 35%); /* Darker cyan for input border */

  /* ======== Font and typography ==========*/
  --body-font: 'Poppins', sans-serif;
  --h1-font-size: 1.75rem;
  --normal-font-size: .938rem;
  --small-font-size: .813rem;

  /* ======== z-index ==========*/
  --z-fixed: 100;
  --z-modal: 1000;
}

/* Responsive typography */
@media screen and (min-width: 968px) {
  :root {
    --h1-font-size: 2.25rem;
    --normal-font-size: 1rem;
    --small-font-size: .875rem;
  }
}

/* ============= BASE ===============*/
* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

body {
  font-family: var(--body-font);
  font-size: var(--normal-font-size);
  background-color: var(--body-color);
  background-image: radial-gradient(ellipse at center, hsl(var(--hue), 30%, 10%) 0%, var(--body-color) 70%);
  background-repeat: no-repeat;
  background-attachment: fixed;
  min-height: 100vh;
  color: var(--text-color);
  line-height: 1.6;
}

h1 {
  color: var(--title-color); /* Default h1 color, though login__title overrides */
}

a {
  text-decoration: none;
  color: var(--first-color);
}

input,
button {
  font-family: var(--body-font);
  border: none;
  outline: none;
}

/* ============= LOGIN PAGE STYLES ===============*/
.login {
  height: 100vh;
  display: grid;
  align-items: center;
  justify-content: center;
  padding: 1.5rem;
}

#loginBackgroundCanvas {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  z-index: -1;
  background-color: var(--body-color);
}

.login-page-container {
  width: 100%;
  height: 100vh;
  overflow: hidden;
}

.login__form {
  position: relative;
  z-index: 1;
  background-color: var(--container-color);
  border: 1px solid hsla(var(--hue), var(--saturation-accent), var(--lightness-accent), 0.2);
  backdrop-filter: blur(8px);
  padding: 2.5rem 2rem;
  border-radius: 1rem;
  box-shadow: 0 8px 32px 0 hsla(var(--hue), var(--saturation-accent), var(--lightness-accent), 0.15),
              0 0 25px hsla(var(--hue), var(--saturation-accent), var(--lightness-accent), 0.1) inset;
  width: 100%;
  max-width: 400px;
  text-align: center;
}

.login__title {
  font-size: var(--h1-font-size);
  font-weight: 500;
  margin-bottom: 2rem;
  color: var(--title-color);
  text-shadow: 0 0 8px hsla(var(--hue), var(--saturation-accent), var(--lightness-accent), 0.7);
}

.login__content {
  display: grid;
  gap: 1.5rem;
  margin-bottom: 1.25rem;
}

.login__box {
  display: grid;
  grid-template-columns: max-content 1fr;
  align-items: center;
  column-gap: 0.75rem;
  border: 1px solid var(--input-border-color);
  padding: 0.5rem 1rem;
  border-radius: 0.75rem;
  background-color: var(--input-bg-color);
  transition: border-color .3s, box-shadow .3s;
}

.login__box:focus-within {
  border-color: var(--first-color);
  box-shadow: 0 0 10px hsla(var(--hue), var(--saturation-accent), var(--lightness-accent), 0.6);
}

.login__icon {
  font-size: 1.25rem;
  color: var(--first-color-light);
  transition: color .3s;
}

.login__box:focus-within .login__icon {
  color: var(--first-color);
}

.login__box-input {
  position: relative;
  width: 100%;
}

.login__input {
  width: 100%;
  padding: 0.9rem 0.25rem;
  background: none;
  color: var(--text-color);
  font-size: var(--normal-font-size);
  letter-spacing: 0.5px;
}

/* Styles for Webkit browser autofill */
.login__input:-webkit-autofill,
.login__input:-webkit-autofill:hover, 
.login__input:-webkit-autofill:focus, 
.login__input:-webkit-autofill:active  {
    -webkit-box-shadow: 0 0 0 30px var(--input-bg-color) inset !important;
    -webkit-text-fill-color: var(--text-color) !important;
    caret-color: var(--first-color) !important;
    border-radius: 0.75rem;
}

.login__label {
  position: absolute;
  left: 0.25rem;
  top: 50%;
  transform: translateY(-50%);
  padding: 0 0.25rem;
  font-size: var(--normal-font-size);
  color: var(--text-color-light);
  font-weight: 400;
  pointer-events: none;
  transition: all 0.2s ease-out;
  background-color: var(--input-bg-color);
  line-height: 1;
}

.login__eye {
  position: absolute;
  right: 0;
  top: 50%;
  transform: translateY(-50%);
  font-size: 1.25rem;
  color: var(--text-color-light);
  cursor: pointer;
  transition: color .3s;
}
.login__eye:hover {
  color: var(--first-color);
}

/* Input focus or value present: move up label */
.login__input:focus + .login__label,
.login__input:not(:placeholder-shown) + .login__label {
  top: -0.85rem; /* Adjust this value to position label above input field correctly */
  font-size: .75rem;
  color: var(--first-color);
}

.login__check {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1.25rem;
  font-size: var(--small-font-size);
}

.login__check-group {
  display: flex;
  align-items: center;
  gap: .5rem;
}

.login__check-input {
  width: 1rem;
  height: 1rem;
  accent-color: var(--first-color); /* Modern browsers styling for checkbox */
  cursor: pointer;
  background-color: var(--input-bg-color); /* Ensure bg matches for non-accent-color scenarios */
  border: 1px solid var(--input-border-color); /* For consistency */
}
.login__check-input:checked {
    background-color: var(--first-color); /* Explicitly set checked bg */
}


.login__check-label,
.login__forgot {
  color: var(--text-color-light);
  transition: color .3s;
}

.login__check-label:hover, /* Hover for label to make it feel more interactive */
.login__forgot:hover {
  color: var(--first-color);
}

.login__button {
  width: 100%;
  padding: 1rem;
  border-radius: 0.75rem;
  background-color: var(--first-color);
  color: var(--text-on-accent);
  font-weight: 500;
  font-size: var(--normal-font-size);
  cursor: pointer;
  margin-bottom: 2rem;
  transition: background-color .3s, box-shadow .3s;
  box-shadow: 0 4px 15px hsla(var(--hue), var(--saturation-accent), var(--lightness-accent), 0.3);
}

.login__button:hover {
  background-color: var(--first-color-alt);
  box-shadow: 0 6px 20px hsla(var(--hue), var(--saturation-accent), var(--lightness-accent), 0.5);
}

.login__button:focus-visible { /* Accessibility focus ring */
  outline: 2px solid var(--first-color-alt);
  outline-offset: 3px;
}

.login__register {
  font-size: var(--small-font-size);
  text-align: center;
  color: var(--text-color-light);
}

.login__register a {
  color: var(--first-color);
  font-weight: 500;
  transition: color .3s, text-decoration .3s;
}

.login__register a:hover {
  color: var(--first-color-light);
  text-decoration: underline;
}

/* Custom scrollbar (Webkit browsers) */
::-webkit-scrollbar {
  width: 10px;
  height: 10px;
}
::-webkit-scrollbar-track {
  background: var(--input-bg-color);
  border-radius: 10px;
}
::-webkit-scrollbar-thumb {
  background: var(--input-border-color);
  border-radius: 10px;
  border: 2px solid var(--input-bg-color); /* Creates a padding effect */
}
::-webkit-scrollbar-thumb:hover {
  background: var(--first-color);
}


===== frontend/src/pages/GraphPage.tsx =====
// frontend/src/pages/GraphPage.tsx
import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';
import ReactFlow, {
  Controls,
  Background,
  useNodesState,
  useEdgesState,
  Node,
  Edge,
  Connection,
  useReactFlow,
  ReactFlowProvider,
  MarkerType,
  addEdge,
} from 'reactflow';
import 'reactflow/dist/style.css';
import '../styles/globals.css';
import '../styles/GraphPage.css';
import { Panel, PanelGroup, PanelResizeHandle } from 'react-resizable-panels';

import PersonNode from '../components/graph/PersonNode';
import CompanyNode from '../components/graph/CompanyNode';
import { UploadCloud, Replace, Layers, Download, X } from 'lucide-react';
import { JsonData, DemoNodeData } from '../types/graph';
import { processJsonToSinglePersonNode } from '../utils/jsonProcessor';
import JsonDetailModal from '../components/modals/JsonDetailModal';
import RelationshipModal from '../components/modals/RelationshipModal';

import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';
import CustomConnectionLine from '../components/graph/CustomConnectionLine';
import TopMenuBar from '../components/layout/TopMenuBar';

const nodeTypes = {
  person: PersonNode,
  company: CompanyNode, // Keep for future use
};

export const GraphPage: React.FC = () => {
  const reactFlowInstance = useReactFlow();
  const animationCleanupRef = useRef<{ cleanup: (() => void) } | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const topBarRef = useRef<HTMLDivElement>(null);
  
  const [fileName, setFileName] = useState<string>('');
  const [selectedFileContent, setSelectedFileContent] = useState<JsonData | null>(null);
  const [isRelationshipModalOpen, setIsRelationshipModalOpen] = useState(false);
  const [pendingConnection, setPendingConnection] = useState<Connection | null>(null);
  const [editingEdge, setEditingEdge] = useState<Edge | null>(null);
  const [detailsNode, setDetailsNode] = useState<Node<DemoNodeData> | null>(null);
  const [isDetailPanelVisible, setIsDetailPanelVisible] = useState(false);
  const [topBarHeight, setTopBarHeight] = useState(60);
  
  const [nodes, setNodes, onNodesChange] = useNodesState<DemoNodeData>([]);
  const [edges, setEdges, onEdgesChange] = useEdgesState([]);
  const [uploadedImageUrls, setUploadedImageUrls] = useState<Record<string, string>>({});

  const memoizedNodeTypes = useMemo(() => nodeTypes, []);

  // Estilos para las aristas
  const defaultEdgeStyle = {
    stroke: 'var(--edge-default-color)',
    strokeWidth: 2,
    transition: 'all 0.2s ease',
  };

  const selectedEdgeStyle = {
    ...defaultEdgeStyle,
    stroke: 'var(--accent-cyan)',
    strokeWidth: 3,
    filter: 'drop-shadow(0 0 2px var(--accent-cyan))',
  };

  const connectionLineStyle = { stroke: 'var(--accent-cyan)', strokeWidth: 2.5 };



  // Actualizar el estado de detailsNode y visibilidad del panel
  const onNodeClick = useCallback((event: React.MouseEvent, node: Node<DemoNodeData>) => {
    if (node.data?.rawJsonData) {
      setDetailsNode(node);
      setIsDetailPanelVisible(true);
    } else {
      setDetailsNode(null);
      setIsDetailPanelVisible(false);
    }
  }, []);

  const handleCloseDetailPanel = useCallback(() => {
    setDetailsNode(null);
    setIsDetailPanelVisible(false);
  }, []);

  // Mejorar el manejo de conexiones
  const onConnect = useCallback((params: Connection) => {
    if (!params.source || !params.target) return;
    if (params.source === params.target) return;

    const newEdge: Edge = {
      id: `edge-${params.source}-${params.target}-${Date.now()}`,
      source: params.source,
      target: params.target,
      type: 'smoothstep',
      style: defaultEdgeStyle,
      markerEnd: { type: MarkerType.ArrowClosed, color: 'var(--edge-default-color)' },
    };

    setEdges((eds) => addEdge(newEdge, eds));

    const sourceNode = nodes.find(n => n.id === params.source);
    const targetNode = nodes.find(n => n.id === params.target);

    if (sourceNode?.type === 'person' && targetNode?.type === 'person') {
      setEditingEdge(newEdge);
      setIsRelationshipModalOpen(true);
    }
  }, [nodes, setEdges]);

  const handleCreateOrUpdateRelationship = useCallback((label: string, isDirected: boolean) => {
    console.log("Intentando crear/actualizar relación:", { label, isDirected, editingEdge, pendingConnection });
    
    let finalEdge: Edge | null = null;
    
    if (editingEdge) {
      finalEdge = { 
        ...editingEdge, 
        label, 
        markerEnd: isDirected ? { type: MarkerType.ArrowClosed, color: 'var(--edge-default-color)' } : undefined,
        style: defaultEdgeStyle,
      };
      setEdges((eds) => eds.map((edge) => (edge.id === editingEdge.id ? finalEdge as Edge : edge)));
      setEditingEdge(null);
    } else if (pendingConnection) {
      finalEdge = {
        id: `edge-${pendingConnection.source}-${pendingConnection.target}-${Date.now()}`,
        source: pendingConnection.source!,
        target: pendingConnection.target!,
        sourceHandle: pendingConnection.sourceHandle,
        targetHandle: pendingConnection.targetHandle,
        label: label,
        type: 'smoothstep',
        style: defaultEdgeStyle,
        markerEnd: isDirected ? { type: MarkerType.ArrowClosed, color: 'var(--edge-default-color)' } : undefined,
        className: 'edge-appear',
      };
      
      setEdges((eds) => {
        const newEdges = addEdge(finalEdge as Edge, eds);
        console.log("Nuevas aristas después de añadir:", newEdges);
        return newEdges;
      });
      setPendingConnection(null);
    }

    if (finalEdge) {
      const edgeToAnimateId = finalEdge.id;
      setTimeout(() => {
        setEdges((eds) =>
          eds.map((e) =>
            e.id === edgeToAnimateId 
              ? { ...e, className: (e.className || '').replace('edge-appear', 'edge-appear-static').trim() } 
              : e
          )
        );
      }, 400);
    }
    
    setIsRelationshipModalOpen(false);
  }, [editingEdge, pendingConnection, setEdges, defaultEdgeStyle]);

  // Function to handle image uploads for nodes
  const handleImageUploadForNode = useCallback((nodeId: string, file: File) => {
    console.log(`Uploading image for node ${nodeId}:`, file.name);
    
    // Revoke previous URL if it exists for this node
    if (uploadedImageUrls[nodeId]) {
      URL.revokeObjectURL(uploadedImageUrls[nodeId]);
    }

    const newImageUrl = URL.createObjectURL(file);
    setUploadedImageUrls(prev => ({ ...prev, [nodeId]: newImageUrl }));

    setNodes((nds) =>
      nds.map((node) => {
        if (node.id === nodeId) {
          return {
            ...node,
            data: {
              ...node.data,
              imageUrl: newImageUrl,
            },
          };
        }
        return node;
      })
    );
  }, [setNodes, uploadedImageUrls]);

  // Cleanup object URLs when component unmounts
  useEffect(() => {
    return () => {
      Object.values(uploadedImageUrls).forEach(url => URL.revokeObjectURL(url));
    };
  }, [uploadedImageUrls]);

  // Cleanup object URLs when nodes are removed
  useEffect(() => {
    const currentNodeImageUrls = new Set(
      nodes.map(node => node.data.imageUrl).filter(Boolean) as string[]
    );
    const urlsToRevoke = Object.entries(uploadedImageUrls)
      .filter(([nodeId, url]) => !currentNodeImageUrls.has(url))
      .map(([nodeId, url]) => url);

    if (urlsToRevoke.length > 0) {
      urlsToRevoke.forEach(url => URL.revokeObjectURL(url));
      setUploadedImageUrls(prev => {
        const newState = { ...prev };
        Object.entries(newState).forEach(([nodeId, url]) => {
          if (urlsToRevoke.includes(url)) {
            delete newState[nodeId];
          }
        });
        return newState;
      });
    }
  }, [nodes, uploadedImageUrls]);

  const animateGraphLoad = useCallback(
    (initialNodes: Node<DemoNodeData>[], initialEdges: Edge[], isOverwrite: boolean = false) => {
      if (animationCleanupRef.current?.cleanup) {
        animationCleanupRef.current.cleanup();
        animationCleanupRef.current = null;
      }

      const nodesToSet = initialNodes.map((node) => ({
        ...node,
        className: `${node.className || ''} node-appear`.trim(),
      }));
      const edgesToSet = initialEdges.map((edge) => ({
        ...edge,
        className: `${edge.className || ''} edge-appear`.trim(),
      }));
      
      if (isOverwrite) {
        setNodes(nodesToSet);
        setEdges(edgesToSet);
      } else {
        const existingNodeIds = new Set(nodes.map(n => n.id));
        const newNodesToAdd = nodesToSet.filter(n => !existingNodeIds.has(n.id));
        
        const existingEdgeIds = new Set(edges.map(e => e.id));
        const newEdgesToAdd = edgesToSet.filter(e => !existingEdgeIds.has(e.id));

        setNodes((nds) => [...nds, ...newNodesToAdd]);
        setEdges((eds) => [...eds, ...newEdgesToAdd]);
      }

      const timeoutId = setTimeout(() => {
        setNodes((nds) =>
          nds.map((n) => ({
            ...n,
            className: n.className?.replace('node-appear', 'node-appear-static').trim(),
          }))
        );
        setEdges((eds) =>
          eds.map((e) => ({
            ...e,
            className: e.className?.replace('edge-appear', 'edge-appear-static').trim(),
          }))
        );
        if (animationCleanupRef.current?.cleanup === (() => clearTimeout(timeoutId))) {
          animationCleanupRef.current = null;
        }
      }, 1000);

      animationCleanupRef.current = { cleanup: () => clearTimeout(timeoutId) };

      setTimeout(() => {
        reactFlowInstance.fitView({ padding: 0.2, duration: 800 });
      }, 100);
    },
    [setNodes, setEdges, reactFlowInstance, nodes, edges]
  );

  const handleJsonUploaded = useCallback(
    (uploadedData: JsonData, uploadedFileName: string, mode: 'overwrite' | 'merge' = 'overwrite') => {
      setFileName(uploadedFileName);
      const { node: newSingleNode } = processJsonToSinglePersonNode(uploadedData, nodes);

      if (!newSingleNode) {
        alert("No se pudo identificar una persona en el JSON. No se creó ningún nodo.");
        return;
      }
      
      // Add the image upload callback to the node data
      const nodeWithUploadCallback = {
        ...newSingleNode,
        data: {
          ...newSingleNode.data,
          onImageUpload: handleImageUploadForNode,
        },
      };

      if (mode === 'overwrite') {
        // When overwriting, ensure all nodes have the upload callback
        const nodesToSet = [nodeWithUploadCallback].map(n => ({
          ...n,
          data: {
            ...n.data,
            onImageUpload: handleImageUploadForNode,
          }
        }));
        animateGraphLoad(nodesToSet, [], true);
      } else {
        // Merge mode
        const nodeWithAnimation = { 
          ...nodeWithUploadCallback, 
          className: `${nodeWithUploadCallback.className || ''} node-appear`.trim() 
        };
        
        setNodes((nds) => {
          // When adding nodes, ensure all person nodes have the upload callback
          const updatedNodes = [...nds, nodeWithAnimation];
          return updatedNodes.map(n => 
            n.type === 'person' ? { ...n, data: { ...n.data, onImageUpload: handleImageUploadForNode } } : n
          );
        });
        
        const animationDuration = 1000; 
        const addedNodeId = nodeWithAnimation.id;

        setTimeout(() => {
          setNodes((nds) =>
            nds.map((n) =>
              n.id === addedNodeId
                ? { ...n, className: (n.className || '').replace('node-appear', 'node-appear-static').trim() }
                : n
            )
          );
        }, animationDuration);
        
        setTimeout(() => {
          reactFlowInstance.fitView({ padding: 0.2, duration: 800, nodes: [newSingleNode] });
        }, 150);
      }
    },
    [nodes, animateGraphLoad, reactFlowInstance, setNodes, handleImageUploadForNode]
  );

  useEffect(() => {
    return () => { 
      if (animationCleanupRef.current?.cleanup) {
        animationCleanupRef.current.cleanup(); 
      }
    };
  }, []);

  const handleUploadAreaClick = () => fileInputRef.current?.click();

  const handleFileDrop = useCallback((event: React.DragEvent<HTMLDivElement>) => {
    event.preventDefault();
    event.stopPropagation();
    const file = event.dataTransfer.files?.[0];
    if (file && file.type === 'application/json') {
      setFileName(file.name);
      file.text().then(text => {
        try {
          const parsedJson = JSON.parse(text) as JsonData;
          setSelectedFileContent(parsedJson);
        } catch (error) {
          alert('El archivo no es un JSON válido.');
        }
      });
    } else {
      alert('Por favor, carga un archivo JSON válido.');
    }
  }, []);

  const handleDragOver = useCallback((event: React.DragEvent<HTMLDivElement>) => {
    event.preventDefault();
    event.stopPropagation();
  }, []);

  const handleDragLeave = handleDragOver; // Assuming this was intended to be similar

  const handleFileSelected = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setFileName(file.name);
      try {
        const text = await file.text();
        const parsedJson = JSON.parse(text) as JsonData;
        setSelectedFileContent(parsedJson);
      } catch (error) {
        alert('El archivo no es un JSON válido.');
        setSelectedFileContent(null);
      }
      if (fileInputRef.current) fileInputRef.current.value = "";
    }
  };
  
  const onEdgeClick = useCallback((event: React.MouseEvent, edge: Edge) => {
    event.stopPropagation();
    setEditingEdge(edge);
    setPendingConnection(null);
    setIsRelationshipModalOpen(true);
  }, []);

  const onElementsRemove = useCallback((elementsToRemove: (Node | Edge)[]) => {
    const nodeIdsToRemove = new Set(elementsToRemove.filter(el => 'position' in el).map(el => el.id));
    const edgeIdsToRemove = new Set(elementsToRemove.filter(el => 'source' in el).map(el => el.id));

    if (nodeIdsToRemove.size > 0) {
      setNodes((nds) => nds.filter((node) => !nodeIdsToRemove.has(node.id)));
      // If a node is removed, also remove its details from the panel
      if (detailsNode && nodeIdsToRemove.has(detailsNode.id)) {
        setDetailsNode(null);
      }
    }
    if (edgeIdsToRemove.size > 0) {
      setEdges((eds) => eds.filter((edge) => !edgeIdsToRemove.has(edge.id)));
    }
  }, [setNodes, setEdges, detailsNode]);

  const handleExportPDF = async () => {
    const currentGraphNodes = reactFlowInstance.getNodes();
    if (currentGraphNodes.length === 0) {
      alert("No hay contenido en el grafo para exportar.");
      return;
    }
    const viewportElement = document.querySelector('.react-flow__viewport') as HTMLElement;
    if (!viewportElement) {
      console.error('Elemento viewport de ReactFlow no encontrado.');
      alert('Error: Elemento viewport no encontrado para exportar.');
      return;
    }
    try {
      // Remove box shadows from nodes for cleaner export
      document.querySelectorAll('.react-flow__node').forEach(nodeEl => {
        (nodeEl as HTMLElement).style.boxShadow = 'none';
      });
      
      const canvas = await html2canvas(viewportElement, {
        logging: false, 
        useCORS: true,
        backgroundColor: window.getComputedStyle(document.documentElement).getPropertyValue('--graph-bg').trim() || '#001F3F',
        scale: 1.5,
      });
      
      // Restore box shadows
      document.querySelectorAll('.react-flow__node').forEach(nodeEl => {
        (nodeEl as HTMLElement).style.boxShadow = ''; 
      });
      
      const imgData = canvas.toDataURL('image/png', 1.0);
      const pdf = new jsPDF({
        orientation: canvas.width > canvas.height ? 'l' : 'p',
        unit: 'px',
        format: [canvas.width, canvas.height],
      });
      
      pdf.addImage(imgData, 'PNG', 0, 0, canvas.width, canvas.height);
      const pdfFileName = `${fileName.replace(/\.json$/i, '') || 'grafo'}_${new Date().toISOString().split('T')[0]}.pdf`;
      pdf.save(pdfFileName);
    } catch (error: any) {
      console.error('Error exportando grafo a PDF:', error);
      alert(`Fallo al exportar grafo a PDF. Error: ${error.message || String(error)}`);
      document.querySelectorAll('.react-flow__node').forEach(nodeEl => {
        (nodeEl as HTMLElement).style.boxShadow = '';
      });
    }
  };

  const isValidConnection = (connection: Connection) => {
    return connection.source !== connection.target;
  };

  // Add missing zoom and fitView handlers
  const handleZoomIn = useCallback(() => {
    reactFlowInstance.zoomIn({ duration: 300 });
  }, [reactFlowInstance]);

  const handleZoomOut = useCallback(() => {
    reactFlowInstance.zoomOut({ duration: 300 });
  }, [reactFlowInstance]);

  const handleFitView = useCallback(() => {
    reactFlowInstance.fitView({ padding: 0.2, duration: 500 });
  }, [reactFlowInstance]);

  const sourceNodeForModal = editingEdge ? nodes.find(n => n.id === editingEdge.source) : null;
  const targetNodeForModal = editingEdge ? nodes.find(n => n.id === editingEdge.target) : null;
  
  const sourceNodeNameForModal = sourceNodeForModal?.data?.name || 'Nodo Origen';
  const targetNodeNameForModal = targetNodeForModal?.data?.name || 'Nodo Destino';



  return (
    <div className="graph-page-container flex flex-col h-full w-full overflow-hidden">
      <TopMenuBar
        onUploadClick={handleUploadAreaClick}
        onOverwrite={() => selectedFileContent && handleJsonUploaded(selectedFileContent, fileName, 'overwrite')}
        onMerge={() => selectedFileContent && handleJsonUploaded(selectedFileContent, fileName, 'merge')}
        onExportPDF={handleExportPDF}
        onZoomIn={handleZoomIn}
        onZoomOut={handleZoomOut}
        onFitView={handleFitView}
        isFileLoaded={!!selectedFileContent}
        isGraphEmpty={nodes.length === 0}
        fileName={fileName}
      />
      
      <input 
        type="file" 
        accept=".json" 
        className="hidden" 
        ref={fileInputRef} 
        onChange={handleFileSelected} 
      />

      {/* Contenedor principal con paneles redimensionables */}
      <PanelGroup direction="horizontal" className="flex-grow min-h-0">
        <Panel 
          defaultSize={isDetailPanelVisible ? 70 : 100} 
          minSize={30} 
          order={1}
          className="relative"
        >
          <div 
            className="graph-viewport-wrapper w-full h-full relative bg-graph-bg rounded-md"
            onDrop={handleFileDrop}
            onDragOver={handleDragOver}
            onDragLeave={handleDragLeave}
          >
            <ReactFlow
              nodes={nodes.map(node => ({
                ...node,
                data: {
                  ...node.data,
                  onImageUpload: node.type === 'person' ? handleImageUploadForNode : undefined,
                }
              }))}
              edges={edges}
              onNodesChange={onNodesChange}
              onEdgesChange={onEdgesChange}
              onConnect={onConnect}
              onNodeClick={onNodeClick}
              onEdgeClick={onEdgeClick}
              onNodesDelete={onElementsRemove}
              onEdgesDelete={onElementsRemove}
              nodeTypes={memoizedNodeTypes}
              fitView={false}
              minZoom={0.1}
              maxZoom={2.5}
              defaultViewport={{ x: 0, y: 0, zoom: 1 }}
              proOptions={{ hideAttribution: true }}
              className="graph-viewport"
              connectionLineComponent={CustomConnectionLine}
              connectionLineStyle={connectionLineStyle}
              deleteKeyCode={['Backspace', 'Delete']}
              isValidConnection={isValidConnection}
            >
              <Background />
              <Controls />
              {nodes.length === 0 && (
                <div className="placeholder-message">
                  <UploadCloud size={64} className="mx-auto mb-6 text-text-secondary" />
                  <p className="mb-2">Arrastra y suelta un archivo JSON aquí</p>
                  <p className="mb-4 text-sm">o usa el botón "Cargar JSON" de arriba.</p>
                </div>
              )}
            </ReactFlow>
          </div>
        </Panel>
        
        {isDetailPanelVisible && detailsNode && (
          <>
            <PanelResizeHandle className="w-2 bg-input-border hover:bg-accent-cyan focus:outline-none focus:ring-2 focus:ring-accent-cyan transition-colors flex items-center justify-center group">
              <div className="w-[3px] h-10 bg-bg-primary rounded-full group-hover:bg-accent-cyan-darker transition-colors"></div>
            </PanelResizeHandle>
            <Panel 
              defaultSize={30} 
              minSize={20} 
              maxSize={50} 
              order={2} 
              id="details-panel-resizable"
            >
              <div className="bg-bg-secondary h-full flex flex-col overflow-hidden rounded-md border-l border-input-border shadow-lg">
                <div className="p-3 border-b border-input-border flex justify-between items-center flex-shrink-0">
                  <h3 className="text-md font-semibold text-accent-cyan truncate" title={detailsNode.data.name}>
                    Detalles: {detailsNode.data.name}
                  </h3>
                  <button 
                    onClick={handleCloseDetailPanel} 
                    className="text-text-secondary hover:text-accent-red p-1 rounded-full hover:bg-accent-red/10 transition-colors"
                    aria-label="Cerrar panel de detalles"
                  >
                    <X size={18} />
                  </button>
                </div>
                <div className="flex-grow overflow-auto p-3">
                  <pre className="text-xs text-text-primary whitespace-pre-wrap break-words scrollbar-thin scrollbar-thumb-accent-cyan-darker scrollbar-track-bg-input-bg bg-input-bg p-2 rounded-sm">
                    {JSON.stringify(detailsNode.data.rawJsonData, null, 2)}
                  </pre>
                </div>
              </div>
            </Panel>
          </>
        )}
      </PanelGroup>

      <RelationshipModal
        isOpen={isRelationshipModalOpen}
        onClose={() => {
          setIsRelationshipModalOpen(false);
          setPendingConnection(null);
          setEditingEdge(null);
        }}
        onSubmit={handleCreateOrUpdateRelationship}
        sourceNodeName={sourceNodeNameForModal}
        targetNodeName={targetNodeNameForModal}
        initialLabel={editingEdge?.label as string | undefined}
        initialIsDirected={editingEdge ? editingEdge.markerEnd !== undefined : true}
      />
    </div>
  );
};

const GraphPageWithProvider: React.FC = () => (
  <ReactFlowProvider>
    <GraphPage />
  </ReactFlowProvider>
);

export default GraphPageWithProvider;


===== frontend/src/pages/LoginPage.tsx =====
import React from 'react';
import LoginForm from '../components/auth/LoginForm';
import AnimatedBackground from '../components/AnimatedBackground.js'; // Now available
import '../assets/css/styles.css';

const LoginPage: React.FC = () => {
  const handleLoginSuccess = () => {
    // This function is called on successful login from LoginForm
    // It can be used to update global state if needed, e.g., force App re-render
    // For now, navigation is handled within LoginForm.
    console.log('Login success callback triggered in LoginPage.');
  };

  return (
    <div className="login-page-container">
      <AnimatedBackground /> {/* Now uncommented */}
      <div className="flex items-center justify-center h-screen">
        <LoginForm onLoginSuccess={handleLoginSuccess} />
      </div>
    </div>
  );
};

export default LoginPage;

===== frontend/src/utils/layoutGraph.ts =====
import ELK, { ElkNode, ElkExtendedEdge, LayoutOptions } from 'elkjs/lib/elk.bundled.js';
import { Node, Edge } from 'reactflow';
import { DemoNodeData } from '../types/graph';

const NODE_DIMENSIONS: Record<string, { width: number; height: number }> = {
  person: { width: 160, height: 180 },
  company: { width: 192, height: 220 },
  jsonPrimitive: { width: 180, height: 70 },
  jsonObjectArray: { width: 192, height: 120 },
};
const DEFAULT_NODE_WIDTH = 180;
const DEFAULT_NODE_HEIGHT = 100;

const elk = new ELK();

const elkLayoutOptions: LayoutOptions = {
  'elk.algorithm': 'layered',
  'elk.direction': 'DOWN',
  'elk.layered.spacing.nodeNodeBetweenLayers': '100',
  'elk.layered.spacing.nodeNode': '80',
  'elk.layered.spacing.edgeNodeBetweenLayers': '80',
  'elk.layered.cycleBreaking.strategy': 'GREEDY',
  'elk.edgeRouting': 'ORTHOGONAL',
  'elk.layered.nodePlacement.strategy': 'NETWORK_SIMPLEX',
  'elk.padding': '[top=50,left=50,bottom=50,right=50]',
  'elk.zoomToFit': 'true',
  'elk.layered.crossingMinimization.strategy': 'LAYER_SWEEP',
  'elk.layered.considerModelOrder.strategy': 'NODES_AND_EDGES',
  'elk.separateConnectedComponents': 'false',
};

const getNodeDimensions = (node: Node<DemoNodeData>): { width: number; height: number } => {
  if (node.type && NODE_DIMENSIONS[node.type]) {
    return NODE_DIMENSIONS[node.type];
  }
  if (node.id.startsWith('jsonGraphNode-')) {
    if (node.type === 'person') return NODE_DIMENSIONS.jsonPrimitive || { width: DEFAULT_NODE_WIDTH, height: 70 };
    if (node.type === 'company') return NODE_DIMENSIONS.jsonObjectArray || { width: DEFAULT_NODE_WIDTH, height: DEFAULT_NODE_HEIGHT };
  }
  return { width: DEFAULT_NODE_WIDTH, height: DEFAULT_NODE_HEIGHT };
};

export const getLayoutedElements = async (
  nodes: Node<DemoNodeData>[],
  edges: Edge[],
  options: LayoutOptions = elkLayoutOptions
): Promise<{ nodes: Node<DemoNodeData>[]; edges: Edge[] }> => {
  if (!nodes || nodes.length === 0) {
    return { nodes, edges };
  }

  const elkNodes: ElkNode[] = nodes.map((node) => {
    const dimensions = getNodeDimensions(node);
    return {
      id: node.id,
      width: dimensions.width,
      height: dimensions.height,
    };
  });

  const elkEdges: ElkExtendedEdge[] = edges.map((edge) => ({
    id: edge.id,
    sources: [edge.source],
    targets: [edge.target],
  }));

  const graphToLayout: ElkNode = {
    id: 'root',
    layoutOptions: options,
    children: elkNodes,
    edges: elkEdges,
  };

  try {
    const layoutedGraph = await elk.layout(graphToLayout);
    const newNodes = nodes.map((node) => {
      const elkNode = layoutedGraph.children?.find((n) => n.id === node.id);
      if (elkNode && typeof elkNode.x === 'number' && typeof elkNode.y === 'number') {
        return {
          ...node,
          position: { x: elkNode.x, y: elkNode.y },
        };
      }
      return node;
    });
    const newEdges = edges.map(edge => {
      // ELK puede proveer puntos de ruteo para las aristas, pero por ahora devolvemos la arista original
      return edge;
    });
    return { nodes: newNodes, edges: newEdges };
  } catch (e) {
    console.error('Error during ELK layout:', e);
    return { nodes, edges };
  }
}; 

===== frontend/src/utils/jsonProcessor.ts =====
// frontend/src/utils/jsonProcessor.ts
import { Node } from 'reactflow';
import { DemoNodeData } from '../types/graph'; // Usaremos DemoNodeData, asegurándonos que incluya rawJsonData

// Helper function to safely get nested properties
const getNested = (obj: any, path: string, defaultValue: any = undefined): any => {
  const parts = path.split('.');
  let current = obj;

  for (const part of parts) {
    if (typeof current !== 'object' || current === null) {
      return defaultValue;
    }

    const arrayMatch = part.match(/^(\w+)\[(\d+)\]$/);
    if (arrayMatch) {
      const arrayKey = arrayMatch[1];
      const index = parseInt(arrayMatch[2], 10);
      if (current.hasOwnProperty(arrayKey) && Array.isArray(current[arrayKey]) && index < current[arrayKey].length) {
        current = current[arrayKey][index];
      } else {
        return defaultValue;
      }
    } else if (current.hasOwnProperty(part)) {
      current = current[part];
    } else {
      return defaultValue;
    }
  }
  return current === undefined ? defaultValue : current;
};

export const extractPersonInfo = (jsonData: any): { name: string; curp: string; rfc: string; otherKeyData: Record<string, any> } => {
  let name = "Persona Desconocida";
  let curp = "N/A";
  let rfc = "N/A";
  const otherKeyData: Record<string, any> = {};

  // Prioritized search for CURP
  const curpPaths = [
    'curp_online.data.registros[0].curp', 'buro1.data[0].curp', 'ine2.data[0].curp',
    'ine3.data[0].curp', 'vacunacion.data[0].curp', 'buro1.data[0].nombre.curp',
    'pasaportes2022.data[0].solicitud.datos_personales.curp',
    'pasaportes2023.data[0].solicitud.datos_personales.curp',
  ];
  for (const path of curpPaths) {
    const foundCurp = getNested(jsonData, path);
    if (foundCurp && typeof foundCurp === 'string' && foundCurp.length > 5) {
      curp = foundCurp;
      break;
    }
  }

  // Prioritized search for Full Name
  const namePaths = [
    'buro1.data[0].nombre_completo',
    'buro1.data[0].nombre.nombre_completo',
    'buro2.data[0].nombre_completo',
    'vacunacion.data[0].NOMBRE', 
  ];
   for (const path of namePaths) {
    const foundName = getNested(jsonData, path);
    if (foundName && typeof foundName === 'string' && foundName.trim().length > 3) {
      name = foundName.trim();
      if (path === 'vacunacion.data[0].NOMBRE') { // Completar con apellidos si es de vacunacion
        const paternoVac = getNested(jsonData, 'vacunacion.data[0].PATERNO');
        const maternoVac = getNested(jsonData, 'vacunacion.data[0].MATERNO');
        if (paternoVac) name += ` ${paternoVac.trim()}`;
        if (maternoVac) name += ` ${maternoVac.trim()}`;
        name = name.trim();
      }
      break;
    }
  }

  if (name === "Persona Desconocida" || name.split(' ').length < 2) {
    const nombres = getNested(jsonData, 'curp_online.data.registros[0].nombres') || getNested(jsonData, 'ine1.data[0].nombre');
    const paterno = getNested(jsonData, 'curp_online.data.registros[0].primerApellido') || getNested(jsonData, 'ine1.data[0].paterno');
    const materno = getNested(jsonData, 'curp_online.data.registros[0].segundoApellido') || getNested(jsonData, 'ine1.data[0].materno');
    if (nombres && paterno) {
      name = `${nombres.trim()} ${paterno.trim()}${materno ? ' ' + materno.trim() : ''}`.trim();
    }
  }
  
  const rfcPaths = [
    'buro1.data[0].rfc_completo', 
    'buro1.data[0].nombre.rfc_completo',
    'buro2.data[0].rfc_completo',
  ];
  for (const path of rfcPaths) {
      const foundRfc = getNested(jsonData, path);
      if (foundRfc && typeof foundRfc === 'string' && foundRfc.length > 5) {
          rfc = foundRfc;
          break;
      }
  }
  
  otherKeyData.fechaNacimiento = getNested(jsonData, 'curp_online.data.registros[0].fechaNacimiento') || 
                                 getNested(jsonData, 'buro1.data[0].fecha_nacimiento') || 
                                 getNested(jsonData, 'ine1.data[0].fecha_nac') ||
                                 getNested(jsonData, 'buro1.data[0].nombre.fecha_nacimiento');
  const oid = getNested(jsonData, '_id.$oid');
  if (oid) otherKeyData.docId = oid;

  return { name, curp, rfc, otherKeyData };
};

export const processJsonToSinglePersonNode = (jsonData: any, existingNodes: Node<DemoNodeData>[]): { node: Node<DemoNodeData> | null } => {
  const personInfo = extractPersonInfo(jsonData);

  if (personInfo.name === "Persona Desconocida" && personInfo.curp === "N/A") {
    console.warn("No se pudo identificar a la persona desde el JSON. No se creó el nodo.");
    return { node: null };
  }
  
  let nodeIdBase = personInfo.curp !== "N/A" ? personInfo.curp : personInfo.name.replace(/[^a-zA-Z0-9]/g, '_').toLowerCase();
  if (!nodeIdBase || nodeIdBase === "persona_desconocida") {
    nodeIdBase = `person-uid-${Date.now()}`;
  }
  let nodeId = `person-${nodeIdBase}`;
  let counter = 1;
  while (existingNodes.some(n => n.id === nodeId)) {
    nodeId = `person-${nodeIdBase}-${counter++}`;
  }

  const PADDING = 40;
  const NODE_WIDTH = 200; 
  const NODE_HEIGHT = 220; // Ajustar según el contenido típico del nodo
  const COLS = Math.max(1, Math.floor( (typeof window !== 'undefined' ? window.innerWidth * 0.9 : 1200) / (NODE_WIDTH + PADDING) ) );

  const numExistingNodes = existingNodes.length;
  const xPos = (numExistingNodes % COLS) * (NODE_WIDTH + PADDING) + PADDING;
  const yPos = Math.floor(numExistingNodes / COLS) * (NODE_HEIGHT + PADDING) + PADDING;

  const personNode: Node<DemoNodeData> = {
    id: nodeId,
    type: 'person', // Usará PersonNode.tsx
    position: { x: xPos, y: yPos },
    data: {
      name: personInfo.name,
      title: `CURP: ${personInfo.curp}`, // Se mostrará debajo del nombre
      typeDetails: 'Persona', // Para consistencia con DemoNodeData, no se usa mucho en PersonNode.tsx
      status: 'normal',
      details: { // Estos son los detalles que se muestran en el nodo mismo
          ...(personInfo.rfc !== "N/A" && { RFC: personInfo.rfc }),
          ...(personInfo.otherKeyData.fechaNacimiento && { "Fec. Nac.": personInfo.otherKeyData.fechaNacimiento }),
          ...(personInfo.otherKeyData.docId && { "ID Doc.": personInfo.otherKeyData.docId.substring(0,10) + "..." }),
      },
      rawJsonData: jsonData, // El JSON completo para el modal de detalles
    },
  };

  return { node: personNode };
};


===== frontend/src/components/modals/RelationshipModal.tsx =====
import React, { useState } from 'react';

interface RelationshipModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: (label: string, isDirected: boolean) => void;
  sourceNodeName: string;
  targetNodeName: string;
  initialLabel?: string;
  initialIsDirected?: boolean;
}

const RelationshipModal: React.FC<RelationshipModalProps> = ({
  isOpen,
  onClose,
  onSubmit,
  sourceNodeName,
  targetNodeName,
  initialLabel = '',
  initialIsDirected = true,
}) => {
  const [label, setLabel] = useState(initialLabel);
  const [isDirected, setIsDirected] = useState(initialIsDirected);

  if (!isOpen) return null;

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSubmit(label, isDirected);
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-bg-secondary p-6 rounded-lg shadow-xl w-96">
        <h2 className="text-xl font-semibold text-accent-cyan mb-4">
          {initialLabel ? 'Editar Relación' : 'Nueva Relación'}
        </h2>
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <p className="text-text-secondary mb-2">
              {sourceNodeName} → {targetNodeName}
            </p>
            <input
              type="text"
              value={label}
              onChange={(e) => setLabel(e.target.value)}
              placeholder="Etiqueta de la relación"
              className="w-full p-2 bg-input-bg border border-node-border rounded text-text-primary"
              required
            />
          </div>
          <div className="mb-6">
            <label className="flex items-center text-text-secondary">
              <input
                type="checkbox"
                checked={isDirected}
                onChange={(e) => setIsDirected(e.target.checked)}
                className="mr-2"
              />
              Relación dirigida
            </label>
          </div>
          <div className="flex justify-end gap-2">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 text-text-secondary hover:text-text-primary transition-colors"
            >
              Cancelar
            </button>
            <button
              type="submit"
              className="px-4 py-2 bg-accent-cyan text-bg-primary rounded hover:bg-accent-cyan-darker transition-colors"
            >
              {initialLabel ? 'Actualizar' : 'Crear'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default RelationshipModal; 

===== frontend/src/components/modals/JsonDetailModal.tsx =====
// frontend/src/components/modals/JsonDetailModal.tsx
import React from 'react';
import { Node } from 'reactflow';
import { DemoNodeData } from '../../types/graph';

interface JsonDetailModalProps {
  isOpen: boolean;
  onClose: () => void;
  jsonData: any;
  title?: string;
}

const JsonDetailModal: React.FC<JsonDetailModalProps> = ({ isOpen, onClose, jsonData, title }) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center z-[1000] p-4 transition-opacity duration-300 ease-in-out">
      <div className="bg-bg-secondary p-5 rounded-xl shadow-2xl max-w-4xl w-full max-h-[90vh] flex flex-col border border-accent-cyan-darker">
        <div className="flex justify-between items-center mb-4 pb-3 border-b border-input-border">
          <h2 className="text-2xl font-bold text-accent-cyan">{title || "Detalles del Nodo"}</h2>
          <button
            onClick={onClose}
            className="text-text-secondary hover:text-accent-cyan text-3xl leading-none font-semibold outline-none focus:outline-none"
            aria-label="Cerrar modal"
          >
            &times;
          </button>
        </div>
        <div className="flex-grow overflow-hidden rounded">
          <pre className="h-full bg-input-bg text-text-secondary p-4 rounded overflow-auto text-xs scrollbar-thin scrollbar-thumb-accent-cyan-darker scrollbar-track-bg-secondary">
            {JSON.stringify(jsonData, null, 2)}
          </pre>
        </div>
        <button
          onClick={onClose}
          className="mt-5 bg-accent-cyan text-bg-primary py-2.5 px-6 rounded-md hover:bg-accent-cyan-darker focus:outline-none focus:ring-2 focus:ring-accent-cyan focus:ring-opacity-50 transition-colors font-medium self-end"
        >
          Cerrar
        </button>
      </div>
    </div>
  );
};

export default JsonDetailModal;


===== frontend/src/components/auth/LoginForm.tsx =====
// frontend/src/components/auth/LoginForm.tsx
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import '../../assets/css/styles.css';

interface LoginFormProps {
  onLoginSuccess: () => void; // This prop might become less critical if AppContent handles state
}

const LoginForm: React.FC<LoginFormProps> = ({ onLoginSuccess }) => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  // const [showPassword, setShowPassword] = useState(false); // Not used in current UI
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (loading) return;

    setError('');
    setLoading(true);

    try {
      const response = await fetch('http://192.168.0.4:8000/token', { // Ensure this URL is correct
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: new URLSearchParams({ username, password }).toString(),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({ detail: 'Login failed. Server error.' }));
        setError(errorData.detail || 'Login failed');
        setLoading(false);
        return;
      }

      const data = await response.json();
      localStorage.setItem('access_token', data.access_token);
      
      // Dispatch a custom event to notify AppContent
      window.dispatchEvent(new CustomEvent('loginSuccess'));
      
      onLoginSuccess(); // Call original prop if still needed for other purposes
      navigate('/graph', { replace: true }); // Use replace to avoid login page in history

    } catch (err) {
      console.error('Login fetch error:', err);
      setError('An error occurred. Please try again.');
    } finally {
      // setLoading(false); // setLoading will be handled by navigation and re-render
      // No, keep setLoading(false) in case of error before navigation
      if (!localStorage.getItem('access_token')) { // Only set loading false if not navigated
          setLoading(false);
      }
    }
  };

  return (
    <div className="login">
      <form className="login__form" onSubmit={handleSubmit}>
        <h1 className="login__title">Login</h1>
        {error && (
          <p className="text-sm text-red-500 mb-4 text-center bg-red-900 bg-opacity-50 p-2 rounded">
            {error}
          </p>
        )}
        <div className="login__content">
          <div className="login__box">
            <div className="login__box-input">
              <input
                type="text"
                className="login__input"
                placeholder=" "
                value={username}
                onChange={(e) => setUsername(e.target.value)}
                id="login-username"
                required
                autoComplete="username"
              />
              <label htmlFor="login-username" className="login__label">Username</label>
            </div>
          </div>
          <div className="login__box">
            <div className="login__box-input">
              <input
                type="password" // Was: type={showPassword ? "text" : "password"}
                className="login__input"
                placeholder=" "
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                id="login-password"
                required
                autoComplete="current-password"
              />
              <label htmlFor="login-password" className="login__label">Password</label>
            </div>
          </div>
        </div>
        <button type="submit" className="login__button" disabled={loading}>
          {loading ? 'Logging in...' : 'Login'}
        </button>
      </form>
    </div>
  );
};

export default LoginForm;

===== frontend/src/components/graph/PersonNode.tsx =====
import React, { memo, useRef } from 'react';
import { Handle, Position, NodeProps, useReactFlow } from 'reactflow';
import classnames from 'classnames';
import { User, UploadCloud, XCircle } from 'lucide-react';
import { DemoNodeData } from '../../types/graph';

const PersonNode: React.FC<NodeProps<DemoNodeData>> = ({ data, selected, id: nodeId }) => {
  const fileInputRef = useRef<HTMLInputElement>(null);
  const { deleteElements } = useReactFlow();

  const handleProfileAreaClick = () => {
    if (data.onImageUpload) {
      fileInputRef.current?.click();
    }
  };

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file && data.onImageUpload) {
      data.onImageUpload(nodeId, file);
    }
    if (fileInputRef.current) {
      fileInputRef.current.value = "";
    }
  };

  const handleDeleteNode = (event: React.MouseEvent) => {
    event.stopPropagation();
    if (window.confirm(`¿Seguro que quieres eliminar el nodo "${data.name}"? Esta acción no se puede deshacer.`)) {
      deleteElements({ nodes: [{ id: nodeId }] });
    }
  };

  return (
    <div
      className={classnames(
        'person-node w-48 p-3 rounded-lg flex flex-col items-center justify-center text-center relative transition-all duration-200',
        'bg-node-bg border-2'
      )}
      style={{ minHeight: '200px' }}
    >
      {/* Always render all handles for testing */}
      {/* TOP */}
      <Handle
        type="source"
        position={Position.Top}
        id={`${nodeId}-source-top`}
        className="handle-source"
      />
      <Handle
        type="target"
        position={Position.Top}
        id={`${nodeId}-target-top`}
        className="handle-target"
      />
      {/* LEFT */}
      <Handle
        type="target"
        position={Position.Left}
        id={`${nodeId}-target-left`}
        className="react-flow__handle handle-target"
      />
      {/* BOTTOM */}
      <Handle
        type="source"
        position={Position.Bottom}
        id={`${nodeId}-source-bottom`}
        className="react-flow__handle handle-source"
      />
      {/* RIGHT */}
      <Handle
        type="source"
        position={Position.Right}
        id={`${nodeId}-source-right`}
        className="react-flow__handle handle-source"
      />

      <div
        className="relative mb-3 group cursor-pointer"
        onClick={handleProfileAreaClick}
        title={data.onImageUpload ? "Cambiar imagen de perfil" : data.name}
      >
        {data.imageUrl ? (
          <img
            src={data.imageUrl}
            alt={data.name}
            className="w-20 h-20 rounded-full object-cover border-2 border-node-border group-hover:border-accent-cyan transition-all"
          />
        ) : (
          <div className="w-20 h-20 rounded-full bg-input-bg border-2 border-node-border flex items-center justify-center group-hover:border-accent-cyan transition-all">
            <User size={40} className="text-node-icon-color" />
          </div>
        )}
        {data.onImageUpload && (
          <div className="absolute inset-0 flex items-center justify-center bg-black bg-opacity-0 group-hover:bg-opacity-60 rounded-full transition-all duration-200">
            <UploadCloud
              size={28}
              className="text-white opacity-0 group-hover:opacity-90 transition-opacity duration-200"
            />
          </div>
        )}
        <input
          type="file"
          ref={fileInputRef}
          onChange={handleFileChange}
          accept="image/png, image/jpeg"
          className="hidden"
        />
      </div>

      <button
        onClick={handleDeleteNode}
        className="absolute top-1 right-1 p-0.5 bg-red-600/70 hover:bg-red-500 text-white rounded-full opacity-0 group-hover:opacity-100 transition-opacity duration-150 z-50"
        title={`Eliminar nodo ${data.name}`}
        aria-label={`Eliminar nodo ${data.name}`}
      >
        <XCircle size={16} />
      </button>

      <div className="node-content w-full flex-grow flex flex-col overflow-hidden items-center">
        <h3 className="text-base font-semibold text-node-text mb-0.5 flex-shrink-0 px-1 break-words w-full">
          {data.name}
        </h3>
        {data.title && (
          <p className="text-xs text-node-text-secondary mb-1 flex-shrink-0 px-1 break-words w-full">
            {data.title}
          </p>
        )}
      </div>
    </div>
  );
};

export default memo(PersonNode);

===== frontend/src/components/graph/JsonUploadButton.tsx =====
import React, { useRef } from 'react';
import { UploadCloud } from 'lucide-react';

interface JsonUploadButtonProps {
  onJsonUploaded: (jsonData: any, fileName?: string) => void; // Añadir fileName opcional
}

const JsonUploadButton: React.FC<JsonUploadButtonProps> = ({ onJsonUploaded }) => {
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        try {
          const json = JSON.parse(e.target?.result as string);
          onJsonUploaded(json, file.name); // Pasar file.name
        } catch (error) {
          console.error("Error parsing JSON:", error);
          alert("Failed to parse JSON file. Please ensure it's valid JSON.");
        }
      };
      reader.readAsText(file);
      if (fileInputRef.current) {
        fileInputRef.current.value = "";
      }
    }
  };

  const handleButtonClick = () => {
    fileInputRef.current?.click();
  };

  const handleDrop = (event: React.DragEvent<HTMLDivElement>) => {
    event.preventDefault();
    event.stopPropagation();
    event.currentTarget.classList.remove('border-accent-cyan', 'bg-gray-700');
    const file = event.dataTransfer.files?.[0];
    if (file && file.type === "application/json") {
        const reader = new FileReader();
        reader.onload = (e) => {
            try {
                const json = JSON.parse(e.target?.result as string);
                onJsonUploaded(json, file.name); // Pasar file.name
            } catch (error) {
                console.error("Error parsing JSON:", error);
                alert("Failed to parse JSON file. Please ensure it's valid JSON.");
            }
        };
        reader.readAsText(file);
    } else if (file) {
        alert("Please drop a valid JSON file.");
    }
  };

  const handleDragOver = (event: React.DragEvent<HTMLDivElement>) => {
    event.preventDefault();
    event.stopPropagation();
    event.currentTarget.classList.add('border-accent-cyan', 'bg-gray-700');
  };

  const handleDragLeave = (event: React.DragEvent<HTMLDivElement>) => {
    event.preventDefault();
    event.stopPropagation();
    event.currentTarget.classList.remove('border-accent-cyan', 'bg-gray-700');
  };

  return (
    <div
      onDrop={handleDrop}
      onDragOver={handleDragOver}
      onDragLeave={handleDragLeave}
      className="border-2 border-dashed border-gray-600 rounded-lg p-8 text-center cursor-pointer hover:border-accent-cyan transition-colors duration-200"
      onClick={handleButtonClick}
    >
      <input
        type="file"
        accept=".json"
        ref={fileInputRef}
        onChange={handleFileChange}
        className="hidden"
      />
      <UploadCloud size={48} className="mx-auto mb-4 text-gray-500" />
      <p className="text-text-secondary">
        Drag & drop your JSON file here, or{' '}
        <span className="text-accent-cyan font-semibold">click to browse</span>.
      </p>
    </div>
  );
};

export default JsonUploadButton;

===== frontend/src/components/graph/GraphCanvas.tsx =====
import React from 'react';

const GraphCanvas: React.FC = () => {
  console.log("GraphCanvas component is rendering (ultra-simple version)");

  return (
    <div
      style={{
        width: '100%',
        height: '100%', // asegura que este div intente llenar a su padre
        backgroundColor: 'rgba(0, 255, 0, 0.3)', // verde brillante, semi-transparente
        border: '5px dashed hotpink', // borde rosa brillante y discontinuo
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        color: 'white', // color de texto blanco para contraste
        fontSize: '2rem',
        padding: '20px',
      }}
      className="debug-border-canvas" // si tienes esta clase para depurar
    >
      GraphCanvas Test - ¿Puedes ver esto?
    </div>
  );
};

export default GraphCanvas;


===== frontend/src/components/graph/CustomConnectionLine.tsx =====
import React from 'react';
import { getSmoothStepPath, ConnectionLineComponentProps } from 'reactflow';

const CustomConnectionLine: React.FC<ConnectionLineComponentProps> = ({
  fromX,
  fromY,
  toX,
  toY,
  connectionLineStyle,
}) => {
  const [edgePath] = getSmoothStepPath({
    sourceX: fromX,
    sourceY: fromY,
    targetX: toX,
    targetY: toY,
  });

  return (
    <g>
      <path
        style={{
          stroke: 'var(--accent-cyan)',
          strokeWidth: 2.5,
          ...connectionLineStyle,
        }}
        fill="none"
        d={edgePath}
      />
      <circle 
        cx={toX} 
        cy={toY} 
        r={4} 
        fill="var(--accent-cyan)" 
        stroke="var(--bg-secondary)" 
        strokeWidth={1.5} 
      />
    </g>
  );
};

export default CustomConnectionLine; 

===== frontend/src/components/graph/CompanyNode.tsx =====
import React, { memo } from 'react';
import { Handle, Position, NodeProps } from 'reactflow';
import classnames from 'classnames';
import { Building2, Upload } from 'lucide-react';

interface CompanyNodeData {
  name: string;
  location?: string;
  logoUrl?: string;
  status?: 'normal' | 'warning' | 'alert' | 'delayed';
  onImageUpload?: (nodeId: string, file: File) => void;
  isHighlighted?: boolean;
  details?: any;
}

const CompanyNode: React.FC<NodeProps<CompanyNodeData>> = ({ data, selected, id }) => {
  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file && data.onImageUpload) {
      data.onImageUpload(id, file);
    }
  };

  const isSelectedOrHighlighted = selected || data.isHighlighted;

  return (
    <div
      className={classnames(
        'company-node w-48 p-3 rounded-lg flex flex-col items-center justify-center text-center relative transition-all duration-200',
        'bg-node-bg border-2', // Usar variables CSS
        {
          'border-node-border-selected shadow-node-selected': isSelectedOrHighlighted && data.status !== 'alert' && data.status !== 'warning',
          'border-node-border': !isSelectedOrHighlighted && data.status !== 'alert' && data.status !== 'warning',
          'node-alert-style': data.status === 'alert',
          'node-warning-style': data.status === 'warning',
        }
      )}
    >
      <Handle type="target" position={Position.Left} className="react-flow__handle" />
      
      <div className="relative mb-2">
        {data.logoUrl ? (
          <img
            src={data.logoUrl}
            alt={data.name}
            className="w-20 h-20 rounded-lg object-cover border-2 border-node-border"
          />
        ) : (
          <div className="w-20 h-20 rounded-lg bg-node-bg border-2 border-node-border flex items-center justify-center">
            <Building2 size={40} className="text-node-icon-color" />
          </div>
        )}
        {data.onImageUpload && (
          <label className="absolute bottom-0 right-0 bg-node-bg rounded-full p-1 cursor-pointer hover:bg-node-bg-hover transition-colors">
            <Upload size={14} className="text-node-icon-color" />
            <input
              type="file"
              accept="image/*"
              className="hidden"
              onChange={handleImageUpload}
            />
          </label>
        )}
      </div>

      <div className="node-content">
        <h3 className="text-sm font-semibold text-node-text mb-1">{data.name}</h3>
        {data.location && (
          <p className="text-xs text-node-text-secondary mb-1">{data.location}</p>
        )}
        {data.details && (
          <div className="text-xs text-node-text-secondary mt-1">
            {Object.entries(data.details).map(([key, value]) => (
              <div key={key} className="detail-item">
                <span className="detail-label">{key}:</span>{' '}
                <span className="detail-value">
                  {typeof value === 'object' ? JSON.stringify(value) : String(value)}
                </span>
              </div>
            ))}
          </div>
        )}
      </div>

      <Handle type="source" position={Position.Right} className="react-flow__handle" />
    </div>
  );
};

export default memo(CompanyNode);

===== frontend/src/components/FileUploader.js =====
import React from 'react';

function FileUploader() {
  const handleFileUpload = (event) => {
    const file = event.target.files[0];
    console.log(file);
  };

  return (
    <div>
      <input type="file" onChange={handleFileUpload} />
    </div>
  );
}

export default FileUploader;


===== frontend/src/components/GraphDisplay.js =====
import React from 'react';
import { Network } from 'vis-network';

function GraphDisplay() {
  React.useEffect(() => {
    const container = document.getElementById('graph');
    const data = {
      nodes: [
        { id: 1, label: 'Node 1' },
        { id: 2, label: 'Node 2' }
      ],
      edges: [
        { from: 1, to: 2 }
      ]
    };
    const options = {};
    new Network(container, data, options);
  }, []);

  return <div id="graph" style={{ height: '500px' }}></div>;
}

export default GraphDisplay;


===== frontend/src/components/layout/DropdownMenu.tsx =====
import React, { useState, useRef, useEffect, useCallback } from 'react';
import { LucideIcon, ChevronRight } from 'lucide-react';

export interface MenuItem {
  label?: string;  // Opcional para separadores
  action?: () => void;
  icon?: LucideIcon | React.ComponentType<{ size?: number; className?: string }>;
  disabled?: boolean;
  isSeparator?: boolean;
  shortcut?: string;
  submenu?: MenuItem[];
}

interface DropdownMenuProps {
  triggerLabel: string;
  triggerIcon?: LucideIcon | React.ComponentType<{ size?: number; className?: string }>;
  items: MenuItem[];
  className?: string;
  align?: 'left' | 'right';
}

const DropdownMenu: React.FC<DropdownMenuProps> = ({
  triggerLabel,
  triggerIcon: TriggerIcon,
  items,
  className = '',
  align = 'left',
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const [activeSubmenu, setActiveSubmenu] = useState<number | null>(null);
  const menuRef = useRef<HTMLDivElement>(null);
  const submenuTimer = useRef<NodeJS.Timeout>();
  const [position, setPosition] = useState({ top: 0, left: 0 });
  const triggerRef = useRef<HTMLButtonElement>(null);

  // Cerrar menú al hacer clic fuera
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {
        setIsOpen(false);
        setActiveSubmenu(null);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  // Manejar teclas para navegación
  useEffect(() => {
    if (!isOpen) return;

    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        setIsOpen(false);
        setActiveSubmenu(null);
      } else if (e.key === 'ArrowDown' || e.key === 'ArrowUp') {
        e.preventDefault();
        // Navegación entre ítems
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, [isOpen]);

  const handleTriggerClick = (e: React.MouseEvent) => {
    e.stopPropagation();
    if (triggerRef.current) {
      const rect = triggerRef.current.getBoundingClientRect();
      setPosition({
        top: rect.bottom + window.scrollY,
        left: rect.left + window.scrollX,
      });
    }
    setIsOpen(!isOpen);
    setActiveSubmenu(null);
  };

  const handleItemClick = (item: MenuItem, e: React.MouseEvent) => {
    e.stopPropagation();
    
    if (item.disabled) return;
    
    if (item.submenu) {
      // No hacer nada, manejado por hover
      return;
    }
    
    if (item.action) {
      item.action();
      setIsOpen(false);
      setActiveSubmenu(null);
    }
  };

  const handleItemMouseEnter = (index: number, hasSubmenu: boolean) => {
    if (submenuTimer.current) {
      clearTimeout(submenuTimer.current);
    }
    
    if (hasSubmenu) {
      submenuTimer.current = setTimeout(() => {
        setActiveSubmenu(index);
      }, 200);
    } else {
      setActiveSubmenu(null);
    }
  };

  const handleSubmenuMouseLeave = () => {
    if (submenuTimer.current) {
      clearTimeout(submenuTimer.current);
    }
    submenuTimer.current = setTimeout(() => {
      setActiveSubmenu(null);
    }, 200);
  };

  const renderMenuItem = (item: MenuItem, index: number) => {
    if (item.isSeparator) {
      return (
        <div 
          key={`separator-${index}`} 
          className="h-px my-1 bg-gray-200"
          role="separator"
        />
      );
    }

    const hasSubmenu = Boolean(item.submenu && item.submenu.length > 0);
    const isActive = activeSubmenu === index;

    return (
      <div 
        key={item.label}
        className="relative"
        onMouseEnter={() => handleItemMouseEnter(index, hasSubmenu)}
        onMouseLeave={() => {
          if (submenuTimer.current) clearTimeout(submenuTimer.current);
        }}
      >
        <button
          className={`w-full px-4 py-2 text-sm text-left flex items-center justify-between gap-3 whitespace-nowrap
            ${item.disabled 
              ? 'text-gray-400 cursor-not-allowed' 
              : 'text-gray-800 hover:bg-blue-50 hover:text-blue-700'}
            ${isActive ? 'bg-blue-50 text-blue-700' : ''}
          `}
          onClick={(e) => handleItemClick(item, e)}
          disabled={item.disabled}
          role="menuitem"
          aria-haspopup={hasSubmenu ? 'true' : undefined}
          aria-expanded={isActive ? 'true' : undefined}
        >
          <div className="flex items-center gap-3">
            {item.icon && (
              <span className="text-gray-500 w-5 flex justify-center">
                <item.icon size={16} className={item.disabled ? 'opacity-50' : ''} />
              </span>
            )}
            <span>{item.label}</span>
          </div>
          <div className="flex items-center">
            {item.shortcut && (
              <span className="text-xs text-gray-500 ml-4">
                {item.shortcut}
              </span>
            )}
            {hasSubmenu && <ChevronRight size={16} className="ml-2 text-gray-500" />}
          </div>
        </button>

        {hasSubmenu && isActive && item.submenu && (
          <div 
            className={`absolute ${align === 'right' ? 'right-full' : 'left-full'} top-0 mt-0 ml-1 bg-white rounded-md shadow-lg border border-gray-200 py-1 z-50 min-w-[200px]`}
            onMouseEnter={() => {
              if (submenuTimer.current) clearTimeout(submenuTimer.current);
            }}
            onMouseLeave={handleSubmenuMouseLeave}
          >
            {item.submenu.map((subItem, subIndex) => (
              <React.Fragment key={`sub-${index}-${subIndex}`}>
                {subItem.isSeparator ? (
                  <div className="h-px my-1 bg-gray-200" role="separator" />
                ) : (
                  <button
                    className={`w-full px-4 py-2 text-sm text-left flex items-center justify-between gap-3 whitespace-nowrap
                      ${subItem.disabled 
                        ? 'text-gray-400 cursor-not-allowed' 
                        : 'text-gray-800 hover:bg-blue-50 hover:text-blue-700'}
                    `}
                    onClick={(e) => {
                      e.stopPropagation();
                      if (!subItem.disabled && subItem.action) {
                        subItem.action();
                        setIsOpen(false);
                        setActiveSubmenu(null);
                      }
                    }}
                    disabled={subItem.disabled}
                    role="menuitem"
                  >
                    <div className="flex items-center gap-3">
                      {subItem.icon && (
                        <span className="text-gray-500 w-5 flex justify-center">
                          <subItem.icon size={16} className={subItem.disabled ? 'opacity-50' : ''} />
                        </span>
                      )}
                      <span>{subItem.label}</span>
                    </div>
                    {subItem.shortcut && (
                      <span className="text-xs text-gray-500">
                        {subItem.shortcut}
                      </span>
                    )}
                  </button>
                )}
              </React.Fragment>
            ))}
          </div>
        )}
      </div>
    );
  };

  return (
    <div className={`relative inline-block text-left ${className}`} ref={menuRef}>
      <button
        ref={triggerRef}
        className={`flex items-center gap-1 px-3 h-9 text-sm font-medium rounded-md transition-colors
          hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50
          ${isOpen ? 'bg-gray-100 text-gray-900' : 'text-gray-700'}`}
        onClick={handleTriggerClick}
        aria-expanded={isOpen}
        aria-haspopup="menu"
        aria-controls="dropdown-menu"
      >
        {TriggerIcon && (
          <span className="text-gray-600">
            <TriggerIcon size={16} className={isOpen ? 'text-blue-600' : ''} />
          </span>
        )}
        <span className={isOpen ? 'text-blue-600' : ''}>{triggerLabel}</span>
      </button>

      {isOpen && (
        <div 
          className="fixed bg-white rounded-md shadow-lg border border-gray-200 py-1 z-50 min-w-[240px]"
          style={{
            top: `${position.top}px`,
            left: `${position.left}px`,
          }}
          role="menu"
          aria-orientation="vertical"
          aria-labelledby="menu-button"
          tabIndex={-1}
        >
          {items.map((item, index) => renderMenuItem(item, index))}
        </div>
      )}
    </div>
  );
};

export default DropdownMenu;


===== frontend/src/components/layout/TopMenuBar.tsx =====
import React, { useState } from 'react';
import DropdownMenu, { MenuItem } from './DropdownMenu';
import { 
  FileText, Edit3, Eye, HelpCircle, UploadCloud, Replace, Layers, Download, 
  ZoomIn, ZoomOut, Maximize2, Info, Plus, FolderOpen, Save, Print, Share2, 
  Mail, History, Clock, Settings, LifeBuoy, AlertCircle, MessageSquare, 
  Trash2, Copy, Scissors, FileUp, FileDown, FileInput, FileOutput, FileSearch, 
  FileCheck, FileX, File, FileText as FileTextIcon, FileCode, FileArchive, 
  FileImage, FileVideo, FileAudio, FileSpreadsheet, FileJson, FileDigit, FileDiff, 
  FileDigit as FileDigitIcon, FileMinus, FilePlus, FileSearch as FileSearchIcon, 
  FileSymlink, FileType, FileType2, FileUp as FileUpIcon, FileVideo as FileVideoIcon, 
  FileVolume2, FileWarning, FileX as FileXIcon, FileCheck as FileCheckIcon
} from 'lucide-react';

interface TopMenuBarProps {
  onUploadClick: () => void;
  onOverwrite: () => void;
  onMerge: () => void;
  onExportPDF: () => void;
  onZoomIn?: () => void;
  onZoomOut?: () => void;
  onFitView?: () => void;
  isFileLoaded: boolean;
  isGraphEmpty: boolean;
  fileName?: string;
}

const TopMenuBar: React.FC<TopMenuBarProps> = ({
  onUploadClick,
  onOverwrite,
  onMerge,
  onExportPDF,
  onZoomIn,
  onZoomOut,
  onFitView,
  isFileLoaded,
  isGraphEmpty,
  fileName
}) => {
  // Estado para el modal de confirmación
  const [confirmAction, setConfirmAction] = useState<null | (() => void)>(null);
  const [confirmMessage, setConfirmMessage] = useState<string>("");

  // Función para mostrar el modal
  const handleConfirm = (message: string, action: () => void) => {
    setConfirmMessage(message);
    setConfirmAction(() => action);
  };

  const fileMenuItems: MenuItem[] = [
    { 
      label: 'Nuevo', 
      icon: Plus,
      disabled: false,
      shortcut: 'Ctrl+N',
      submenu: [
        { label: 'Archivo', icon: File, shortcut: 'Ctrl+N' },
        { label: 'Carpeta', icon: FolderOpen },
        { isSeparator: true },
        { label: 'Documento', icon: FileText },
        { label: 'Hoja de cálculo', icon: FileSpreadsheet },
        { label: 'Presentación', icon: FilePresentation },
      ]
    },
    { 
      label: 'Abrir', 
      icon: FolderOpen,
      action: onUploadClick,
      shortcut: 'Ctrl+O'
    },
    { 
      label: 'Guardar', 
      icon: Save,
      disabled: true,
      shortcut: 'Ctrl+S'
    },
    { 
      label: 'Imprimir', 
      icon: Print,
      disabled: true,
      shortcut: 'Ctrl+P'
    },
    { isSeparator: true },
    { 
      label: 'Compartir', 
      icon: Share2,
      disabled: true,
      submenu: [
        { label: 'Compartir con personas', icon: UserPlus },
        { label: 'Obtener enlace', icon: Link },
        { isSeparator: true },
        { label: 'Correo electrónico', icon: Mail },
        { label: 'Copiar enlace', icon: Copy },
      ]
    },
    { isSeparator: true },
    { 
      label: 'Cargar JSON...', 
      action: onUploadClick, 
      icon: UploadCloud,
      disabled: false
    },
    { 
      label: `Sobrescribir con ${fileName || 'archivo'}`, 
      action: () => handleConfirm(
        `¿Seguro que deseas SOBRESCRIBIR con ${fileName || 'el archivo'}? Esta acción no se puede deshacer.`,
        onOverwrite
      ),
      icon: Replace, 
      disabled: !isFileLoaded 
    },
    { 
      label: `Agregar desde ${fileName || 'archivo'}`, 
      action: () => handleConfirm(
        `¿Seguro que deseas AGREGAR desde ${fileName || 'el archivo'}`,
        onMerge
      ),
      icon: Layers, 
      disabled: !isFileLoaded 
    },
    { isSeparator: true },
    { 
      label: 'Exportar como PDF...', 
      action: onExportPDF, 
      icon: Download, 
      disabled: isGraphEmpty,
      shortcut: 'Ctrl+E'
    },
    { isSeparator: true },
    { 
      label: 'Historial de versiones', 
      icon: History,
      disabled: true,
      submenu: [
        { label: 'Ver historial de versiones', icon: History },
        { label: 'Ver detalles de actividad', icon: Activity },
      ]
    },
    { 
      label: 'Mover a la papelera', 
      icon: Trash2,
      disabled: true,
      shortcut: 'Del'
    },
    { isSeparator: true },
    { 
      label: 'Configuración', 
      icon: Settings,
      disabled: true
    },
    { 
      label: 'Cerrar sesión', 
      icon: LogOut,
      disabled: false
    }
  ];

  const editMenuItems: MenuItem[] = [
    { 
      label: 'Deshacer', 
      disabled: true,
      icon: Undo2,
      shortcut: 'Ctrl+Z'
    },
    { 
      label: 'Rehacer', 
      disabled: true,
      icon: Redo2,
      shortcut: 'Ctrl+Shift+Z'
    },
    { isSeparator: true },
    { 
      label: 'Cortar', 
      disabled: isGraphEmpty,
      icon: Scissors,
      shortcut: 'Ctrl+X'
    },
    { 
      label: 'Copiar', 
      disabled: isGraphEmpty,
      icon: Copy,
      shortcut: 'Ctrl+C'
    },
    { 
      label: 'Pegar', 
      disabled: true,
      icon: ClipboardPaste,
      shortcut: 'Ctrl+V'
    },
    { 
      label: 'Seleccionar todo', 
      disabled: isGraphEmpty,
      icon: Select,
      shortcut: 'Ctrl+A'
    },
    { isSeparator: true },
    { 
      label: 'Buscar', 
      disabled: false,
      icon: Search,
      shortcut: 'Ctrl+F'
    },
    { 
      label: 'Buscar y reemplazar', 
      disabled: false,
      icon: Replace,
      shortcut: 'Ctrl+H'
    },
    { isSeparator: true },
    { 
      label: 'Eliminar selección', 
      disabled: isGraphEmpty,
      icon: Trash2,
      shortcut: 'Supr'
    },
  ];

  const viewMenuItems: MenuItem[] = [
    { 
      label: 'Vista previa', 
      icon: Eye,
      disabled: isGraphEmpty,
      shortcut: 'Ctrl+Alt+P'
    },
    { isSeparator: true },
    { 
      label: 'Ajustar Vista', 
      action: onFitView,
      icon: Maximize2,
      disabled: isGraphEmpty,
      shortcut: 'Ctrl+0'
    },
    { 
      label: 'Acercar', 
      action: onZoomIn,
      icon: ZoomIn,
      disabled: isGraphEmpty,
      shortcut: 'Ctrl++'
    },
    { 
      label: 'Alejar', 
      action: onZoomOut,
      icon: ZoomOut,
      disabled: isGraphEmpty,
      shortcut: 'Ctrl+-'
    },
    { isSeparator: true },
    { 
      label: 'Modo oscuro', 
      icon: Moon,
      disabled: true
    },
    { 
      label: 'Pantalla completa', 
      icon: Maximize2,
      disabled: true,
      shortcut: 'F11'
    },
  ];

  const helpMenuItems: (MenuItem | { isSeparator: true })[] = [
    { 
      label: 'Ayuda', 
      icon: HelpCircle,
      disabled: false,
      submenu: [
        { label: 'Centro de ayuda', icon: LifeBuoy, shortcut: 'F1' },
        { label: 'Ver actualizaciones', icon: DownloadCloud },
        { isSeparator: true },
        { label: 'Enviar comentarios', icon: MessageCircle },
        { label: 'Reportar un problema', icon: AlertCircle },
        { isSeparator: true },
        { label: 'Tutoriales', icon: PlayCircle },
        { label: 'Comunidad', icon: Users },
      ]
    },
    { 
      label: 'Acerca de Nodex', 
      icon: Info,
      disabled: false
    },
    { isSeparator: true },
    { 
      label: 'Documentación', 
      icon: FileText,
      disabled: false,
      shortcut: 'F1'
    },
    { isSeparator: true },
    { 
      label: 'Atajos de teclado', 
      icon: Keyboard,
      disabled: true
    },
  ];

  return (
    <>
      <div className="flex items-center w-full px-4 bg-white border-b border-gray-200 h-10">
        {/* Logo y nombre de la aplicación */}
        <div className="flex items-center mr-6">
          <div className="text-blue-600 font-semibold text-lg">Nodex</div>
        </div>
        
        {/* Menús principales */}
        <div className="flex items-center h-full">
          <DropdownMenu 
            triggerLabel="Archivo" 
            items={fileMenuItems} 
            triggerIcon={FileText}
            className="h-full flex items-center hover:bg-gray-100 px-3"
          />
          <DropdownMenu 
            triggerLabel="Editar" 
            items={editMenuItems} 
            triggerIcon={Edit3}
            className="h-full flex items-center hover:bg-gray-100 px-3"
          />
          <DropdownMenu 
            triggerLabel="Vista" 
            items={viewMenuItems} 
            triggerIcon={Eye}
            className="h-full flex items-center hover:bg-gray-100 px-3"
          />
          
          {/* Espacio adicional para más menús si es necesario */}
        </div>
        
        <div className="flex-grow" />
        
        {/* Menús del lado derecho */}
        <div className="flex items-center h-full">
          <button 
            className="h-full flex items-center px-3 text-gray-600 hover:bg-gray-100"
            title="Configuración"
          >
            <Settings size={18} />
          </button>
          
          <DropdownMenu 
            triggerLabel="Ayuda" 
            items={helpMenuItems} 
            triggerIcon={HelpCircle}
            className="h-full flex items-center hover:bg-gray-100 px-3"
            align="right"
          />
          
          <div className="ml-4 w-8 h-8 rounded-full bg-blue-100 flex items-center justify-center text-blue-600 font-medium">
U
          </div>
        </div>
      </div>
      {/* Modal de confirmación */}
      {confirmAction && (
        <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-30 z-50">
          <div className="bg-white rounded-lg shadow-lg p-6 w-80">
            <div className="mb-4 text-gray-900">{confirmMessage}</div>
            <div className="flex justify-end gap-2">
              <button
                className="px-4 py-1 rounded bg-gray-200 hover:bg-gray-300"
                onClick={() => setConfirmAction(null)}
              >
                Cancelar
              </button>
              <button
                className="px-4 py-1 rounded bg-blue-600 text-white hover:bg-blue-700"
                onClick={() => {
                  confirmAction();
                  setConfirmAction(null);
                }}
              >
                Confirmar
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
};

export default TopMenuBar;


===== frontend/src/components/AnimatedBackground.js =====
import React, { useEffect, useRef } from 'react';

const AnimatedBackground = () => {
  const canvasRef = useRef(null);

  useEffect(() => {
    const can = canvasRef.current;
    if (!can) return;

    const ctx = can.getContext('2d');
    let animationFrameId;
    let pulseTimeoutId;

    // Get theme colors from CSS variables
    const computedStyle = getComputedStyle(document.documentElement);
    const bgColorPrimary = computedStyle.getPropertyValue('--body-color').trim() || '#05080D';
    const accentHue = parseInt(computedStyle.getPropertyValue('--hue').trim(), 10) || 200;

    // Convert bgColorPrimary to RGB
    let bgR = 5, bgG = 8, bgB = 13;
    if (bgColorPrimary.startsWith('#')) {
      const hex = bgColorPrimary.substring(1);
      if (hex.length === 3) {
        bgR = parseInt(hex[0] + hex[0], 16);
        bgG = parseInt(hex[1] + hex[1], 16);
        bgB = parseInt(hex[2] + hex[2], 16);
      } else if (hex.length === 6) {
        bgR = parseInt(hex.substring(0, 2), 16);
        bgG = parseInt(hex.substring(2, 4), 16);
        bgB = parseInt(hex.substring(4, 6), 16);
      }
    }
    const trailColor = `rgba(${bgR}, ${bgG}, ${bgB}, 0.15)`;
    const particleTrailColor = `rgba(${bgR}, ${bgG}, ${bgB}, 0.07)`;

    can.width = window.innerWidth;
    can.height = window.innerHeight;

    const particles = [];
    const maxParticles = 60;
    const connectionDistance = 150;
    const particleBaseRadius = 1.5;

    function drawBackgroundEffect() {
      ctx.fillStyle = trailColor;
      ctx.fillRect(0, 0, can.width, can.height);
      ctx.fillStyle = particleTrailColor;
      ctx.fillRect(0, 0, can.width, can.height);
    }

    function Particle(x, y, speed, color, radius) {
      this.x = x;
      this.y = y;
      this.vx = speed.x;
      this.vy = speed.y;
      this.color = color;
      this.radius = radius;
      this.initialLife = Math.random() * 150 + 150;
      this.life = this.initialLife;
      this.connections = 0;
      this.maxConnections = 3;

      this.draw = function () {
        const currentRadius = this.radius * (this.life / this.initialLife);
        if (currentRadius < 0.5) return;
        ctx.beginPath();
        ctx.arc(this.x, this.y, currentRadius, 0, Math.PI * 2, false);
        ctx.shadowBlur = 5;
        ctx.shadowColor = this.color;
        ctx.fillStyle = this.color;
        ctx.fill();
        ctx.shadowBlur = 0;
      };

      this.update = function () {
        this.x += this.vx;
        this.y += this.vy;
        this.life -= 0.5;
        // Soft bounce
        if (this.x + this.radius > can.width || this.x - this.radius < 0) {
          this.vx *= -0.7;
          this.x = Math.max(this.radius, Math.min(can.width - this.radius, this.x));
        }
        if (this.y + this.radius > can.height || this.y - this.radius < 0) {
          this.vy *= -0.7;
          this.y = Math.max(this.radius, Math.min(can.height - this.radius, this.y));
        }
        // Gentle random direction change
        if (Math.random() < 0.02) {
          const angleChange = (Math.random() - 0.5) * (Math.PI / 4);
          const currentAngle = Math.atan2(this.vy, this.vx);
          const magnitude = Math.sqrt(this.vx ** 2 + this.vy ** 2) * (0.8 + Math.random() * 0.4);
          this.vx = Math.cos(currentAngle + angleChange) * magnitude;
          this.vy = Math.sin(currentAngle + angleChange) * magnitude;
        }
        // Limit speed
        const maxSpeed = 1.5;
        const currentSpeed = Math.sqrt(this.vx ** 2 + this.vy ** 2);
        if (currentSpeed > maxSpeed) {
          this.vx = (this.vx / currentSpeed) * maxSpeed;
          this.vy = (this.vy / currentSpeed) * maxSpeed;
        }
      };
    }

    function connectParticles() {
      particles.forEach(p => p.connections = 0);
      for (let i = 0; i < particles.length; i++) {
        if (particles[i].connections >= particles[i].maxConnections) continue;
        for (let j = i + 1; j < particles.length; j++) {
          if (particles[j].connections >= particles[j].maxConnections) continue;
          const dx = particles[i].x - particles[j].x;
          const dy = particles[i].y - particles[j].y;
          const distance = Math.sqrt(dx * dx + dy * dy);
          if (distance < connectionDistance) {
            const opacity = Math.max(0, 1 - (distance / connectionDistance) * 0.8);
            ctx.beginPath();
            const connectionHue = accentHue;
            const connectionLightness = 60 + Math.random() * 10;
            ctx.strokeStyle = `hsla(${connectionHue}, 100%, ${connectionLightness}%, ${opacity * 0.4})`;
            ctx.lineWidth = 0.6;
            ctx.moveTo(particles[i].x, particles[i].y);
            ctx.lineTo(particles[j].x, particles[j].y);
            ctx.stroke();
            particles[i].connections++;
            particles[j].connections++;
            if (particles[i].connections >= particles[i].maxConnections) break;
          }
        }
      }
    }

    const particleBaseSpeed = 0.5;
    const pulsePeriod = 1200;
    const particlesPerPulse = 2;

    function pulse() {
      if (particles.length < maxParticles) {
        const numToSpawn = Math.min(particlesPerPulse, maxParticles - particles.length);
        for (let i = 0; i < numToSpawn; i++) {
          // Spawn from edges or random
          const edge = Math.floor(Math.random() * 4);
          let startX, startY;
          switch(edge) {
            case 0: // Top
              startX = Math.random() * can.width;
              startY = 0 - particleBaseRadius * 5;
              break;
            case 1: // Right
              startX = can.width + particleBaseRadius * 5;
              startY = Math.random() * can.height;
              break;
            case 2: // Bottom
              startX = Math.random() * can.width;
              startY = can.height + particleBaseRadius * 5;
              break;
            case 3: // Left
              startX = 0 - particleBaseRadius * 5;
              startY = Math.random() * can.height;
              break;
            default:
              startX = can.width / 2;
              startY = can.height / 2;
          }
          const angleToCenter = Math.atan2(can.height / 2 - startY, can.width / 2 - startX);
          const speedMagnitude = particleBaseSpeed * (0.7 + Math.random() * 0.6);
          const currentHue = accentHue + (Math.random() * 30 - 15);
          const color = `hsl(${currentHue}, 100%, 60%)`;
          particles.push(
            new Particle(
              startX,
              startY,
              {
                x: Math.cos(angleToCenter) * speedMagnitude + (Math.random() - 0.5) * 0.2,
                y: Math.sin(angleToCenter) * speedMagnitude + (Math.random() - 0.5) * 0.2,
              },
              color,
              particleBaseRadius + Math.random() * 2
            )
          );
        }
      }
      pulseTimeoutId = setTimeout(pulse, pulsePeriod + Math.random() * 800);
    }

    function gameMove() {
      drawBackgroundEffect();
      for (let i = particles.length - 1; i >= 0; i--) {
        particles[i].update();
        particles[i].draw();
        if (particles[i].life <= 0) {
          particles.splice(i, 1);
        }
      }
      connectParticles();
      animationFrameId = requestAnimationFrame(gameMove);
    }

    const handleResize = () => {
      can.width = window.innerWidth;
      can.height = window.innerHeight;
    };

    window.addEventListener('resize', handleResize);

    // Inicializar con algunas partículas
    for(let k=0; k < Math.min(15, maxParticles); k++) {
      const angle = Math.random() * Math.PI * 2;
      const currentHue = accentHue + (Math.random() * 40 - 20);
      const color = `hsl(${currentHue}, 100%, 60%)`;
      particles.push(
        new Particle(
          can.width / 2 + (Math.random() - 0.5) * can.width * 0.5,
          can.height / 2 + (Math.random() - 0.5) * can.height * 0.5,
          {
            x: (Math.random() - 0.5) * particleBaseSpeed,
            y: (Math.random() - 0.5) * particleBaseSpeed,
          },
          color,
          particleBaseRadius + Math.random() * 1.5
        )
      );
    }

    pulse();
    gameMove();

    return () => {
      window.removeEventListener('resize', handleResize);
      cancelAnimationFrame(animationFrameId);
      clearTimeout(pulseTimeoutId);
      particles.length = 0;
    };
  }, []);

  return <canvas id="loginBackgroundCanvas" ref={canvasRef} />;
};

export default AnimatedBackground;


===== frontend/src/components/LoginForm.js =====
import React, { useState } from 'react';
import "../assets/css/styles.css";

function LoginForm() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');

  const handleSubmit = (event) => {
    event.preventDefault();
    console.log({ username, password });
  };

  return (
    <div className="login">
      <form className="login__form" onSubmit={handleSubmit}>
        <h1 className="login__title">Login</h1>
        <div className="login__content">
          <div className="login__box">
            <i className="login__icon ri-user-line"></i>
            <input
              type="text"
              className="login__input"
              placeholder=" "
              value={username}
              onChange={(e) => setUsername(e.target.value)}
            />
            <label className="login__label">Username</label>
          </div>
          <div className="login__box">
            <i className="login__icon ri-lock-line"></i>
            <input
              type="password"
              className="login__input"
              placeholder=" "
              value={password}
              onChange={(e) => setPassword(e.target.value)}
            />
            <label className="login__label">Password</label>
          </div>
        </div>
        <button type="submit" className="login__button">Login</button>
        <p className="login__register">
          Don't have an account? <a href="#">Register</a>
        </p>
      </form>
    </div>
  );
}

export default LoginForm;


===== frontend/src/components/NodeDetailPanel.js =====
import React from 'react';

function NodeDetailPanel() {
  return (
    <div>
      <h2>Node Details</h2>
      <p>Select a node to see details here.</p>
    </div>
  );
}

export default NodeDetailPanel;


===== frontend/src/data/defaultGraphData.ts =====
import { Node, Edge, MarkerType } from 'reactflow';
import { DemoNodeData } from '../types/graph';

export const defaultNodes: Node<DemoNodeData>[] = [
  // People (mapped to PersonNode)
  {
    id: 'alice',
    type: 'person', // This will use PersonNode
    position: { x: 600, y: 50 },
    data: { name: 'Alice', title: 'CEO', typeDetails: 'Executive User', status: 'normal', icon: 'user-tie', details: { department: 'Executive', employeeId: 'E1001' } },
    className: 'node-appear',
  },
  {
    id: 'bob',
    type: 'person',
    position: { x: 350, y: 200 },
    data: { name: 'Bob', title: 'Dev Manager', typeDetails: 'Management User', status: 'normal', icon: 'user-cog', details: { department: 'Engineering', team: 'Alpha Team' } },
    className: 'node-appear',
  },
  {
    id: 'carol',
    type: 'person',
    position: { x: 850, y: 200 },
    data: { name: 'Carol', title: 'Product Manager', typeDetails: 'Management User', status: 'warning', icon: 'user-shield', details: { department: 'Product', projectsOverseeing: ['Alpha', 'Beta'] } },
    className: 'node-appear',
  },
  {
    id: 'david',
    type: 'person',
    position: { x: 200, y: 350 },
    data: { name: 'David', title: 'Sr. Developer', typeDetails: 'Technical User', status: 'normal', icon: 'user-hard-hat', details: { team: 'Alpha Team', skills: ['React', 'Node.js'] } },
    className: 'node-appear',
  },
  {
    id: 'eve',
    type: 'person',
    position: { x: 500, y: 350 },
    data: { name: 'Eve', title: 'UX Designer', typeDetails: 'Technical User', status: 'normal', icon: 'user-pen', details: { team: 'Alpha Team', specialisation: 'Mobile UX' } },
    className: 'node-appear',
  },

  // Systems/Computers (mapped to CompanyNode)
  {
    id: 'main_server',
    type: 'company', // This will use CompanyNode
    position: { x: 350, y: 550 },
    data: { name: 'Main Server', location: 'DC-1 Rack A', typeDetails: 'Primary Application Server', status: 'normal', icon: 'server', details: { ip: '192.168.1.10', os: 'Linux Ubuntu 22.04' } },
    className: 'node-appear',
  },
  {
    id: 'db_server',
    type: 'company',
    position: { x: 600, y: 700 },
    data: { name: 'Database Server', location: 'DC-1 Rack B', typeDetails: 'PostgreSQL Cluster', status: 'alert', icon: 'database', details: { ip: '192.168.1.15', version: 'PostgreSQL 14', issue: 'High CPU Load' } },
    className: 'node-appear',
  },
  {
    id: 'backup_server',
    type: 'company',
    position: { x: 100, y: 700 },
    data: { name: 'Backup Server', location: 'DC-2 Offsite', typeDetails: 'Daily Backup Storage', status: 'normal', icon: 'archive', details: { ip: '10.10.5.20', lastBackup: '2023-10-26 03:00 UTC' } },
    className: 'node-appear',
  },

  // Projects (mapped to CompanyNode)
  {
    id: 'project_alpha',
    type: 'company',
    position: { x: 700, y: 350 },
    data: { name: 'Project Alpha', location: 'Q4 Initiative', typeDetails: 'Core Product Rewrite', status: 'normal', icon: 'clipboard-list', details: { deadline: '2023-12-15', budget: '$250,000' } },
    className: 'node-appear',
  },
  {
    id: 'project_beta',
    type: 'company',
    position: { x: 1000, y: 350 },
    data: { name: 'Project Beta', location: 'R&D Effort', typeDetails: 'New Feature Exploration', status: 'delayed', icon: 'lightbulb', details: { statusReason: 'Resource constraints', revisedEta: '2024-02-01' } },
    className: 'node-appear',
  },
  {
    id: 'firewall_main',
    type: 'company',
    position: { x: 600, y: 550 },
    data: { name: 'Firewall GW', location: 'Network Edge', typeDetails: 'Main Security Gateway', status: 'warning', icon: 'shield-check', details: { policy: 'Strict', lastAudit: '2023-09-15', issue: 'Firmware update pending' } },
    className: 'node-appear',
  }
];

export const defaultEdges: Edge[] = [
  // Hierarchy
  { id: 'e-alice-bob', source: 'alice', target: 'bob', label: 'Manages', type: 'smoothstep', animated: false, style: { stroke: 'var(--accent-cyan)', strokeWidth: 1.5 }, markerEnd: { type: MarkerType.ArrowClosed, color: 'var(--accent-cyan)' }, className: 'edge-appear' },
  { id: 'e-alice-carol', source: 'alice', target: 'carol', label: 'Manages', type: 'smoothstep', style: { stroke: 'var(--accent-cyan)', strokeWidth: 1.5 }, markerEnd: { type: MarkerType.ArrowClosed, color: 'var(--accent-cyan)' }, className: 'edge-appear' },
  { id: 'e-bob-david', source: 'bob', target: 'david', label: 'Leads', type: 'smoothstep', style: { stroke: 'var(--accent-green)', strokeWidth: 1.5 }, markerEnd: { type: MarkerType.ArrowClosed, color: 'var(--accent-green)' }, className: 'edge-appear' },
  { id: 'e-bob-eve', source: 'bob', target: 'eve', label: 'Leads', type: 'smoothstep', style: { stroke: 'var(--accent-green)', strokeWidth: 1.5 }, markerEnd: { type: MarkerType.ArrowClosed, color: 'var(--accent-green)' }, className: 'edge-appear' },

  // Project Assignments
  { id: 'e-carol-project_alpha', source: 'carol', target: 'project_alpha', label: 'Oversees', type: 'smoothstep', style: { stroke: 'var(--accent-purple)', strokeWidth: 1.5 }, markerEnd: { type: MarkerType.ArrowClosed, color: 'var(--accent-purple)' }, className: 'edge-appear' },
  { id: 'e-carol-project_beta', source: 'carol', target: 'project_beta', label: 'Oversees', type: 'smoothstep', style: { stroke: 'var(--accent-purple)', strokeWidth: 1.5 }, markerEnd: { type: MarkerType.ArrowClosed, color: 'var(--accent-purple)' }, className: 'edge-appear' },
  { id: 'e-david-project_alpha', source: 'david', target: 'project_alpha', label: 'Works On', type: 'smoothstep', animated: true, style: { stroke: 'var(--accent-orange)', strokeWidth: 2 }, markerEnd: { type: MarkerType.ArrowClosed, color: 'var(--accent-orange)' }, className: 'edge-appear' },
  { id: 'e-eve-project_alpha', source: 'eve', target: 'project_alpha', label: 'Works On', type: 'smoothstep', animated: true, style: { stroke: 'var(--accent-orange)', strokeWidth: 2 }, markerEnd: { type: MarkerType.ArrowClosed, color: 'var(--accent-orange)' }, className: 'edge-appear' },
  { id: 'e-david-project_beta', source: 'david', target: 'project_beta', label: 'Consults For', type: 'smoothstep', style: { stroke: 'var(--accent-pink)', strokeWidth: 1.5 }, markerEnd: { type: MarkerType.ArrowClosed, color: 'var(--accent-pink)' }, className: 'edge-appear' },

  // System Connections
  { id: 'e-david-main_server', source: 'david', target: 'main_server', label: 'Accesses (SSH)', type: 'smoothstep', className: 'edge-appear' },
  { id: 'e-main_server-firewall', source: 'main_server', target: 'firewall_main', label: 'Protected By', type: 'smoothstep', animated: true, style: { stroke: 'var(--accent-green)', strokeWidth: 2 }, markerEnd: { type: MarkerType.ArrowClosed, color: 'var(--accent-green)' }, className: 'edge-appear' },
  { id: 'e-firewall-db_server', source: 'firewall_main', target: 'db_server', label: 'Protects', type: 'smoothstep', style: { stroke: 'var(--accent-red)', strokeWidth: 1.5 }, markerEnd: { type: MarkerType.ArrowClosed, color: 'var(--accent-red)' }, className: 'edge-appear' }, // Edge to alert node
  { id: 'e-main_server-db_server', source: 'main_server', target: 'db_server', label: 'Connects To', type: 'smoothstep', animated: true, style: { stroke: 'var(--accent-red)', strokeWidth: 2.5 }, markerEnd: { type: MarkerType.ArrowClosed, color: 'var(--accent-red)' }, className: 'edge-appear' },
  { id: 'e-main_server-backup_server', source: 'main_server', target: 'backup_server', label: 'Backs Up To', type: 'smoothstep', className: 'edge-appear' },
  { id: 'e-project_alpha-db_server', source: 'project_alpha', target: 'db_server', label: 'Uses Data From', type: 'smoothstep', style: { stroke: 'var(--accent-red)', strokeWidth: 1.5 }, markerEnd: { type: MarkerType.ArrowClosed, color: 'var(--accent-red)' }, className: 'edge-appear' },

  // Inter-departmental
  { id: 'e-bob-carol', source: 'bob', target: 'carol', label: 'Collaborates With', type: 'smoothstep', style: { stroke: 'var(--text-secondary)', strokeDasharray: '5 5', strokeWidth: 1.5 }, markerEnd: { type: MarkerType.ArrowClosed, color: 'var(--text-secondary)' }, className: 'edge-appear' },
  { id: 'e-eve-main_server', source: 'eve', target: 'main_server', label: 'Uses API', type: 'smoothstep', style: { stroke: '#7c3aed', strokeDasharray: '3 3', strokeWidth: 1.5 }, markerEnd: { type: MarkerType.ArrowClosed, color: '#7c3aed' }, className: 'edge-appear' }, // Eve also interacts with main server
]; 

===== frontend/public/index.html =====
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>nodex</title>
</head>
<body>
  <div id="root"></div>
</body>
</html>


===== frontend/Dockerfile =====
FROM node:18-alpine

WORKDIR /app

COPY package.json ./
COPY package-lock.json ./
COPY tsconfig.json ./
COPY eslint.config.mjs ./

RUN npm install --verbose

EXPOSE 3000

CMD ["npm", "start"]



===== backend/app/__init__.py =====


===== backend/app/models.py =====
from pydantic import BaseModel
from typing import Optional, List, Dict, Any

class Token(BaseModel):
    access_token: str
    token_type: str

class TokenData(BaseModel):
    username: Optional[str] = None

class User(BaseModel):
    username: str
    email: Optional[str] = None
    full_name: Optional[str] = None
    disabled: Optional[bool] = None

class UserInDB(User):
    hashed_password: str

class Node(BaseModel):
    label: str
    properties: dict

# Puedes añadir más modelos para representar la estructura de tus nodos si es necesario
# class PersonNode(BaseModel):
#     curp: str
#     nombre_completo: str
#     # ... otros campos


===== backend/app/auth.py =====
import os
from datetime import datetime, timedelta
from typing import Optional, Dict
from jose import JWTError, jwt
from passlib.context import CryptContext
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer

from . import models

# Configuración (mejor en variables de entorno)
JWT_SECRET_KEY = os.getenv("JWT_SECRET_KEY", "supersecretkey") # CAMBIA ESTO EN PRODUCCIÓN
ALGORITHM = os.getenv("ALGORITHM", "HS256")
ACCESS_TOKEN_EXPIRE_MINUTES = int(os.getenv("ACCESS_TOKEN_EXPIRE_MINUTES", 30))

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

# Base de datos de usuarios en memoria (SOLO PARA PoC)
fake_users_db: Dict[str, models.UserInDB] = {}

def init_fake_users_db():
    # Crear un usuario de ejemplo
    hashed_password = get_password_hash("testpassword")
    fake_users_db["testuser"] = models.UserInDB(
        username="testuser",
        email="testuser@example.com",
        full_name="Test User",
        hashed_password=hashed_password,
        disabled=False
    )

def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password):
    return pwd_context.hash(password)

def authenticate_user(db: dict, username: str, password: str) -> Optional[models.User]:
    user_in_db = db.get(username)
    if not user_in_db:
        return None
    if not verify_password(password, user_in_db.hashed_password):
        return None
    return models.User(**user_in_db.dict())

def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=15)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, JWT_SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

async def get_current_user(token: str = Depends(oauth2_scheme)) -> models.User:
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, JWT_SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
        token_data = models.TokenData(username=username)
    except JWTError:
        raise credentials_exception
    
    user_dict = fake_users_db.get(token_data.username)
    if user_dict is None:
        raise credentials_exception
    user = models.User(**user_dict.dict()) # Convert UserInDB to User
    return user

async def get_current_active_user(current_user: models.User = Depends(get_current_user)):
    if current_user.disabled:
        raise HTTPException(status_code=400, detail="Inactive user")
    return current_user


===== backend/app/crud.py =====
from neo4j import AsyncGraphDatabase
import os
from typing import Dict, Any, Tuple, List

NEO4J_URI = os.getenv("NEO4J_URI", "bolt://localhost:7687")
NEO4J_USER = os.getenv("NEO4J_USER", "neo4j")
NEO4J_PASSWORD = os.getenv("NEO4J_PASSWORD", "password")

driver = None

def init_db_connection():
    global driver
    driver = AsyncGraphDatabase.driver(NEO4J_URI, auth=(NEO4J_USER, NEO4J_PASSWORD))

def close_db_connection():
    if driver:
        driver.close()

async def process_and_store_json(data: Dict[str, Any]):
    async with driver.session() as session:
        # Implementar lógica para procesar y almacenar datos JSON en Neo4j
        pass

async def get_all_graph_data() -> Tuple[List[Dict], List[Dict]]:
    async with driver.session() as session:
        result = await session.run("""
            MATCH (n)
            OPTIONAL MATCH (n)-[r]->(m)
            RETURN n, r, m
        """)
        
        nodes_dict = {}
        relationships_list = []

        async for record in result:
            node_n = record["n"]
            if node_n:
                node_id = node_n.element_id
                if node_id not in nodes_dict:
                    props = dict(node_n.items())
                    label = list(node_n.labels)[0] if node_n.labels else "Unknown"
                    nodes_dict[node_id] = {
                        "id": node_id,
                        "label": props.get("nombreCompleto", node_id),
                        "group": label,
                        "properties": props
                    }

            rel = record["r"]
            if rel:
                relationships_list.append({
                    "id": rel.element_id,
                    "from": rel.start_node.element_id,
                    "to": rel.end_node.element_id,
                    "label": rel.type,
                    "properties": dict(rel.items())
                })
        
        return list(nodes_dict.values()), relationships_list

async def get_node_properties(node_element_id: str) -> Dict:
    async with driver.session() as session:
        query = """
        MATCH (n) WHERE elementId(n) = $node_element_id
        RETURN properties(n) as props, labels(n) as labels
        """
        result = await session.run(query, node_element_id=node_element_id)
        record = await result.single()
        if record:
            return {"properties": record["props"], "labels": record["labels"]}
        return None


===== backend/app/main.py =====
import logging

# Silenciar el warning específico de passlib sobre la versión de bcrypt
logging.getLogger('passlib').setLevel(logging.ERROR)

from fastapi import FastAPI, File, UploadFile, Depends, HTTPException, status
from fastapi.security import OAuth2PasswordRequestForm
from fastapi.middleware.cors import CORSMiddleware
import json
from typing import Any, Dict, List
from datetime import timedelta
from fastapi.responses import JSONResponse

from . import crud, models, auth

app = FastAPI(title="SIVG Backend")

# Configuración CORS (permitir peticiones desde el frontend)
origins = [
    "http://localhost:4545", # Puerto del frontend
    "http://localhost:3000", # Puerto de desarrollo de React
    "http://192.168.0.4:4545", # Nueva IP añadida
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.on_event("startup")
async def startup_event():
    crud.init_db_connection()
    # Opcional: Crear constraints/indexes en Neo4j al inicio
    # await crud.create_constraints()

@app.on_event("shutdown")
async def shutdown_event():
    crud.close_db_connection()

@app.options("/token")
async def options_token():
    return JSONResponse(status_code=200, content={"message": "CORS preflight successful"})

@app.post("/token", response_model=models.Token)
async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):
    user = auth.authenticate_user(auth.fake_users_db, form_data.username, form_data.password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    access_token_expires = timedelta(minutes=auth.ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = auth.create_access_token(
        data={"sub": user.username}, expires_delta=access_token_expires
    )
    return {"access_token": access_token, "token_type": "bearer"}

@app.get("/users/me/", response_model=models.User)
async def read_users_me(current_user: models.User = Depends(auth.get_current_active_user)):
    return current_user

@app.post("/upload-json/")
async def upload_json_file(
    file: UploadFile = File(...),
    current_user: models.User = Depends(auth.get_current_active_user) # Proteger endpoint
):
    try:
        contents = await file.read()
        data = json.loads(contents)
    except json.JSONDecodeError:
        raise HTTPException(status_code=400, detail="Invalid JSON file")
    except Exception:
        raise HTTPException(status_code=500, detail="Error reading file")
    finally:
        await file.close()

    # Aquí llamas a la función que procesa el JSON y lo guarda en Neo4j
    try:
        await crud.process_and_store_json(data)
        return {"message": "JSON processed and data stored successfully."}
    except Exception as e:
        # Log the error e
        print(f"Error processing JSON: {e}")
        raise HTTPException(status_code=500, detail=f"Error processing JSON data: {str(e)}")

@app.get("/graph-data/")
async def get_graph_data(
    current_user: models.User = Depends(auth.get_current_active_user) # Proteger endpoint
):
    # Llama a una función en crud.py para obtener nodos y relaciones
    nodes, relationships = await crud.get_all_graph_data()
    return {"nodes": nodes, "edges": relationships}

@app.get("/node-details/{node_id}")
async def get_node_details(
    node_id: str, # O int, dependiendo de cómo identifiques tus nodos
    current_user: models.User = Depends(auth.get_current_active_user)
):
    details = await crud.get_node_properties(node_id)
    if not details:
        raise HTTPException(status_code=404, detail="Node not found")
    return details

# Inicializar la base de datos de usuarios falsos (para PoC)
auth.init_fake_users_db()


===== backend/sample_data.json =====
{
    "nodes": [
        {"label": "Person", "properties": {"name": "Alice", "age": 30}},
        {"label": "Person", "properties": {"name": "Bob", "age": 25}}
    ],
    "relationships": [
        {"start": "Alice", "end": "Bob", "type": "KNOWS"}
    ]
}


===== backend/requirements.txt =====
fastapi
uvicorn[standard]
neo4j
pydantic
python-jose[cryptography]
passlib[bcrypt]
python-multipart
bcrypt==4.0.1  # Fixed bcrypt version to avoid compatibility issues


===== backend/Dockerfile =====
FROM python:3.9-slim

WORKDIR /app

COPY requirements.txt requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]


===== docker-compose.yml =====
version: '3.8'

services:
  neo4j:
    image: neo4j:4.4
    container_name: nodex_neo4j_v3  # Renamed container
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
    environment:
      - NEO4J_AUTH=neo4j/yourStrongPassword
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes

  backend:
    build: ./backend
    container_name: nodex_backend_v3  # Renamed container
    ports:
      - "0.0.0.0:8000:8000"
    volumes:
      - ./backend/app:/app/app
      - ./backend/sample_data.json:/app/sample_data.json
    depends_on:
      - neo4j
    environment:
      - NEO4J_URI=bolt://nodex_neo4j_v3:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=yourStrongPassword
      - JWT_SECRET_KEY=tu_super_secreto_jwt
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30

  frontend:
    build: ./frontend
    container_name: nodex_frontend_v3  # Renamed container
    ports:
      - "0.0.0.0:4545:3000"
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    stdin_open: true
    tty: true
    depends_on:
      - backend
    environment:
      - WDS_SOCKET_HOST=0.0.0.0
      - WDS_SOCKET_PORT=4545
      - WDS_SOCKET_PATH=/ws

volumes:
  neo4j_data:


===== frontend/Dockerfile =====
FROM node:18-alpine

WORKDIR /app

COPY package.json ./
COPY package-lock.json ./
COPY tsconfig.json ./
COPY eslint.config.mjs ./

RUN npm install --verbose

EXPOSE 3000

CMD ["npm", "start"]



