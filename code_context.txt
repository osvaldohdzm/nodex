===== frontend/tsconfig.json =====
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "baseUrl": "src",
    "paths": {
      "@components/*": [
        "components/*"
      ],
      "@styles/*": [
        "styles/*"
      ],
      "@utils/*": [
        "utils/*"
      ]
    }
  },
  "include": [
    "src"
  ]
}


===== frontend/.babelrc =====
{
  "presets": ["react-app"],
  "plugins": ["@babel/plugin-proposal-nullish-coalescing-operator"]
}


===== frontend/eslint.config.mjs =====
import js from "@eslint/js";
import globals from "globals";
import pluginReact from "eslint-plugin-react";
import { defineConfig } from "eslint/config";

export default defineConfig([
  { files: ["**/*.{js,mjs,cjs,jsx}"], plugins: { js }, extends: ["js/recommended"] },
  { files: ["**/*.{js,mjs,cjs,jsx}"], languageOptions: { globals: globals.browser } },
  pluginReact.configs.flat.recommended,
]);


===== frontend/tailwind.config.js =====
module.exports = {
  content: ['./src/**/*.{js,jsx,ts,tsx}', './public/index.html'],
  theme: {
    extend: {},
  },
  plugins: [],
};


===== frontend/src/styles/globals.css =====
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --bg-primary: #03070C;
  --bg-secondary: #0A0F1A;
  --bg-glass: rgba(10, 15, 26, 0.6);
  --border-glass: rgba(0, 229, 255, 0.2);
  --text-primary: #E0E7FF;
  --text-secondary: #94A3B8;
  --accent-cyan: #00E5FF;
  --accent-cyan-darker: #00B8D4;
  --input-bg: #101827;
  --input-border: #303F5E;
  --input-focus-border: var(--accent-cyan);

  --graph-bg: var(--bg-primary);
  --node-person-bg: var(--bg-secondary);
  --node-person-border: var(--accent-cyan-darker);
  --node-company-bg: var(--bg-secondary);
  --node-company-border: var(--accent-cyan);
  --shadow-node-glow: 0 0 15px var(--accent-cyan);

  --edge-employer: #82DDFF;
  --edge-bestfriend: #A78BFA;
  --edge-boardmember: #F472B6;
  --edge-default: #94A3B8;

  --hue: 200;
  --saturation-accent: 100%;
  --lightness-accent: 50%;
  --first-color: hsl(var(--hue), var(--saturation-accent), var(--lightness-accent));
  --first-color-alt: hsl(var(--hue), var(--saturation-accent), 45%);
  --first-color-light: hsl(var(--hue), var(--saturation-accent), 65%);
  --bg-dark-primary: #05080D;
  --bg-form-color: hsla(212, 70%, 10%, 0.75);
  --input-bg-color: #0E1625;
  --title-color: var(--first-color);
  --text-color: #C0C8D8;
  --text-color-light: #8892b0;
  --text-on-accent: var(--bg-dark-primary);
  --body-color: var(--bg-dark-primary);
  --container-color: var(--bg-form-color);
  --input-border-color: hsl(var(--hue), var(--saturation-accent), 35%);
}

body {
  @apply bg-bg-primary text-text-primary font-sans;
  margin: 0;
  min-height: 100vh;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* Custom scrollbar */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}
::-webkit-scrollbar-track {
  background: var(--bg-secondary);
}
::-webkit-scrollbar-thumb {
  background: var(--accent-cyan-darker);
  border-radius: 4px;
}
::-webkit-scrollbar-thumb:hover {
  background: var(--accent-cyan);
}

/* React Flow specific styles */
.react-flow__minimap {
  background-color: var(--bg-secondary) !important;
  border: 1px solid var(--accent-cyan-darker) !important;
}
.react-flow__controls-button {
  background-color: var(--bg-secondary) !important;
  border: 1px solid var(--accent-cyan-darker) !important;
  color: var(--accent-cyan) !important;
  fill: var(--accent-cyan) !important;
}
.react-flow__controls-button:hover {
  background-color: var(--input-bg) !important;
}
.react-flow__attribution {
  display: none;
}

.debug-border {
  border: 2px solid red !important;
}


===== frontend/src/App.js =====
import React from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
// Asegúrate de que estas importaciones de CSS estén comentadas o eliminadas si no las necesitas aquí directamente
// import './App.css'; // Comentado si los estilos principales están en globals.css o son de Tailwind
import LoginPage from './pages/LoginPage.tsx';
import GraphPage from './pages/GraphPage.tsx';
import PrivateRoute from './components/auth/PrivateRoute.tsx';
import './styles/globals.css'; // Importante: tus estilos globales y Tailwind

function App() {
  console.log("App component is rendering");
  // Esta variable isAuthenticated se usa para la redirección inicial en la ruta "/"
  // PrivateRoute maneja la autenticación para las rutas protegidas después de eso.
  const isAuthenticated = !!localStorage.getItem('access_token');

  return (
    <Router>
      {/* Contenedor principal de la aplicación */}
      <div className="App flex flex-col h-screen bg-gray-700"> {/* Fondo gris oscuro para ver el contenedor App */}
        <header
          className="App-header" // Puedes añadir clases de Tailwind aquí si quieres
          style={{
            backgroundColor: '#1e1e1e', // Un color de header distintivo
            padding: '20px',
            textAlign: 'center',
            color: 'white',
            flexShrink: 0, // Importante: Evita que el header se encoja si el contenido de main es grande
            borderBottom: '2px solid var(--accent-cyan)' // Un borde para distinguirlo
          }}
        >
          <h1>Nodex</h1>
        </header>

        {/* Contenedor principal del contenido */}
        <main
          className="flex-grow overflow-auto" // Tailwind classes para que ocupe el espacio y permita scroll
          style={{
            border: '5px solid limegreen', // Borde verde para depurar <main>
            backgroundColor: 'rgba(50, 50, 150, 0.3)', // Fondo azulado semi-transparente para <main>
            // minHeight: '0', // Asegura que flex-grow pueda funcionar correctamente.
            // display: 'flex', // Si quieres que el contenido interno use flex
            // flexDirection: 'column', // Si quieres que el contenido interno se apile verticalmente
          }}
        >
          {/* Div interno para probar el layout dentro de main */}
          <div style={{
              border: '3px dashed yellow',
              // flexGrow: 1, // Descomenta si main tiene display:flex y flexDirection:column y quieres que este div crezca
              minHeight: '100%', // Intenta que este div ocupe toda la altura de main
              backgroundColor: 'rgba(255, 255, 0, 0.1)',
              padding: '10px', // Añade padding para ver el contenido
              display: 'flex', // Para que GraphPage pueda usar flex si es necesario
              flexDirection: 'column' // Para que GraphPage pueda usar flex si es necesario
            }}
          >
            <p style={{color: 'yellow', textAlign: 'center', flexShrink: 0}}>CONTENIDO INTERNO DE MAIN - ¿VES ESTO EN AMARILLO?</p>
            
            {/* Las Rutas van aquí, dentro del div amarillo para ver si se renderizan */}
            <div style={{ flexGrow: 1, border: '2px solid orange', position: 'relative' /* Para ReactFlow */}}> {/* Contenedor para las rutas */}
              <Routes>
                <Route path="/login" element={<LoginPage />} />
                <Route element={<PrivateRoute />}>
                  {/* GraphPage es el div rojo/azul de depuración */}
                  <Route path="/graph" element={<GraphPage />} />
                </Route>
                <Route
                  path="/"
                  element={
                    // Re-evaluar aquí para la redirección inicial
                    localStorage.getItem('access_token') ? <Navigate to="/graph" replace /> : <Navigate to="/login" replace />
                  }
                />
                {/* Ruta catch-all para redirigir si no se encuentra la ruta */}
                <Route
                  path="*"
                  element={<Navigate to="/" replace />}
                />
              </Routes>
            </div>
          </div>
        </main>
      </div>
    </Router>
  );
}

export default App;

===== frontend/src/App.css =====
body {
  margin: 0;
  font-family: Arial, sans-serif;
  background-color: #121212;
  color: #ffffff;
}

.App-header {
  background-color: #1e1e1e;
  padding: 20px;
  text-align: center;
}

main {
  padding: 0; /* Remove padding to avoid layout issues for GraphPage */
}


===== frontend/src/index.js =====
import React from 'react';
import { createRoot } from 'react-dom/client';
import './styles/globals.css'; // MANTENER ESTE (Tailwind y variables principales)
// import './assets/css/styles.css'; // COMENTAR TEMPORALMENTE para aislar problemas de CSS
// import './App.css'; // COMENTAR TEMPORALMENTE para aislar problemas de CSS
import App from './App';

const container = document.getElementById('root');
const root = createRoot(container);

root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

===== frontend/src/assets/css/styles.css =====
/* GLE FONTS ===============*/
@import url("https://fonts.googleapis.com/css2?family=Poppins:wght@400;500&display=swap");

/* ============ VARIABLES CSS ===============*/
:root {
  /* ======= Colors (Inspired by User Image) ==========*/
  --hue: 200; /* Use hue for cyan/blue tones (e.g., 200 for a bright sky blue/cyan) */
  --saturation-accent: 100%;
  --lightness-accent: 50%; /* For a bright #00E5FF like cyan */

  --first-color: hsl(var(--hue), var(--saturation-accent), var(--lightness-accent)); /* Bright Cyan */
  --first-color-alt: hsl(var(--hue), var(--saturation-accent), 45%); /* Slightly darker cyan for hover */
  --first-color-light: hsl(var(--hue), var(--saturation-accent), 65%); /* Lighter cyan */

  --bg-dark-primary: #05080D; /* Very dark, almost black with a hint of blue */
  --bg-form-color: hsla(212, 70%, 10%, 0.75); /* Dark blue, slightly transparent for form background */
  --input-bg-color: #0E1625; /* Dark blue for input background */

  --title-color: var(--first-color); /* Bright Cyan for titles */
  --text-color: #C0C8D8; /* Light grayish blue for general text */
  --text-color-light: #8892b0; /* Muted blue-gray for labels, secondary text */
  --text-on-accent: var(--bg-dark-primary); /* Dark text for buttons with cyan background */

  --body-color: var(--bg-dark-primary);
  --container-color: var(--bg-form-color); /* For the form itself */
  --input-border-color: hsl(var(--hue), var(--saturation-accent), 35%); /* Darker cyan for input border */

  /* ======== Font and typography ==========*/
  --body-font: 'Poppins', sans-serif;
  --h1-font-size: 1.75rem;
  --normal-font-size: .938rem;
  --small-font-size: .813rem;

  /* ======== z-index ==========*/
  --z-fixed: 100;
  --z-modal: 1000;
}

/* Responsive typography */
@media screen and (min-width: 968px) {
  :root {
    --h1-font-size: 2.25rem;
    --normal-font-size: 1rem;
    --small-font-size: .875rem;
  }
}

/* ============= BASE ===============*/
* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

body {
  font-family: var(--body-font);
  font-size: var(--normal-font-size);
  background-color: var(--body-color);
  background-image: radial-gradient(ellipse at center, hsl(var(--hue), 30%, 10%) 0%, var(--body-color) 70%);
  background-repeat: no-repeat;
  background-attachment: fixed;
  min-height: 100vh;
  color: var(--text-color);
  line-height: 1.6;
}

h1 {
  color: var(--title-color); /* Default h1 color, though login__title overrides */
}

a {
  text-decoration: none;
  color: var(--first-color);
}

input,
button {
  font-family: var(--body-font);
  border: none;
  outline: none;
}

/* ============= LOGIN PAGE STYLES ===============*/
.login {
  height: 100vh;
  display: grid;
  align-items: center;
  justify-content: center;
  padding: 1.5rem;
}

#loginBackgroundCanvas {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  z-index: -1;
  background-color: var(--body-color);
}

.login-page-container {
  width: 100%;
  height: 100vh;
  overflow: hidden;
}

.login__form {
  position: relative;
  z-index: 1;
  background-color: var(--container-color);
  border: 1px solid hsla(var(--hue), var(--saturation-accent), var(--lightness-accent), 0.2);
  backdrop-filter: blur(8px);
  padding: 2.5rem 2rem;
  border-radius: 1rem;
  box-shadow: 0 8px 32px 0 hsla(var(--hue), var(--saturation-accent), var(--lightness-accent), 0.15),
              0 0 25px hsla(var(--hue), var(--saturation-accent), var(--lightness-accent), 0.1) inset;
  width: 100%;
  max-width: 400px;
  text-align: center;
}

.login__title {
  font-size: var(--h1-font-size);
  font-weight: 500;
  margin-bottom: 2rem;
  color: var(--title-color);
  text-shadow: 0 0 8px hsla(var(--hue), var(--saturation-accent), var(--lightness-accent), 0.7);
}

.login__content {
  display: grid;
  gap: 1.5rem;
  margin-bottom: 1.25rem;
}

.login__box {
  display: grid;
  grid-template-columns: max-content 1fr;
  align-items: center;
  column-gap: 0.75rem;
  border: 1px solid var(--input-border-color);
  padding: 0.5rem 1rem;
  border-radius: 0.75rem;
  background-color: var(--input-bg-color);
  transition: border-color .3s, box-shadow .3s;
}

.login__box:focus-within {
  border-color: var(--first-color);
  box-shadow: 0 0 10px hsla(var(--hue), var(--saturation-accent), var(--lightness-accent), 0.6);
}

.login__icon {
  font-size: 1.25rem;
  color: var(--first-color-light);
  transition: color .3s;
}

.login__box:focus-within .login__icon {
  color: var(--first-color);
}

.login__box-input {
  position: relative;
  width: 100%;
}

.login__input {
  width: 100%;
  padding: 0.9rem 0.25rem;
  background: none;
  color: var(--text-color);
  font-size: var(--normal-font-size);
  letter-spacing: 0.5px;
}

/* Styles for Webkit browser autofill */
.login__input:-webkit-autofill,
.login__input:-webkit-autofill:hover, 
.login__input:-webkit-autofill:focus, 
.login__input:-webkit-autofill:active  {
    -webkit-box-shadow: 0 0 0 30px var(--input-bg-color) inset !important;
    -webkit-text-fill-color: var(--text-color) !important;
    caret-color: var(--first-color) !important;
    border-radius: 0.75rem;
}

.login__label {
  position: absolute;
  left: 0.25rem;
  top: 50%;
  transform: translateY(-50%);
  padding: 0 0.25rem;
  font-size: var(--normal-font-size);
  color: var(--text-color-light);
  font-weight: 400;
  pointer-events: none;
  transition: all 0.2s ease-out;
  background-color: var(--input-bg-color);
  line-height: 1;
}

.login__eye {
  position: absolute;
  right: 0;
  top: 50%;
  transform: translateY(-50%);
  font-size: 1.25rem;
  color: var(--text-color-light);
  cursor: pointer;
  transition: color .3s;
}
.login__eye:hover {
  color: var(--first-color);
}

/* Input focus or value present: move up label */
.login__input:focus + .login__label,
.login__input:not(:placeholder-shown) + .login__label {
  top: -0.85rem; /* Adjust this value to position label above input field correctly */
  font-size: .75rem;
  color: var(--first-color);
}

.login__check {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1.25rem;
  font-size: var(--small-font-size);
}

.login__check-group {
  display: flex;
  align-items: center;
  gap: .5rem;
}

.login__check-input {
  width: 1rem;
  height: 1rem;
  accent-color: var(--first-color); /* Modern browsers styling for checkbox */
  cursor: pointer;
  background-color: var(--input-bg-color); /* Ensure bg matches for non-accent-color scenarios */
  border: 1px solid var(--input-border-color); /* For consistency */
}
.login__check-input:checked {
    background-color: var(--first-color); /* Explicitly set checked bg */
}


.login__check-label,
.login__forgot {
  color: var(--text-color-light);
  transition: color .3s;
}

.login__check-label:hover, /* Hover for label to make it feel more interactive */
.login__forgot:hover {
  color: var(--first-color);
}

.login__button {
  width: 100%;
  padding: 1rem;
  border-radius: 0.75rem;
  background-color: var(--first-color);
  color: var(--text-on-accent);
  font-weight: 500;
  font-size: var(--normal-font-size);
  cursor: pointer;
  margin-bottom: 2rem;
  transition: background-color .3s, box-shadow .3s;
  box-shadow: 0 4px 15px hsla(var(--hue), var(--saturation-accent), var(--lightness-accent), 0.3);
}

.login__button:hover {
  background-color: var(--first-color-alt);
  box-shadow: 0 6px 20px hsla(var(--hue), var(--saturation-accent), var(--lightness-accent), 0.5);
}

.login__button:focus-visible { /* Accessibility focus ring */
  outline: 2px solid var(--first-color-alt);
  outline-offset: 3px;
}

.login__register {
  font-size: var(--small-font-size);
  text-align: center;
  color: var(--text-color-light);
}

.login__register a {
  color: var(--first-color);
  font-weight: 500;
  transition: color .3s, text-decoration .3s;
}

.login__register a:hover {
  color: var(--first-color-light);
  text-decoration: underline;
}

/* Custom scrollbar (Webkit browsers) */
::-webkit-scrollbar {
  width: 10px;
  height: 10px;
}
::-webkit-scrollbar-track {
  background: var(--input-bg-color);
  border-radius: 10px;
}
::-webkit-scrollbar-thumb {
  background: var(--input-border-color);
  border-radius: 10px;
  border: 2px solid var(--input-bg-color); /* Creates a padding effect */
}
::-webkit-scrollbar-thumb:hover {
  background: var(--first-color);
}


===== frontend/src/pages/GraphPage.tsx =====
import React, { useState, useCallback, useMemo } from 'react';
import ReactFlow, {
  Controls,
  Background,
  MiniMap,
  useNodesState,
  useEdgesState,
  addEdge,
  Node,
  Edge,
  Connection,
  BackgroundVariant,
  Position,
} from 'reactflow';
import 'reactflow/dist/style.css';
import '../styles/react-flow-theme.css';
import '../styles/globals.css';

import JsonUploadButton from '../components/graph/JsonUploadButton';
import PersonNode from '../components/graph/PersonNode';
import CompanyNode from '../components/graph/CompanyNode';

// Define los tipos de nodos personalizados que React Flow usará
const nodeTypes = {
  person: PersonNode,
  company: CompanyNode,
};

interface JsonData {
  curp_online?: {
    data?: {
      registros?: Array<{
        curp: string;
        nombres: string;
        primerApellido: string;
        segundoApellido: string;
      }>;
    };
  };
  ine1?: {
    data?: Array<{
      nombre: string;
      paterno: string;
      materno: string;
      ocupacion: string;
      cve: string;
    }>;
  };
  buro1?: {
    data?: Array<{
      comercios: Array<{
        institucion: string;
        [key: string]: any;
      }>;
    }>;
  };
  [key: string]: any;
}

const GraphPage: React.FC = () => {
  console.log("GraphPage IS RENDERING - Now with Graph Display Logic");
  const [jsonData, setJsonData] = useState<JsonData | null>(null);
  const [fileName, setFileName] = useState<string>('');

  const [nodes, setNodes, onNodesChange] = useNodesState([]);
  const [edges, setEdges, onEdgesChange] = useEdgesState([]);

  // Memoize nodeTypes para evitar re-renders innecesarios
  const memoizedNodeTypes = useMemo(() => nodeTypes, []);

  // Callback para cuando se conectan nodos manualmente
  const onConnect = useCallback(
    (params: Connection) => {
      if (params.source && params.target) {
        setEdges((eds) => addEdge({
          ...params,
          id: `e${Date.now()}`,
          type: 'smoothstep',
          animated: true,
          style: { stroke: 'var(--edge-default)' },
        }, eds));
      }
    },
    [setEdges]
  );

  // Función para procesar el JSON y convertirlo en nodos y aristas para React Flow
  const processJsonToGraph = (data: JsonData): { initialNodes: Node[]; initialEdges: Edge[] } => {
    const newNodes: Node[] = [];
    const newEdges: Edge[] = [];
    const nodeIds = new Set<string>();
    let edgeIdCounter = 0;
    let mainPersonNodeId = '';
    let mainPersonName = '';

    const addNodeSafely = (node: Node) => {
      if (!nodeIds.has(node.id)) {
        newNodes.push(node);
        nodeIds.add(node.id);
      }
    };

    const addEdgeInternal = (sourceId: string, targetId: string, label: string) => {
      if (nodeIds.has(sourceId) && nodeIds.has(targetId)) {
        newEdges.push({
          id: `e${edgeIdCounter++}`,
          source: sourceId,
          target: targetId,
          label,
          type: 'smoothstep',
          animated: false,
          style: { stroke: 'var(--edge-default)' },
        });
      }
    };

    if (!data) return { initialNodes: [], initialEdges: [] };

    // Crear nodo principal
    if (data.curp_online?.data?.registros?.[0]) {
      const personData = data.curp_online.data.registros[0];
      mainPersonNodeId = personData.curp || `person-${Date.now()}`;
      mainPersonName = `${personData.nombres} ${personData.primerApellido} ${personData.segundoApellido}`;
      addNodeSafely({
        id: mainPersonNodeId,
        type: 'person',
        position: { x: 250, y: 50 },
        data: {
          name: mainPersonName,
          title: data.ine1?.data?.[0]?.ocupacion || 'Individuo Principal',
          details: { ...personData, ine: data.ine1?.data?.[0], fullJson: data },
        },
      });
    } else if (data.ine1?.data?.[0]) {
      const personData = data.ine1.data[0];
      mainPersonNodeId = personData.cve || `person-${Date.now()}-${personData.nombre.replace(/\s+/g, '_')}`;
      mainPersonName = `${personData.nombre} ${personData.paterno} ${personData.materno}`;
      addNodeSafely({
        id: mainPersonNodeId,
        type: 'person',
        position: { x: 250, y: 50 },
        data: {
          name: mainPersonName,
          title: personData.ocupacion,
          details: { ...personData, fullJson: data },
        },
      });
    } else {
      mainPersonNodeId = data._id?.$oid || `json-root-${Date.now()}`;
      mainPersonName = "Raíz del JSON";
      addNodeSafely({
        id: mainPersonNodeId,
        type: 'person',
        position: { x: 250, y: 50 },
        data: {
          name: mainPersonName,
          title: "Datos Centrales",
          details: { id: data._id?.$oid, fullJson: data },
        },
      });
    }

    // Procesar empresas del buró
    if (data.buro1?.data?.[0]?.comercios) {
      data.buro1.data[0].comercios.forEach((comercio, index) => {
        const empresaId = `empresa-${index}-${(comercio.institucion || 'unknown').replace(/\s+/g, '_')}`;
        addNodeSafely({
          id: empresaId,
          type: 'company',
          position: { x: 50 + index * 200, y: 250 },
          data: {
            name: comercio.institucion || 'Empresa sin nombre',
            details: comercio,
          },
        });
        addEdgeInternal(mainPersonNodeId, empresaId, 'Relación Financiera');
      });
    }

    // 3. Nodo Empresa y Relaciones (Socios Empresas)
    if (mainPersonNodeId && data.socios_empresas?.data?.datos_subconsulta?.[0]) {
      const empresaSociaData = data.socios_empresas.data.datos_subconsulta[0];
      const empresaSociaId = (empresaSociaData.nombre_razon_social || `sociedad-${empresaSociaData.fme}`).replace(/\s+/g, '_');
      addNodeSafely({
        id: empresaSociaId,
        type: 'company',
        position: { x: 450, y: 250 },
        data: {
          name: empresaSociaData.nombre_razon_social,
          location: empresaSociaData.domicilio_social?.split('\n')[0], // Tomar primera línea
          details: empresaSociaData,
        },
      });
      addEdgeInternal(mainPersonNodeId!, empresaSociaId, 'Es Socio/Accionista en');

      if (data.socios_empresas.data.socios) {
          data.socios_empresas.data.socios.forEach((socio: any, index: number) => {
              const socioNameFull = `${socio.nombre} ${socio.apellido_paterno} ${socio.apellido_materno}`;
              // Evitar crear un nodo para la persona principal si ya existe como socio y tiene el mismo nombre
              if (socioNameFull.trim().toLowerCase() !== mainPersonName.trim().toLowerCase()) {
                  const socioId = (socio.rfc || socioNameFull.replace(/\s+/g, '_') || `socio-${index}`).replace(/\s+/g, '_');
                  addNodeSafely({
                      id: socioId,
                      type: 'person',
                      position: { x: 450 + index * 180, y: 400 + (index % 2 * 80) },
                      data: {
                          name: socioNameFull,
                          title: "Socio/Accionista",
                          details: socio
                      }
                  });
                  addEdgeInternal(empresaSociaId, socioId, 'Tiene como Socio/Accionista a');
              }
          });
      }
    }

    // 4. Contacto de Emergencia (Pasaportes)
    if (mainPersonNodeId && data.pasaportes2023?.data?.[0]?.solicitud?.datos_personales?.contacto_emergencia) {
      const contactoRaw = data.pasaportes2023.data.find((p:any) => p.solicitud?.datos_personales?.contacto_emergencia)?.solicitud.datos_personales.contacto_emergencia;
      if (contactoRaw) {
        const contactoName = `${contactoRaw.nombre} ${contactoRaw.apellido} ${contactoRaw.apellido2}`;
        const contactoId = (contactoName.replace(/\s+/g, '_') || `contacto-emergencia-0`).replace(/\s+/g, '_');
        addNodeSafely({
            id: contactoId,
            type: 'person',
            position: { x: 50, y: 400 },
            data: {
                name: contactoName,
                title: "Contacto de Emergencia",
                details: contactoRaw
            }
        });
        addEdgeInternal(mainPersonNodeId!, contactoId, 'Contacto de Emergencia');
      }
    }
    
    // 5. Resultados de Internet (LinkedIn, etc.) como nodos de "Perfil Online"
    if (mainPersonNodeId && data.internet1?.data?.ResultadosGoogle?.resultados) {
        data.internet1.data.ResultadosGoogle.resultados.forEach((res: any, index: number) => {
            if (res.link && res.title) {
                // Filtrar para que solo sean perfiles de la persona principal (heurística por nombre)
                if (mainPersonName && res.title.toLowerCase().includes(mainPersonName.split(" ")[0].toLowerCase())) {
                    const perfilId = `perfil-google-${index}-${res.link.substring(0,30).replace(/[^a-zA-Z0-9]/g, '_')}`;
                    addNodeSafely({
                        id: perfilId,
                        type: 'company', // Usar company node para representar un perfil/website
                        position: { x: 600 + index * 50, y: 100 + (index % 3 * 100) },
                        data: {
                            name: res.title.substring(0, 30) + "...",
                            location: res.link.startsWith("https://mx.linkedin.com") ? "LinkedIn" : "Web",
                            details: res
                        }
                    });
                    addEdgeInternal(mainPersonNodeId!, perfilId, 'Perfil Online');
                }
            }
        });
    }


    console.log("Nodos generados:", newNodes);
    console.log("Aristas generadas:", newEdges);
    return { initialNodes: newNodes, initialEdges: newEdges };
  };

  const handleJsonUploaded = useCallback((data: JsonData, name?: string) => {
    console.log("JSON data received in GraphPage:", data);
    setJsonData(data);
    if (name) {
      setFileName(name);
    }
    const { initialNodes, initialEdges } = processJsonToGraph(data);
    setNodes(initialNodes);
    setEdges(initialEdges);
  }, []);

  return (
    <div className="h-full w-full p-2 flex flex-col bg-bg-secondary text-text-primary">
      <div className="mb-4 p-3 bg-bg-primary shadow-md rounded-md flex-shrink-0">
        <h2 className="text-xl font-semibold mb-3 text-accent-cyan">
          Cargar Archivo JSON del Grafo
        </h2>
        <JsonUploadButton onJsonUploaded={handleJsonUploaded} />
        {fileName && <p className="text-xs text-text-secondary mt-2">Archivo cargado: {fileName}</p>}
      </div>

      <div className="flex-grow mt-2 rounded-lg shadow-lg bg-graph-bg relative">
        {nodes.length > 0 ? (
          <ReactFlow
            nodes={nodes}
            edges={edges}
            onNodesChange={onNodesChange}
            onEdgesChange={onEdgesChange}
            onConnect={onConnect}
            nodeTypes={memoizedNodeTypes}
            fitView
            fitViewOptions={{ padding: 0.1 }}
            minZoom={0.1}
          >
            <Controls />
            <MiniMap 
              nodeStrokeWidth={3}
              nodeColor={(n) => {
                if (n.type === 'person') return 'var(--node-person-border)';
                if (n.type === 'company') return 'var(--node-company-border)';
                return 'var(--text-secondary)';
              }}
              pannable 
              zoomable
            />
            <Background 
              variant={BackgroundVariant.Dots} 
              gap={16} 
              size={0.7} 
              color="var(--input-border)" 
            />
          </ReactFlow>
        ) : jsonData ? (
          <div className="flex flex-col items-center justify-center h-full text-text-secondary text-lg p-4">
            <p className="mb-4">El archivo JSON se cargó, pero no se generaron nodos para el grafo.</p>
            <p className="mb-2 text-sm">El JSON podría no contener la estructura esperada para generar el grafo.</p>
            <details className="w-full max-w-2xl mt-4">
              <summary className="cursor-pointer text-accent-cyan hover:underline">Ver contenido del JSON</summary>
              <pre className="text-xs whitespace-pre-wrap break-all text-text-secondary overflow-auto max-h-96 mt-2 p-3 bg-input-bg rounded-md">
                {JSON.stringify(jsonData, null, 2)}
              </pre>
            </details>
          </div>
        ) : (
          <div className="flex items-center justify-center h-full text-text-secondary text-lg">
            <p>Arrastra o selecciona un archivo JSON para visualizar el grafo.</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default GraphPage;

===== frontend/src/pages/LoginPage.tsx =====
import React from 'react';
import LoginForm from '../components/auth/LoginForm';
import AnimatedBackground from '../components/AnimatedBackground.js';
import '../assets/css/styles.css';

const LoginPage: React.FC = () => {
  const handleLoginSuccess = () => {
    console.log('Login success callback triggered in LoginPage.');
  };

  return (
    <div className="login-page-container">
      <AnimatedBackground />
      <div className="flex items-center justify-center h-screen">
        <LoginForm onLoginSuccess={handleLoginSuccess} />
      </div>
    </div>
  );
};

export default LoginPage;


===== frontend/src/components/auth/LoginForm.tsx =====
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import '../../assets/css/styles.css';

interface LoginFormProps {
  onLoginSuccess: () => void;
}

const LoginForm: React.FC<LoginFormProps> = ({ onLoginSuccess }) => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false); // Loading state
  const navigate = useNavigate();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (loading) return; // Prevent multiple submissions

    setError('');
    setLoading(true); // Set loading state

    try {
      console.log('Attempting fetch to http://192.168.0.4:8000/token');

      const response = await fetch('http://192.168.0.4:8000/token', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: new URLSearchParams({ username, password }).toString(),
      });

      console.log('Fetch response status:', response.status);

      if (!response.ok) {
        const errorData = await response.json();
        console.error('Login failed:', errorData);
        setError(errorData.detail || 'Login failed');
        return;
      }

      const data = await response.json();
      console.log('Token from backend:', data.access_token);
      localStorage.setItem('access_token', data.access_token);
      onLoginSuccess();
      navigate('/graph');
    } catch (err) {
      console.error('Login fetch CATCH block error:', err);
      setError('An error occurred during login. Check console for details.');
    } finally {
      setLoading(false); // Reset loading state
      console.log('handleSubmit finally block, loading set to false');
    }
  };

  return (
    <div className="login"> {/* This class ensures proper styling for the login form */}
      <form className="login__form" onSubmit={handleSubmit}>
        <h1 className="login__title">Login</h1>

        {error && (
          <p className="text-sm text-red-500 mb-4 text-center bg-red-900 bg-opacity-50 p-2 rounded">
            {error}
          </p>
        )}

        <div className="login__content">
          <div className="login__box">
            <div className="login__box-input">
              <input
                type="text"
                className="login__input"
                placeholder=" "
                value={username}
                onChange={(e) => setUsername(e.target.value)}
                id="login-username"
                required
              />
              <label htmlFor="login-username" className="login__label">Username</label>
            </div>
          </div>

          <div className="login__box">
            <div className="login__box-input">
              <input
                type={showPassword ? "text" : "password"}
                className="login__input"
                placeholder=" "
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                id="login-password"
                required
              />
              <label htmlFor="login-password" className="login__label">Password</label>
            </div>
          </div>
        </div>

        <button type="submit" className="login__button" disabled={loading}> {/* Disable button when loading */}
          {loading ? 'Logging in...' : 'Login'}
        </button>
      </form>
    </div>
  );
};

export default LoginForm;


===== frontend/src/components/graph/PersonNode.tsx =====
import React, { memo, useState } from 'react';
import { Handle, Position, NodeProps } from 'reactflow';
import { User, ImagePlus } from 'lucide-react';
import classnames from 'classnames';

export interface PersonNodeData {
  name: string;
  title?: string;
  imageUrl?: string;
  onImageUpload?: (nodeId: string, file: File) => void;
  isHighlighted?: boolean;
}

const PersonNode: React.FC<NodeProps<PersonNodeData>> = ({ data, id, selected }) => {
  const [imageSrc, setImageSrc] = useState<string | undefined>(data.imageUrl);
  const [isUploading, setIsUploading] = useState(false);

  const handleImageError = () => {
    setImageSrc(undefined);
  };

  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {
    if (event.target.files && event.target.files[0]) {
      const file = event.target.files[0];
      if (data.onImageUpload) {
        setIsUploading(true);
        try {
          await data.onImageUpload(id, file);
          const reader = new FileReader();
          reader.onloadend = () => {
            setImageSrc(reader.result as string);
          };
          reader.readAsDataURL(file);
        } catch (error) {
          console.error("Image upload failed:", error);
          alert("Image upload failed.");
        } finally {
          setIsUploading(false);
        }
      } else {
        const reader = new FileReader();
        reader.onloadend = () => {
          setImageSrc(reader.result as string);
        };
        reader.readAsDataURL(file);
      }
    }
  };

  return (
    <div
      className={classnames(
        'rounded-full w-32 h-32 p-1 flex flex-col items-center justify-center text-center shadow-lg relative',
        'bg-node-person-bg border-2',
        selected || data.isHighlighted ? 'border-accent-cyan shadow-node-glow' : 'border-node-person-border',
        'transition-all duration-300'
      )}
    >
      <Handle type="target" position={Position.Top} className="!bg-accent-cyan w-3 h-3" />
      <div className="w-20 h-20 rounded-full overflow-hidden border-2 border-white/50 mb-1 relative group">
        {imageSrc ? (
          <img src={imageSrc} alt={data.name} className="w-full h-full object-cover" onError={handleImageError} />
        ) : (
          <User className="w-full h-full text-node-person-border p-2" />
        )}
        {data.onImageUpload && (
          <label
            htmlFor={`upload-${id}`}
            className="absolute inset-0 bg-black/50 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity cursor-pointer"
          >
            <ImagePlus size={24} className="text-white" />
            <input
              type="file"
              id={`upload-${id}`}
              accept="image/*"
              className="hidden"
              onChange={handleFileChange}
              disabled={isUploading}
            />
          </label>
        )}
      </div>

      <div className="text-xs font-semibold text-text-primary truncate w-full px-1">{data.name}</div>
      {data.title && <div className="text-[10px] text-text-secondary truncate w-full px-1">{data.title}</div>}

      <Handle type="source" position={Position.Bottom} className="!bg-accent-cyan w-3 h-3" />
      {isUploading && <div className="absolute bottom-1 left-1 text-xs text-accent-cyan">Uploading...</div>}
    </div>
  );
};

export default memo(PersonNode);


===== frontend/src/components/graph/JsonUploadButton.tsx =====
import React, { useRef } from 'react';
import { UploadCloud } from 'lucide-react';

interface JsonUploadButtonProps {
  onJsonUploaded: (jsonData: any, fileName?: string) => void; // Añadir fileName opcional
}

const JsonUploadButton: React.FC<JsonUploadButtonProps> = ({ onJsonUploaded }) => {
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        try {
          const json = JSON.parse(e.target?.result as string);
          onJsonUploaded(json, file.name); // Pasar file.name
        } catch (error) {
          console.error("Error parsing JSON:", error);
          alert("Failed to parse JSON file. Please ensure it's valid JSON.");
        }
      };
      reader.readAsText(file);
      if (fileInputRef.current) {
        fileInputRef.current.value = "";
      }
    }
  };

  const handleButtonClick = () => {
    fileInputRef.current?.click();
  };

  const handleDrop = (event: React.DragEvent<HTMLDivElement>) => {
    event.preventDefault();
    event.stopPropagation();
    event.currentTarget.classList.remove('border-accent-cyan', 'bg-gray-700');
    const file = event.dataTransfer.files?.[0];
    if (file && file.type === "application/json") {
        const reader = new FileReader();
        reader.onload = (e) => {
            try {
                const json = JSON.parse(e.target?.result as string);
                onJsonUploaded(json, file.name); // Pasar file.name
            } catch (error) {
                console.error("Error parsing JSON:", error);
                alert("Failed to parse JSON file. Please ensure it's valid JSON.");
            }
        };
        reader.readAsText(file);
    } else if (file) {
        alert("Please drop a valid JSON file.");
    }
  };

  const handleDragOver = (event: React.DragEvent<HTMLDivElement>) => {
    event.preventDefault();
    event.stopPropagation();
    event.currentTarget.classList.add('border-accent-cyan', 'bg-gray-700');
  };

  const handleDragLeave = (event: React.DragEvent<HTMLDivElement>) => {
    event.preventDefault();
    event.stopPropagation();
    event.currentTarget.classList.remove('border-accent-cyan', 'bg-gray-700');
  };

  return (
    <div
      onDrop={handleDrop}
      onDragOver={handleDragOver}
      onDragLeave={handleDragLeave}
      className="border-2 border-dashed border-gray-600 rounded-lg p-8 text-center cursor-pointer hover:border-accent-cyan transition-colors duration-200"
      onClick={handleButtonClick}
    >
      <input
        type="file"
        accept=".json"
        ref={fileInputRef}
        onChange={handleFileChange}
        className="hidden"
      />
      <UploadCloud size={48} className="mx-auto mb-4 text-gray-500" />
      <p className="text-text-secondary">
        Drag & drop your JSON file here, or{' '}
        <span className="text-accent-cyan font-semibold">click to browse</span>.
      </p>
    </div>
  );
};

export default JsonUploadButton;


===== frontend/src/components/graph/GraphCanvas.tsx =====
import React from 'react';

const GraphCanvas: React.FC = () => {
  console.log("GraphCanvas component is rendering (ultra-simple version)");

  return (
    <div
      style={{
        width: '100%',
        height: '100%', // asegura que este div intente llenar a su padre
        backgroundColor: 'rgba(0, 255, 0, 0.3)', // verde brillante, semi-transparente
        border: '5px dashed hotpink', // borde rosa brillante y discontinuo
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        color: 'white', // color de texto blanco para contraste
        fontSize: '2rem',
        padding: '20px',
      }}
      className="debug-border-canvas" // si tienes esta clase para depurar
    >
      GraphCanvas Test - ¿Puedes ver esto?
    </div>
  );
};

export default GraphCanvas;


===== frontend/src/components/graph/CompanyNode.tsx =====
import React, { memo, useState } from 'react';
import { Handle, Position, NodeProps } from 'reactflow';
import { Building, ImagePlus } from 'lucide-react';
import classnames from 'classnames';

export interface CompanyNodeData {
  name: string;
  location?: string;
  logoUrl?: string;
  onImageUpload?: (nodeId: string, file: File) => void;
  isHighlighted?: boolean;
}

const CompanyNode: React.FC<NodeProps<CompanyNodeData>> = ({ data, id, selected }) => {
  const [logoSrc, setLogoSrc] = useState<string | undefined>(data.logoUrl);
  const [isUploading, setIsUploading] = useState(false);

  const handleImageError = () => {
    setLogoSrc(undefined);
  };

  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {
    if (event.target.files && event.target.files[0] && data.onImageUpload) {
      const file = event.target.files[0];
      setIsUploading(true);
      try {
        await data.onImageUpload(id, file);
        const reader = new FileReader();
        reader.onloadend = () => {
          setLogoSrc(reader.result as string);
        };
        reader.readAsDataURL(file);
      } catch (error) {
        console.error("Logo upload failed:", error);
      } finally {
        setIsUploading(false);
      }
    }
  };

  return (
    <div
      className={classnames(
        'rounded-lg w-40 p-3 flex flex-col items-center justify-center text-center shadow-lg relative',
        'bg-node-company-bg border-2',
        selected || data.isHighlighted ? 'border-accent-cyan shadow-node-glow' : 'border-node-company-border',
        'transition-all duration-300'
      )}
    >
      <Handle type="target" position={Position.Left} className="!bg-accent-cyan w-3 h-3" />
      <div className="w-16 h-16 rounded-md overflow-hidden border-2 border-white/30 mb-2 relative group">
        {logoSrc ? (
          <img src={logoSrc} alt={data.name} className="w-full h-full object-contain p-1" onError={handleImageError} />
        ) : (
          <Building className="w-full h-full text-node-company-border p-2" />
        )}
        {data.onImageUpload && (
          <label
            htmlFor={`upload-logo-${id}`}
            className="absolute inset-0 bg-black/50 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity cursor-pointer"
          >
            <ImagePlus size={24} className="text-white" />
            <input
              type="file"
              id={`upload-logo-${id}`}
              accept="image/*"
              className="hidden"
              onChange={handleFileChange}
              disabled={isUploading}
            />
          </label>
        )}
      </div>

      <div className="text-sm font-bold text-text-primary truncate w-full">{data.name}</div>
      {data.location && <div className="text-xs text-text-secondary truncate w-full">{data.location}</div>}

      <Handle type="source" position={Position.Right} className="!bg-accent-cyan w-3 h-3" />
      {isUploading && <div className="absolute bottom-1 left-1 text-xs text-accent-cyan">Uploading...</div>}
    </div>
  );
};

export default memo(CompanyNode);


===== frontend/src/components/FileUploader.js =====
import React from 'react';

function FileUploader() {
  const handleFileUpload = (event) => {
    const file = event.target.files[0];
    console.log(file);
  };

  return (
    <div>
      <input type="file" onChange={handleFileUpload} />
    </div>
  );
}

export default FileUploader;


===== frontend/src/components/GraphDisplay.js =====
import React from 'react';
import { Network } from 'vis-network';

function GraphDisplay() {
  React.useEffect(() => {
    const container = document.getElementById('graph');
    const data = {
      nodes: [
        { id: 1, label: 'Node 1' },
        { id: 2, label: 'Node 2' }
      ],
      edges: [
        { from: 1, to: 2 }
      ]
    };
    const options = {};
    new Network(container, data, options);
  }, []);

  return <div id="graph" style={{ height: '500px' }}></div>;
}

export default GraphDisplay;


===== frontend/src/components/LoginForm.js =====
import React, { useState } from 'react';
import "../assets/css/styles.css";

function LoginForm() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');

  const handleSubmit = (event) => {
    event.preventDefault();
    console.log({ username, password });
  };

  return (
    <div className="login">
      <form className="login__form" onSubmit={handleSubmit}>
        <h1 className="login__title">Login</h1>
        <div className="login__content">
          <div className="login__box">
            <i className="login__icon ri-user-line"></i>
            <input
              type="text"
              className="login__input"
              placeholder=" "
              value={username}
              onChange={(e) => setUsername(e.target.value)}
            />
            <label className="login__label">Username</label>
          </div>
          <div className="login__box">
            <i className="login__icon ri-lock-line"></i>
            <input
              type="password"
              className="login__input"
              placeholder=" "
              value={password}
              onChange={(e) => setPassword(e.target.value)}
            />
            <label className="login__label">Password</label>
          </div>
        </div>
        <button type="submit" className="login__button">Login</button>
        <p className="login__register">
          Don't have an account? <a href="#">Register</a>
        </p>
      </form>
    </div>
  );
}

export default LoginForm;


===== frontend/src/components/NodeDetailPanel.js =====
import React from 'react';

function NodeDetailPanel() {
  return (
    <div>
      <h2>Node Details</h2>
      <p>Select a node to see details here.</p>
    </div>
  );
}

export default NodeDetailPanel;


===== frontend/public/index.html =====
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>nodex</title>
</head>
<body>
  <div id="root"></div>
</body>
</html>


===== frontend/Dockerfile =====
FROM node:18-alpine

WORKDIR /app

COPY package.json ./
COPY package-lock.json ./
COPY tsconfig.json ./
COPY eslint.config.mjs ./

RUN npm install --verbose

EXPOSE 3000

CMD ["npm", "start"]



===== backend/app/__init__.py =====


===== backend/app/models.py =====
from pydantic import BaseModel
from typing import Optional, List, Dict, Any

class Token(BaseModel):
    access_token: str
    token_type: str

class TokenData(BaseModel):
    username: Optional[str] = None

class User(BaseModel):
    username: str
    email: Optional[str] = None
    full_name: Optional[str] = None
    disabled: Optional[bool] = None

class UserInDB(User):
    hashed_password: str

class Node(BaseModel):
    label: str
    properties: dict

# Puedes añadir más modelos para representar la estructura de tus nodos si es necesario
# class PersonNode(BaseModel):
#     curp: str
#     nombre_completo: str
#     # ... otros campos


===== backend/app/auth.py =====
import os
from datetime import datetime, timedelta
from typing import Optional, Dict
from jose import JWTError, jwt
from passlib.context import CryptContext
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer

from . import models

# Configuración (mejor en variables de entorno)
JWT_SECRET_KEY = os.getenv("JWT_SECRET_KEY", "supersecretkey") # CAMBIA ESTO EN PRODUCCIÓN
ALGORITHM = os.getenv("ALGORITHM", "HS256")
ACCESS_TOKEN_EXPIRE_MINUTES = int(os.getenv("ACCESS_TOKEN_EXPIRE_MINUTES", 30))

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

# Base de datos de usuarios en memoria (SOLO PARA PoC)
fake_users_db: Dict[str, models.UserInDB] = {}

def init_fake_users_db():
    # Crear un usuario de ejemplo
    hashed_password = get_password_hash("testpassword")
    fake_users_db["testuser"] = models.UserInDB(
        username="testuser",
        email="testuser@example.com",
        full_name="Test User",
        hashed_password=hashed_password,
        disabled=False
    )

def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password):
    return pwd_context.hash(password)

def authenticate_user(db: dict, username: str, password: str) -> Optional[models.User]:
    user_in_db = db.get(username)
    if not user_in_db:
        return None
    if not verify_password(password, user_in_db.hashed_password):
        return None
    return models.User(**user_in_db.dict())

def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=15)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, JWT_SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

async def get_current_user(token: str = Depends(oauth2_scheme)) -> models.User:
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, JWT_SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
        token_data = models.TokenData(username=username)
    except JWTError:
        raise credentials_exception
    
    user_dict = fake_users_db.get(token_data.username)
    if user_dict is None:
        raise credentials_exception
    user = models.User(**user_dict.dict()) # Convert UserInDB to User
    return user

async def get_current_active_user(current_user: models.User = Depends(get_current_user)):
    if current_user.disabled:
        raise HTTPException(status_code=400, detail="Inactive user")
    return current_user


===== backend/app/crud.py =====
from neo4j import AsyncGraphDatabase
import os
from typing import Dict, Any, Tuple, List

NEO4J_URI = os.getenv("NEO4J_URI", "bolt://localhost:7687")
NEO4J_USER = os.getenv("NEO4J_USER", "neo4j")
NEO4J_PASSWORD = os.getenv("NEO4J_PASSWORD", "password")

driver = None

def init_db_connection():
    global driver
    driver = AsyncGraphDatabase.driver(NEO4J_URI, auth=(NEO4J_USER, NEO4J_PASSWORD))

def close_db_connection():
    if driver:
        driver.close()

async def process_and_store_json(data: Dict[str, Any]):
    async with driver.session() as session:
        # Implementar lógica para procesar y almacenar datos JSON en Neo4j
        pass

async def get_all_graph_data() -> Tuple[List[Dict], List[Dict]]:
    async with driver.session() as session:
        result = await session.run("""
            MATCH (n)
            OPTIONAL MATCH (n)-[r]->(m)
            RETURN n, r, m
        """)
        
        nodes_dict = {}
        relationships_list = []

        async for record in result:
            node_n = record["n"]
            if node_n:
                node_id = node_n.element_id
                if node_id not in nodes_dict:
                    props = dict(node_n.items())
                    label = list(node_n.labels)[0] if node_n.labels else "Unknown"
                    nodes_dict[node_id] = {
                        "id": node_id,
                        "label": props.get("nombreCompleto", node_id),
                        "group": label,
                        "properties": props
                    }

            rel = record["r"]
            if rel:
                relationships_list.append({
                    "id": rel.element_id,
                    "from": rel.start_node.element_id,
                    "to": rel.end_node.element_id,
                    "label": rel.type,
                    "properties": dict(rel.items())
                })
        
        return list(nodes_dict.values()), relationships_list

async def get_node_properties(node_element_id: str) -> Dict:
    async with driver.session() as session:
        query = """
        MATCH (n) WHERE elementId(n) = $node_element_id
        RETURN properties(n) as props, labels(n) as labels
        """
        result = await session.run(query, node_element_id=node_element_id)
        record = await result.single()
        if record:
            return {"properties": record["props"], "labels": record["labels"]}
        return None


===== backend/app/main.py =====
import logging

# Silenciar el warning específico de passlib sobre la versión de bcrypt
logging.getLogger('passlib').setLevel(logging.ERROR)

from fastapi import FastAPI, File, UploadFile, Depends, HTTPException, status
from fastapi.security import OAuth2PasswordRequestForm
from fastapi.middleware.cors import CORSMiddleware
import json
from typing import Any, Dict, List
from datetime import timedelta
from fastapi.responses import JSONResponse

from . import crud, models, auth

app = FastAPI(title="SIVG Backend")

# Configuración CORS (permitir peticiones desde el frontend)
origins = [
    "http://localhost:4545", # Puerto del frontend
    "http://localhost:3000", # Puerto de desarrollo de React
    "http://192.168.0.4:4545", # Nueva IP añadida
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.on_event("startup")
async def startup_event():
    crud.init_db_connection()
    # Opcional: Crear constraints/indexes en Neo4j al inicio
    # await crud.create_constraints()

@app.on_event("shutdown")
async def shutdown_event():
    crud.close_db_connection()

@app.options("/token")
async def options_token():
    return JSONResponse(status_code=200, content={"message": "CORS preflight successful"})

@app.post("/token", response_model=models.Token)
async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):
    user = auth.authenticate_user(auth.fake_users_db, form_data.username, form_data.password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    access_token_expires = timedelta(minutes=auth.ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = auth.create_access_token(
        data={"sub": user.username}, expires_delta=access_token_expires
    )
    return {"access_token": access_token, "token_type": "bearer"}

@app.get("/users/me/", response_model=models.User)
async def read_users_me(current_user: models.User = Depends(auth.get_current_active_user)):
    return current_user

@app.post("/upload-json/")
async def upload_json_file(
    file: UploadFile = File(...),
    current_user: models.User = Depends(auth.get_current_active_user) # Proteger endpoint
):
    try:
        contents = await file.read()
        data = json.loads(contents)
    except json.JSONDecodeError:
        raise HTTPException(status_code=400, detail="Invalid JSON file")
    except Exception:
        raise HTTPException(status_code=500, detail="Error reading file")
    finally:
        await file.close()

    # Aquí llamas a la función que procesa el JSON y lo guarda en Neo4j
    try:
        await crud.process_and_store_json(data)
        return {"message": "JSON processed and data stored successfully."}
    except Exception as e:
        # Log the error e
        print(f"Error processing JSON: {e}")
        raise HTTPException(status_code=500, detail=f"Error processing JSON data: {str(e)}")

@app.get("/graph-data/")
async def get_graph_data(
    current_user: models.User = Depends(auth.get_current_active_user) # Proteger endpoint
):
    # Llama a una función en crud.py para obtener nodos y relaciones
    nodes, relationships = await crud.get_all_graph_data()
    return {"nodes": nodes, "edges": relationships}

@app.get("/node-details/{node_id}")
async def get_node_details(
    node_id: str, # O int, dependiendo de cómo identifiques tus nodos
    current_user: models.User = Depends(auth.get_current_active_user)
):
    details = await crud.get_node_properties(node_id)
    if not details:
        raise HTTPException(status_code=404, detail="Node not found")
    return details

# Inicializar la base de datos de usuarios falsos (para PoC)
auth.init_fake_users_db()


===== backend/sample_data.json =====
{
    "nodes": [
        {"label": "Person", "properties": {"name": "Alice", "age": 30}},
        {"label": "Person", "properties": {"name": "Bob", "age": 25}}
    ],
    "relationships": [
        {"start": "Alice", "end": "Bob", "type": "KNOWS"}
    ]
}


===== backend/requirements.txt =====
fastapi
uvicorn[standard]
neo4j
pydantic
python-jose[cryptography]
passlib[bcrypt]
python-multipart
bcrypt==4.0.1  # Fixed bcrypt version to avoid compatibility issues


===== backend/Dockerfile =====
FROM python:3.9-slim

WORKDIR /app

COPY requirements.txt requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]


===== docker-compose.yml =====
version: '3.8'

services:
  neo4j:
    image: neo4j:4.4
    container_name: nodex_neo4j_v3  # Renamed container
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
    environment:
      - NEO4J_AUTH=neo4j/yourStrongPassword
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes

  backend:
    build: ./backend
    container_name: nodex_backend_v3  # Renamed container
    ports:
      - "0.0.0.0:8000:8000"
    volumes:
      - ./backend/app:/app/app
      - ./backend/sample_data.json:/app/sample_data.json
    depends_on:
      - neo4j
    environment:
      - NEO4J_URI=bolt://nodex_neo4j_v3:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=yourStrongPassword
      - JWT_SECRET_KEY=tu_super_secreto_jwt
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30

  frontend:
    build: ./frontend
    container_name: nodex_frontend_v3  # Renamed container
    ports:
      - "0.0.0.0:4545:3000"
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    stdin_open: true
    tty: true
    depends_on:
      - backend
    environment:
      - WDS_SOCKET_HOST=0.0.0.0
      - WDS_SOCKET_PORT=4545
      - WDS_SOCKET_PATH=/ws

volumes:
  neo4j_data:


===== frontend/Dockerfile =====
FROM node:18-alpine

WORKDIR /app

COPY package.json ./
COPY package-lock.json ./
COPY tsconfig.json ./
COPY eslint.config.mjs ./

RUN npm install --verbose

EXPOSE 3000

CMD ["npm", "start"]



