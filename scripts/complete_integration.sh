#!/bin/bash
set -euo pipefail

# Configuraci√≥n b√°sica
MAIN_BRANCH="main"
DEVELOP_BRANCH="dev"

echo "üöÄ Iniciando integraci√≥n completa de ramas en '$MAIN_BRANCH' y '$DEVELOP_BRANCH'"

git add .
git commit -m "Integraci√≥n autom√°tica de dev en main" || echo "No hay cambios para integrar."

# Funci√≥n para detectar si rama termina en /test
is_test_branch() {
  [[ "$1" =~ /test$ ]]
}

# Funci√≥n para obtener la rama base (antes de /test)
base_branch_of_test() {
  echo "${1%/test}"
}

# Funci√≥n para hacer commit si hay cambios pendientes
commit_if_dirty() {
  local branch=$1
  if ! git diff-index --quiet HEAD --; then
    echo "üíæ Cambios pendientes detectados en $branch"
    read -rp "Mensaje para commit (deja vac√≠o para 'WIP: commit autom√°tico en $branch'): " msg
    msg=${msg:-"WIP: commit autom√°tico en $branch"}
    git add .
    git commit -m "$msg"
  fi
}

# Funci√≥n para actualizar una rama con la √∫ltima versi√≥n remota
update_branch() {
  local branch_name=$1 # Renombrado para evitar conflicto con la variable global 'branch' en loops
  git checkout "$branch_name"
  echo "üîÑ Actualizando $branch_name con la versi√≥n remota..."
  # Asegurar que se haga fetch antes de pull para tener las refs remotas actualizadas
  git fetch origin "$branch_name"
  git pull origin "$branch_name"
}


# Detectar todas las ramas locales inicialmente
mapfile -t initial_local_branches < <(git for-each-ref --format='%(refname:short)' refs/heads/)

echo "üîç Ramas locales detectadas inicialmente:"
printf -- ' - %s\n' "${initial_local_branches[@]}"

# Primero integrar ramas test (que terminan en /test) en sus ramas base
echo ""
echo "--- Etapa 1: Integrando ramas '*/test' en sus ramas base ---"
for branch in "${initial_local_branches[@]}"; do
  if is_test_branch "$branch"; then
    base_branch=$(base_branch_of_test "$branch")
    echo "üîÄ Preparando para integrar rama test '$branch' en su base '$base_branch'"

    # Verificar que base exista
    if ! git show-ref --verify --quiet "refs/heads/$base_branch"; then
      echo "‚ö†Ô∏è La rama base '$base_branch' no existe localmente. Intentando traerla de origin..."
      if ! git fetch origin "$base_branch":"$base_branch"; then
        echo "‚ùå No se pudo obtener '$base_branch' de origin. Saltando integraci√≥n de '$branch'."
        continue
      fi
      echo "‚úÖ Rama base '$base_branch' tra√≠da de origin."
    fi

    git checkout "$branch"
    commit_if_dirty "$branch"
    echo "üì§ Subiendo cambios de '$branch' a origin..."
    git push origin "$branch"

    run_tests "$branch"

    echo "üîÑ Haciendo merge de '$branch' en '$base_branch'..."
    git checkout "$base_branch"
    update_branch "$base_branch" # Asegurar que la base est√© actualizada antes del merge
    if ! git merge --no-ff "$branch" -m "Merge rama test $branch en base $base_branch"; then
      echo "‚ùå Conflictos detectados al hacer merge de '$branch' en '$base_branch'."
      echo "   Por favor, resuelve los conflictos manualmente en otra terminal y haz commit en '$base_branch'."
      echo "   El script saldr√° para que puedas manejar la situaci√≥n."
      exit 1
    fi
    echo "üì§ Subiendo '$base_branch' actualizada a origin..."
    git push origin "$base_branch"

    echo "üóëÔ∏è ¬øEliminar rama test '$branch' local y remota? (s/n): "
    read -r del_test
    if [[ "$del_test" == "s" ]]; then
      git branch -d "$branch"
      if git ls-remote --exit-code --heads origin "$branch" > /dev/null 2>&1; then
        git push origin --delete "$branch"
        echo "‚úÖ Rama test '$branch' eliminada local y remotamente."
      else
        echo "‚úÖ Rama test '$branch' eliminada localmente (no encontrada en origin)."
      fi
    else
      echo "‚ÑπÔ∏è Rama test '$branch' conservada."
    fi
  fi
done

# Actualizar lista de ramas porque algunas ramas test pudieron ser eliminadas/actualizadas.
# Obtenemos TODAS las ramas locales actuales.
echo ""
echo "--- Etapa 2: Integrando ramas adicionales en '$DEVELOP_BRANCH' ---"
mapfile -t current_remaining_branches < <(git for-each-ref --format='%(refname:short)' refs/heads/)
echo "üîç Ramas actualmente existentes para considerar integraci√≥n en '$DEVELOP_BRANCH':"
printf -- ' - %s\n' "${current_remaining_branches[@]}"

for branch in "${current_remaining_branches[@]}"; do
  if [[ "$branch" == "$DEVELOP_BRANCH" || "$branch" == "$MAIN_BRANCH" ]]; then
    echo "‚ÑπÔ∏è Omitiendo '$branch' (es '$DEVELOP_BRANCH' o '$MAIN_BRANCH') de la integraci√≥n en '$DEVELOP_BRANCH' en esta etapa."
    continue
  fi

  # Cualquier otra rama $branch ser√° procesada para integrarse en $DEVELOP_BRANCH
  echo "üîÄ Preparando para integrar la rama '$branch' en '$DEVELOP_BRANCH'"

  # Asegurar que DEVELOP_BRANCH est√© actualizada ANTES de cada ciclo de integraci√≥n de rama.
  update_branch "$DEVELOP_BRANCH"

  # Preparar rama '$branch'
  git checkout "$branch"
  commit_if_dirty "$branch"
  echo "üì§ Subiendo cambios de '$branch' a origin (pre-rebase)..."
  # Intentar push; si falla porque no tiene upstream, configurarlo.
  if ! git push origin "$branch" 2>/dev/null; then
    echo "‚ÑπÔ∏è Push inicial fall√≥ (posiblemente nueva rama local). Intentando con --set-upstream..."
    git push --set-upstream origin "$branch"
  fi
  
  echo "üîÑ Actualizando '$branch' con los √∫ltimos cambios de '$DEVELOP_BRANCH' (usando rebase)..."
  if ! git rebase "$DEVELOP_BRANCH"; then
    echo "‚ùå El rebase de '$branch' sobre '$DEVELOP_BRANCH' fall√≥."
    echo "   Por favor, resuelve los conflictos manualmente en otra terminal."
    echo "   Una vez resueltos, ejecuta 'git rebase --continue'."
    echo "   Si deseas abortar el rebase, ejecuta 'git rebase --abort'."
    echo "   El script saldr√° para que puedas manejar la situaci√≥n."
    exit 1 # Exit for manual conflict resolution
  fi
  echo "üì§ Subiendo '$branch' rebaseada a origin (con --force-with-lease)..."
  git push origin "$branch" --force-with-lease # Push rebased branch

  # Volver a dev para hacer merge
  git checkout "$DEVELOP_BRANCH"
  # DEVELOP_BRANCH ya est√° actualizada localmente debido al update_branch al inicio de este ciclo.
  
  echo "üîó Haciendo merge (no-ff) de '$branch' en '$DEVELOP_BRANCH'..."
  if ! git merge --no-ff "$branch" -m "Merge $branch en $DEVELOP_BRANCH"; then
    echo "‚ùå Conflictos detectados al hacer merge de '$branch' en '$DEVELOP_BRANCH'."
    echo "   Por favor, resuelve los conflictos manualmente en otra terminal y haz commit en '$DEVELOP_BRANCH'."
    echo "   El script saldr√° para que puedas manejar la situaci√≥n."
    exit 1 # Exit for manual conflict resolution
  fi
  echo "üì§ Subiendo '$DEVELOP_BRANCH' actualizada a origin..."
  git push origin "$DEVELOP_BRANCH"

  echo "üóëÔ∏è ¬øEliminar rama '$branch' local y remota despu√©s de la integraci√≥n? (s/n): "
  read -r del_branch
  if [[ "$del_branch" == "s" ]]; then
    git branch -d "$branch"
    if git ls-remote --exit-code --heads origin "$branch" > /dev/null 2>&1; then
      git push origin --delete "$branch"
      echo "‚úÖ Rama '$branch' eliminada local y remotamente."
    else
      echo "‚úÖ Rama '$branch' eliminada localmente (no se encontr√≥ en origin o ya fue eliminada remotamente)."
    fi
  else
    echo "‚ÑπÔ∏è Rama '$branch' conservada."
  fi
done

# Finalmente integrar dev en main
echo ""
echo "--- Etapa 3: Integrando '$DEVELOP_BRANCH' en '$MAIN_BRANCH' ---"
echo "üîÄ Integrando '$DEVELOP_BRANCH' en '$MAIN_BRANCH'..."

update_branch "$MAIN_BRANCH"
update_branch "$DEVELOP_BRANCH" # Asegurarse que dev tambi√©n est√° lo m√°s reciente posible

git checkout "$MAIN_BRANCH"

if ! git merge --no-ff "$DEVELOP_BRANCH" -m "Merge $DEVELOP_BRANCH en $MAIN_BRANCH"; then
  echo "‚ùå Conflictos detectados al integrar '$DEVELOP_BRANCH' en '$MAIN_BRANCH'."
  echo "   Por favor, resuelve los conflictos manualmente en otra terminal y haz commit en '$MAIN_BRANCH'."
  echo "   El script saldr√° para que puedas manejar la situaci√≥n."
  exit 1
fi
echo "üì§ Subiendo '$MAIN_BRANCH' actualizada a origin..."
git push origin "$MAIN_BRANCH"

# Posicionarse en dev al final
git checkout "$DEVELOP_BRANCH"
echo ""
echo "üéâ Integraci√≥n completa terminada. Est√°s en la rama '$DEVELOP_BRANCH'."