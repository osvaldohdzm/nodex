===== frontend/tsconfig.json =====
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "baseUrl": "src",
    "paths": {
      "@components/*": [
        "components/*"
      ],
      "@styles/*": [
        "styles/*"
      ],
      "@utils/*": [
        "utils/*"
      ]
    },
    "typeRoots": ["./node_modules/@types", "./src/types"] // Added ./src/types for custom type definitions
  },
  "include": [
    "src", // Standard include
    "src/types" // Include custom types directory if you create one (e.g., src/types/custom.d.ts)
  ],
  "exclude": ["node_modules"] // Standard exclude
}

===== frontend/craco.config.js =====
const path = require('path');

module.exports = {
  webpack: {
    alias: {
      '@components': path.resolve(__dirname, 'src/components'),
      '@styles': path.resolve(__dirname, 'src/styles'),
      '@utils': path.resolve(__dirname, 'src/utils'),
    },
  },
};


===== frontend/postcss.config.js =====
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};


===== frontend/.babelrc =====
{
  "presets": ["react-app"],
  "plugins": ["@babel/plugin-proposal-nullish-coalescing-operator"]
}


===== frontend/eslint.config.mjs =====
// eslint.config.mjs
import globals from "globals"; 
import pluginJs from "@eslint/js"; // Renamed to avoid conflict if you meant something else by 'js' 
import pluginReact from "eslint-plugin-react"; 
import pluginReactHooks from "eslint-plugin-react-hooks"; // Added this 
import { defineConfig } from "eslint/config"; // Keep if using ESLint v9+ style 
 
export default defineConfig([ 
  { 
    files: ["src/**/*.{js,jsx,ts,tsx}"], // Apply to all relevant files in src 
    plugins: { 
      react: pluginReact, 
      "react-hooks": pluginReactHooks, // Register the plugin 
    }, 
    languageOptions: { 
      globals: globals.browser, 
      ecmaVersion: 2021, 
      sourceType: 'module', 
      parserOptions: { 
        ecmaFeatures: { 
          jsx: true, 
        }, 
      }, 
    }, 
    rules: { 
      ...pluginJs.configs.recommended.rules, // Basic JS rules 
      ...pluginReact.configs.recommended.rules, // React specific rules 
      ...pluginReactHooks.configs.recommended.rules, // Rules for Hooks 
      "react/react-in-jsx-scope": "off", // Not needed with new JSX transform 
      "react/jsx-uses-react": "off",    // Not needed with new JSX transform 
      "no-unused-vars": ["warn", { "argsIgnorePattern": "^_" }], // Warn on unused vars 
    }, 
    settings: { 
      react: { 
        version: "detect", // Automatically detect React version 
      }, 
    }, 
  } 
]);


===== frontend/tailwind.config.js =====
/** @type {import('tailwindcss').Config} */
const plugin = require('tailwindcss/plugin');

module.exports = {
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx}',
    './src/components/**/*.{js,ts,jsx,tsx}',
    './src/app/**/*.{js,ts,jsx,tsx}',
  ],
  theme: {
    extend: {
      colors: {
        'bg-primary': 'var(--bg-primary)',
        'bg-secondary': 'var(--bg-secondary)',
        'bg-tertiary': 'var(--bg-tertiary)',
        'border-primary': 'var(--border-primary)',
        'border-secondary': 'var(--border-secondary)',
        'text-primary': 'var(--text-primary)',
        'text-secondary': 'var(--text-secondary)',
        'accent-main': 'var(--accent-main)',
        'accent-main-glow': 'var(--accent-main-glow)',
        'accent-warn': 'var(--accent-warn)',
        'accent-danger': 'var(--accent-danger)',
      },
      fontFamily: {
        sans: ['IBM Plex Sans', 'system-ui', '-apple-system', 'sans-serif'],
        mono: ['IBM Plex Mono', 'monospace'],
      },
      boxShadow: {
        'glow-sm': '0 0 4px var(--accent-main-glow)',
        'glow': '0 0 8px var(--accent-main-glow)',
        'glow-lg': '0 0 12px var(--accent-main-glow)',
        'glow-xl': '0 0 16px var(--accent-main-glow)',
      },
      animation: {
        'pulse-slow': 'pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite',
        'scan': 'scan 2s linear infinite',
      },
      keyframes: {
        scan: {
          '0%': { transform: 'translateY(-100%)' },
          '100%': { transform: 'translateY(100%)' },
        },
      },
    },
  },
  plugins: [
    require('tailwind-scrollbar'),
    plugin(function({ addUtilities, theme }) {
      addUtilities({
        '.frosted-glass': {
          'background-color': 'rgba(13, 17, 23, 0.75)',
          'backdrop-filter': 'blur(10px)',
          '-webkit-backdrop-filter': 'blur(10px)',
          'border': `1px solid ${theme('colors.border-primary')}`,
        },
        '.bg-grid': {
          'background-image': `linear-gradient(${theme('colors.border-primary')} 1px, transparent 1px), linear-gradient(to right, ${theme('colors.border-primary')} 1px, transparent 1px)`,
          'background-size': '2rem 2rem',
        },
        '.chamfer-clip': {
          'clip-path': 'polygon(10px 0, calc(100% - 10px) 0, 100% 10px, 100% calc(100% - 10px), calc(100% - 10px) 100%, 10px 100%, 0 calc(100% - 10px), 0 10px)',
        },
      });
    }),
  ],
};


===== frontend/src/styles/globals.css =====
/* Tailwind CSS base styles */
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  /* -- BASES TÁCTICAS -- */
  --bg-primary: #010409; /* Negro con un matiz azul muy oscuro */
  --bg-secondary: #0D1117; /* Gris carbón-azulado para paneles */
  --bg-tertiary: #161B22; /* Capa interactiva para inputs */
  --border-primary: #21262d; /* Borde sutil */
  --border-secondary: #30363d; /* Borde más visible */

  /* -- TEXTOS -- */
  --text-primary: #c9d1d9; /* Blanco suave, no puro */
  --text-secondary: #8b949e; /* Gris para texto de apoyo */

  /* -- ACENTOS DE MISIÓN-CRÍTICA -- */
  --accent-main: #22a0f1; /* Azul controlado y profesional */
  --accent-main-glow: #38bdf8; /* Cian brillante para efectos de glow */
  --accent-warn: #facc15; /* Amarillo/Ámbar para advertencias */
  --accent-danger: #f87171; /* Rojo suave para errores */

  /* -- COMPONENTES: GRAFO -- */
  --node-bg: rgba(13, 17, 23, 0.85); /* Fondo de nodo con ligera transparencia */
  --node-border: var(--border-secondary);
  --node-border-selected: var(--accent-main-glow);
  --node-shadow-selected: 0 0 12px var(--accent-main-glow);
  --graph-bg: var(--bg-primary);
  --edge-default-color: var(--border-secondary);
  --edge-selected-color: var(--accent-main-glow);

  /* Consolidated CSS variables */
  --input-bg: #1E293B;
  --input-border: #334155;
  --input-border-hover: #475569;

  /* Accent colors */
  --accent-cyan: #00E5FF;
  --accent-cyan-darker: #00B8CC;
  --accent-green: #34D399;
  --accent-pink: #F472B6;
  --accent-purple: #A78BFA;
  --accent-orange: #FBBF24;
  --accent-red: #EF4444;
  --accent-yellow: #FBBF24;

  /* Menu colors - Updated for dark theme */
  --menu-bg: var(--bg-secondary);
  --menu-border: var(--input-border);
  --menu-text: var(--text-primary);
  --menu-text-secondary: var(--text-secondary);
  --menu-hover-bg: var(--input-bg);
  --menu-hover-text: var(--accent-cyan);
  --menu-active-bg: var(--input-bg);
  --menu-active-text: var(--accent-cyan);

  --node-text: var(--text-primary);
  --node-text-secondary: var(--text-secondary);
  --node-icon-color: var(--accent-cyan);

  --edge-label-color: var(--text-secondary);
}

body, #root, .App {
  background-color: var(--bg-primary);
  color: var(--text-primary);
  font-family: 'IBM Plex Sans', system-ui, -apple-system, sans-serif;
  margin: 0;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.react-flow__minimap {
  background-color: var(--bg-secondary) !important;
  border: 1px solid var(--input-border) !important;
}

.react-flow__controls-button {
  background-color: var(--bg-secondary) !important;
  border-bottom: 1px solid var(--input-border) !important;
  color: var(--text-secondary) !important;
  fill: var(--text-secondary) !important;
}
.react-flow__controls-button:hover {
  background-color: var(--input-bg) !important;
}

.react-flow__edge-text {
  font-size: 12px;
  font-weight: 500;
  fill: var(--edge-label-color);
  paint-order: stroke;
  stroke: var(--graph-bg);
  stroke-width: 4px;
  stroke-linecap: round;
  stroke-linejoin: round;
}

.react-flow__attribution { 
  display: none; 
}

/* Consolidated scrollbar styles */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

::-webkit-scrollbar-track {
  background: var(--bg-secondary);
  border-radius: 4px;
}

::-webkit-scrollbar-thumb {
  background: var(--input-border);
  border-radius: 4px;
  border: 2px solid var(--bg-secondary);
}

::-webkit-scrollbar-thumb:hover {
  background: var(--accent-cyan-darker);
}

/* Ensure proper sizing for the graph container */
/* Esta clase es buena, la usaremos */
.graph-container {
  width: 100%;
  /* height: 100%; Let flex-grow determine height */
  min-height: 300px; /* Fallback minimum height */
  position: relative; /* Important for ReactFlow's positioning context */
}

/* React Flow specific styles */
.react-flow__minimap {
  background-color: var(--bg-secondary) !important;
  border: 1px solid var(--input-border) !important;
  border-radius: 4px;
}
.react-flow__controls-button {
  background-color: var(--bg-secondary) !important;
  border-bottom: 1px solid var(--input-border) !important;
  color: var(--text-secondary) !important;
  fill: var(--text-secondary) !important;
  box-shadow: none !important;
}
.react-flow__controls-button:hover {
  background-color: var(--input-bg) !important;
}
.react-flow__attribution {
  display: none;
}

/* Estilo para las aristas */
.react-flow__edge-path {
  stroke-width: 1.5;
}
.react-flow__edge.selected .react-flow__edge-path,
.react-flow__edge:hover .react-flow__edge-path {
  stroke: var(--edge-selected-color); /* Corregido */
}

/* React Flow handle styles */
.react-flow__handle {
  width: 10px !important;
  height: 10px !important;
  border-radius: 3px !important;
  z-index: 10 !important;
  transition: all 0.2s ease !important;
  opacity: 0.6 !important;
  background-color: var(--accent-cyan) !important; /* Default, can be overridden */
  border: 2px solid var(--bg-secondary) !important;
}

.react-flow__handle:hover,
.react-flow__node:hover .react-flow__handle,
.react-flow__node.react-flow__node-dragging .react-flow__handle {
  transform: scale(1.3) !important;
  opacity: 1 !important;
}

.react-flow__handle-connecting {
  transform: scale(1.4) !important;
  opacity: 1 !important;
}

/* Specific handle type styles */
.react-flow__handle.handle-source {
  background-color: var(--accent-pink) !important;
}
.react-flow__handle.handle-source:hover {
  box-shadow: 0 0 6px var(--accent-pink) !important;
}
.react-flow__handle.handle-source.react-flow__handle-connecting {
  background-color: var(--accent-pink) !important;
  box-shadow: 0 0 8px var(--accent-pink) !important;
}

.react-flow__handle.handle-target {
  background-color: var(--accent-green) !important;
}
.react-flow__handle.handle-target:hover {
  box-shadow: 0 0 6px var(--accent-green) !important;
}
.react-flow__handle.handle-target.react-flow__handle-connecting {
  background-color: var(--accent-green) !important;
  box-shadow: 0 0 8px var(--accent-green) !important;
}

/* Ensure connection line is visible and styled */
.react-flow__connection-path,
.react-flow__connectionline {
  stroke: var(--accent-cyan) !important;
  stroke-width: 2.5 !important;
  z-index: 9 !important; /* Below handles but above other elements */
}

/* Node selection style */
.react-flow__node.selected > div {
  border-color: var(--node-border-selected) !important;
  box-shadow: var(--node-shadow-selected) !important;
}

/* Edge selection style */
.react-flow__edge.selected .react-flow__edge-path,
.react-flow__edge:hover .react-flow__edge-path {
  stroke: var(--edge-selected-color) !important;
  stroke-width: 2.5 !important;
}

@keyframes nodeEnterAnimation {
  0% {
    transform: scale(0.3) translateZ(0);
    opacity: 0;
  }
  70% {
    transform: scale(1.1) translateZ(0);
    opacity: 0.9;
  }
  100% {
    transform: scale(1) translateZ(0);
    opacity: 1;
  }
}

@keyframes edgeEnterAnimation {
  from {
    opacity: 0;
    stroke-dasharray: 2000;
    stroke-dashoffset: 2000;
  }
  to {
    opacity: 1;
    stroke-dashoffset: 0;
  }
}

.react-flow__node.node-appear {
  animation: nodeEnterAnimation 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275) forwards;
}

.react-flow__edge.edge-appear .react-flow__edge-path {
  animation: edgeEnterAnimation 0.4s ease-out forwards;
  animation-delay: 0.05s; 
}

.react-flow__edge.edge-appear-static .react-flow__edge-path {
  opacity: 1;
}

/* Node specific styles */
.person-node, .company-node {
  /* Default subtle glow */
  box-shadow: 0 0 5px rgba(var(--r-accent-cyan), var(--g-accent-cyan), var(--b-accent-cyan), 0.3),
              0 0 8px rgba(var(--r-accent-cyan), var(--g-accent-cyan), var(--b-accent-cyan), 0.2);
  transition: box-shadow 0.3s ease-in-out, border-color 0.3s ease-in-out;
}

.node-alert-style {
  border-color: var(--node-border-alert) !important;
  box-shadow: 0 0 8px rgba(var(--r-node-border-alert), var(--g-node-border-alert), var(--b-node-border-alert), 0.7),
              0 0 12px rgba(var(--r-node-border-alert), var(--g-node-border-alert), var(--b-node-border-alert), 0.5),
              0 0 0 2px var(--node-border-alert) inset !important;
  animation: pulse-border-alert 1.5s infinite ease-in-out;
}

.node-warning-style {
  border-color: var(--node-border-warning) !important;
  box-shadow: 0 0 8px var(--node-border-warning),
              0 0 12px var(--node-border-warning);
}

@keyframes pulse-border-alert {
  0%, 100% { 
    box-shadow: 0 0 8px rgba(var(--r-node-border-alert), var(--g-node-border-alert), var(--b-node-border-alert), 0.7),
                0 0 12px rgba(var(--r-node-border-alert), var(--g-node-border-alert), var(--b-node-border-alert), 0.5);
  }
  50% { 
    box-shadow: 0 0 12px rgba(var(--r-node-border-alert), var(--g-node-border-alert), var(--b-node-border-alert), 1),
                0 0 18px rgba(var(--r-node-border-alert), var(--g-node-border-alert), var(--b-node-border-alert), 0.7);
  }
}

/* Node content styles */
.node-content {
  width: 100%;
  overflow: hidden;
}

.detail-item {
  margin-top: 0.25rem;
  padding: 0.25rem;
  background: rgba(0, 0, 0, 0.2);
  border-radius: 0.25rem;
  font-size: 0.75rem;
  line-height: 1;
}

.detail-label {
  color: var(--accent-cyan);
  font-weight: 500;
}

.detail-value {
  color: var(--text-secondary);
  word-break: break-word;
}

/* Upload area styles */
.upload-area {
  border: 2px dashed var(--accent-cyan-darker);
  border-radius: 0.5rem;
  padding: 2rem;
  text-align: center;
  cursor: pointer;
  transition: all 0.2s ease-in-out;
}

.upload-area:hover {
  border-color: var(--accent-cyan);
  background: rgba(0, 229, 255, 0.05);
}

.upload-area:focus {
  outline: none;
  border-color: var(--accent-cyan);
  box-shadow: 0 0 0 2px rgba(0, 229, 255, 0.2);
}

/* Action buttons */
.graph-action-button {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.5rem 1rem;
  border-radius: 0.375rem;
  font-weight: 500;
  transition: all 0.2s ease-in-out;
}

.graph-action-button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.overwrite-button {
  background: var(--accent-red);
  color: white;
}

.overwrite-button:hover:not(:disabled) {
  background: #DC2626;
}

.merge-button {
  background: var(--accent-green);
  color: white;
}

.merge-button:hover:not(:disabled) {
  background: #059669;
}

/* Global styles */
@layer components {
  .frosted-glass {
    @apply bg-bg-secondary/75 backdrop-blur-md border border-border-primary;
  }

  .glow-main {
    box-shadow: 0 0 8px var(--accent-main-glow);
  }

  .bg-grid {
    background-image: 
      linear-gradient(var(--border-primary) 1px, transparent 1px),
      linear-gradient(to right, var(--border-primary) 1px, transparent 1px);
    background-size: 2rem 2rem;
  }

  .chamfer-clip {
    clip-path: polygon(
      10px 0,
      calc(100% - 10px) 0,
      100% 10px,
      100% calc(100% - 10px),
      calc(100% - 10px) 100%,
      10px 100%,
      0 calc(100% - 10px),
      0 10px
    );
  }
}

/* Selection styling */
::selection {
  background-color: rgba(34, 160, 241, 0.2); /* accent-main con 20% de opacidad */
  color: var(--text-primary);
}

/* Focus styles */
:focus-visible {
  @apply outline-none ring-2 ring-accent-main ring-offset-2 ring-offset-bg-primary;
}

/* Transitions */
.transition-smooth {
  transition-property: all;
  transition-duration: 300ms;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
}

/* Typography utilities */
.font-mono {
  font-family: 'IBM Plex Mono', monospace;
}

.tracking-wider {
  letter-spacing: 0.1em;
}

.tracking-widest {
  letter-spacing: 0.2em;
}

===== frontend/src/styles/GraphPage.css =====
/* frontend/src/styles/GraphPage.css */

.graph-page-container {
  display: flex;
  flex-direction: column;
  width: 100%;
  height: 100vh;
  min-height: 100vh;
  background-color: var(--bg-primary);
  color: var(--text-primary);
  overflow: hidden;
}

/* Barra superior */
.top-bar {
  display: flex;
  align-items: center;
  justify-content: space-between;
  width: 100%;
  padding: 0.5rem 1rem;
  background-color: var(--bg-secondary);
  border-bottom: 1px solid var(--input-border);
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  flex-shrink: 0;
  z-index: 10;
}

.top-menu-bar {
  display: flex !important;
  flex-direction: row !important;
  align-items: center !important;
}

/* Botones de acción */
.graph-action-button {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.5rem 1rem;
  font-size: 0.875rem;
  font-weight: 500;
  border-radius: 0.375rem;
  transition: all 0.2s ease;
  background-color: transparent;
  color: var(--text-primary);
  border: 1px solid transparent;
}

.graph-action-button:hover:not(:disabled) {
  background-color: var(--accent-cyan/10);
  color: var(--accent-cyan);
}

.graph-action-button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

/* Contenedor del grafo */
.graph-viewport-wrapper {
  width: 100%;
  height: 100%;
  position: relative;
  background-color: var(--graph-bg);
  border-radius: 0.5rem;
  overflow: hidden;
}

/* Panel de detalles */
.details-panel {
  display: flex;
  flex-direction: column;
  height: 100%;
  background-color: var(--bg-secondary);
  border-left: 1px solid var(--input-border);
  box-shadow: -2px 0 4px rgba(0, 0, 0, 0.1);
}

.details-panel-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0.75rem 1rem;
  border-bottom: 1px solid var(--input-border);
  flex-shrink: 0;
}

.details-panel-content {
  flex: 1;
  overflow: auto;
  padding: 1rem;
}

/* Mensaje de placeholder */
.placeholder-message {
  position: absolute;
  inset: 0;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  color: var(--text-secondary);
  font-size: 1rem;
  padding: 1.5rem;
  text-align: center;
  background-color: var(--bg-primary);
  pointer-events: none;
}

.upload-panel {
  padding: 1rem;
  background-color: var(--bg-secondary);
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
  border-radius: 0.5rem;
  flex-shrink: 0;
}

.panel-title {
  font-size: 1.25rem;
  font-weight: 600;
  margin-bottom: 0.5rem;
  color: var(--accent-cyan);
  text-align: center;
}

.upload-panel-content {
  display: flex;
  flex-direction: row;
  align-items: stretch; /* Make children same height */
  justify-content: space-between; /* Distribute space between children */
  gap: 1rem; /* Reduced gap */
  margin-top: 0.5rem; /* Reduced margin */
}

.upload-area {
  flex: 1; /* Share space equally */
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 0.5rem; /* Reduced padding */
  border: 1px dashed var(--input-border-hover);
  border-radius: 0.5rem;
  text-align: center;
  min-height: 120px; /* Reduced min-height */
}

.loaded-file-info {
  flex: 1; /* Share space equally */
  display: flex;
  flex-direction: column;
  align-items: center; /* Center children horizontally */
  justify-content: center; /* Also center vertically */
  padding: 0.5rem; /* Reduced padding */
  border: 1px dashed var(--input-border-hover);
  border-radius: 0.5rem;
  min-height: 120px; /* Reduced min-height */
}

.file-name-display {
  font-size: 0.75rem;
  color: var(--text-secondary);
  margin-top: 0.75rem;
  text-align: center;
}

.action-buttons-container {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  gap: 1rem;
  margin-top: 1rem;
}

.graph-viewport-container {
  flex: 1 1 auto; /* Changed from flex-grow/flex-shrink/flex-basis to shorthand */
  display: flex; /* Added to ensure proper flex behavior */
  width: 100%; /* Explicit width */
  height: calc(100vh - 300px); /* Explicit height, accounting for header and upload panel */
  min-height: 400px; /* Keep minimum height */
  margin-top: 1rem;
  background-color: var(--graph-bg);
  border-radius: 0.5rem;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
  position: relative;
  overflow: hidden;
  box-sizing: border-box;
}

.reactflow-wrapper {
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  box-sizing: border-box;
}

.json-details-viewer {
  width: 100%;
  max-width: 40rem;
  margin-top: 1rem;
  text-align: left;
}

.json-details-summary {
  cursor: pointer;
  color: var(--accent-cyan);
  text-decoration: underline;
  font-weight: 600;
}

.json-details-pre {
  font-size: 0.75rem;
  white-space: pre-wrap;
  word-break: break-word;
  color: var(--text-secondary);
  overflow: auto;
  max-height: 20rem;
  margin-top: 0.5rem;
  padding: 0.75rem;
  background-color: var(--input-bg);
  border-radius: 0.5rem;
  border: 1px solid var(--input-border);
}

.graph-page-center {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  height: 100vh; /* Full viewport height */
  min-height: 100vh;
  overflow: hidden; /* Prevent scrolling */
}

/* Adding styles for scroll functionality and scrollbar customization */
.graph-page-container .overflow-auto {
  overflow: auto;
  max-height: 80vh; /* Limit height for scrolling */
}

/* Custom scrollbar styles */
.graph-page-container .overflow-auto::-webkit-scrollbar {
  width: 8px;
}

.graph-page-container .overflow-auto::-webkit-scrollbar-thumb {
  background-color: var(--accent-cyan-darker);
  border-radius: 4px;
}

.graph-page-container .overflow-auto::-webkit-scrollbar-track {
  background-color: var(--bg-secondary);
}

/* Styles for the resizable details section */
.details-section {
  position: relative;
  background-color: var(--bg-secondary);
  border: 1px solid var(--input-border-hover);
  overflow: auto;
}

.resize-handle {
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 10px;
  cursor: ns-resize;
  background-color: var(--accent-cyan);
}

/* Estilos específicos de nodos */
.react-flow__node {
  transition: all 0.2s ease;
  border-radius: 0.5rem;
}

.react-flow__node:hover {
  box-shadow: 0 0 10px rgba(0, 229, 255, 0.2);
}

.react-flow__node.selected {
  box-shadow: 0 0 15px rgba(0, 229, 255, 0.4);
}

/* Estilos específicos de aristas */
.react-flow__edge {
  transition: all 0.2s ease;
}

.react-flow__edge:hover {
  filter: brightness(1.2);
}

.react-flow__edge.selected {
  filter: brightness(1.4);
}

.react-flow__edge-path {
  transition: all 0.2s ease;
}

.react-flow__edge-text {
  font-size: 12px;
  font-weight: 500;
  fill: var(--edge-label-color);
  paint-order: stroke;
  stroke: var(--graph-bg);
  stroke-width: 4px;
  stroke-linecap: round;
  stroke-linejoin: round;
}

.react-flow__edge-text:hover {
  fill: var(--accent-cyan);
}

/* Animaciones */
.edge-appear {
  animation: edgeAppear 0.4s ease-out forwards;
}

.edge-appear-static {
  opacity: 1;
}

@keyframes edgeAppear {
  from {
    opacity: 0;
    stroke-dasharray: 2000;
    stroke-dashoffset: 2000;
  }
  to {
    opacity: 1;
    stroke-dashoffset: 0;
  }
}

.node-appear {
  animation: nodeAppear 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275) forwards;
}

.node-appear-static {
  opacity: 1;
}

@keyframes nodeAppear {
  0% {
    transform: scale(0.3) translateZ(0);
    opacity: 0;
  }
  70% {
    transform: scale(1.1) translateZ(0);
    opacity: 0.9;
  }
  100% {
    transform: scale(1) translateZ(0);
    opacity: 1;
  }
}

/* Línea de conexión */
.react-flow__connection-path {
  stroke: var(--accent-cyan);
  stroke-width: 2;
}

.react-flow__connection-line {
  stroke: var(--accent-cyan);
  stroke-width: 2;
  stroke-dasharray: 5;
}

/* Estilos para el nodo cuando se está arrastrando una conexión */
.react-flow__node.react-flow__node-dragging .react-flow__handle {
  opacity: 1;
  transform: scale(1.2);
}

.node-highlighted > div {
  border-color: var(--accent-yellow) !important;
  box-shadow: 0 0 15px var(--accent-yellow) !important;
}

===== frontend/src/types/graph.ts =====
import { Node, Edge } from 'reactflow';

export interface DemoNodeData {
  name: string;
  typeDetails: string;
  status: 'normal' | 'warning' | 'alert' | 'delayed';
  icon?: string;
  details?: Record<string, any>;
  title?: string;
  location?: string;
  rawJsonData?: any; // To store the complete JSON data for the person
  imageUrl?: string; // For profile image
  onImageUpload?: (nodeId: string, file: File) => void; // For image upload functionality
  isHighlighted?: boolean; // For highlighting nodes
}

export interface JsonData {
  nodes?: Node<DemoNodeData>[];
  edges?: Edge[];
  [key: string]: any; // Allow for other properties in the JSON
}

// Re-export types for convenience
export type { Node, Edge };
export type { DemoNodeData as NodeData }; 

===== frontend/src/App.css =====
body {
  margin: 0;
  font-family: Arial, sans-serif;
  background-color: #121212;
  color: #ffffff;
  min-height: 100vh;
  height: 100vh;
  overflow: hidden;
}

.App {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  height: 100vh;
  overflow: hidden;
}

.App-header {
  background-color: #1e1e1e;
  padding: 20px;
  text-align: center;
  flex-shrink: 0;
}

main {
  flex: 1 1 auto;
  display: flex;
  flex-direction: column;
  min-height: 0;
  overflow: hidden;
  padding: 0; /* Remove padding to avoid layout issues for GraphPage */
}


===== frontend/src/index.js =====
import React from 'react';
import { createRoot } from 'react-dom/client';
import './styles/globals.css'; // MANTENER ESTE (Tailwind y variables principales)
// import './assets/css/styles.css'; // COMENTAR TEMPORALMENTE para aislar problemas de CSS
// import './App.css'; // COMENTAR TEMPORALMENTE para aislar problemas de CSS
import App from './App.tsx'; // Changed from App to App.tsx

const container = document.getElementById('root');
const root = createRoot(container);

root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

===== frontend/src/App.tsx =====
// frontend/src/App.tsx
import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate, useLocation } from 'react-router-dom';
import LoginPage from './pages/LoginPage';
import GraphPageWithProvider from './pages/GraphPage';
import './styles/globals.css';

const AppContent: React.FC = () => {
  const [isAuthenticated, setIsAuthenticated] = useState(!!localStorage.getItem('access_token'));
  const location = useLocation();

  useEffect(() => {
    const checkAuth = () => {
      const token = localStorage.getItem('access_token');
      setIsAuthenticated(!!token);
    };
    checkAuth();
    const handleLoginSuccess = () => {
      console.log("AppContent: loginSuccess event received, updating auth state.");
      checkAuth();
    };
    window.addEventListener('loginSuccess', handleLoginSuccess);
    return () => {
      window.removeEventListener('loginSuccess', handleLoginSuccess);
    };
  }, [location.key]);

  console.log("AppContent rendering, isAuthenticated:", isAuthenticated);

  return (
    // .App class from globals.css applies: bg-bg-primary text-text-primary font-sans flex flex-col min-h-screen
    <div className="App"> 
      <header
        className="App-header" // This class is defined in App.css, ensure it's flex-shrink-0
        style={{
          backgroundColor: 'var(--bg-secondary)',
          padding: '1rem',
          textAlign: 'center',
          color: 'var(--text-primary)',
          flexShrink: 0, 
          borderBottom: '1px solid var(--input-border)'
        }}
      >
        <h1 className="text-2xl font-semibold text-accent-cyan">Nodex</h1>
      </header>
      {/* main needs to be a flex container that grows and allows its children to grow */}
      <main
        className="flex-grow flex flex-col" // Ensures main itself is a flex container and grows
        style={{
          position: 'relative', // For absolutely positioned children if needed
          minHeight: '0', // CRUCIAL for flex children that also grow
        }}
      >
        {/* Routes will render GraphPageWithProvider, which has .graph-page-container (flex-grow) */}
        <Routes>
          <Route 
            path="/login" 
            element={!isAuthenticated ? <LoginPage /> : <Navigate to="/graph" replace />} 
          />
          <Route
            path="/graph"
            element={isAuthenticated ? <GraphPageWithProvider /> : <Navigate to="/login" replace />}
          />
          <Route
            path="/"
            element={<Navigate to={isAuthenticated ? "/graph" : "/login"} replace />}
          />
          <Route
            path="*"
            element={<Navigate to="/" replace />}
          />
        </Routes>
      </main>
    </div>
  );
};

function App() {
  return (
    <Router>
      <AppContent />
    </Router>
  );
}

export default App;

===== frontend/src/config.ts =====
// API Configuration
const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://192.168.0.4:8000';

export const config = {
  api: {
    baseUrl: API_BASE_URL,
    endpoints: {
      login: `${API_BASE_URL}/token`,
      graphData: `${API_BASE_URL}/graph-data/`,
      loadJson: `${API_BASE_URL}/graph/load-json`,
    },
  },
  // Add other configuration as needed
} as const;

export default config; 

===== frontend/src/assets/css/styles.css =====
/* GLE FONTS ===============*/
@import url("https://fonts.googleapis.com/css2?family=Poppins:wght@400;500&display=swap");

/* ============ VARIABLES CSS ===============*/
:root {
  /* ======= Colors (Inspired by User Image) ==========*/
  --hue: 200; /* Use hue for cyan/blue tones (e.g., 200 for a bright sky blue/cyan) */
  --saturation-accent: 100%;
  --lightness-accent: 50%; /* For a bright #00E5FF like cyan */

  --first-color: hsl(var(--hue), var(--saturation-accent), var(--lightness-accent)); /* Bright Cyan */
  --first-color-alt: hsl(var(--hue), var(--saturation-accent), 45%); /* Slightly darker cyan for hover */
  --first-color-light: hsl(var(--hue), var(--saturation-accent), 65%); /* Lighter cyan */

  --bg-dark-primary: #05080D; /* Very dark, almost black with a hint of blue */
  --bg-form-color: hsla(212, 70%, 10%, 0.75); /* Dark blue, slightly transparent for form background */
  --input-bg-color: #0E1625; /* Dark blue for input background */

  --title-color: var(--first-color); /* Bright Cyan for titles */
  --text-color: #C0C8D8; /* Light grayish blue for general text */
  --text-color-light: #8892b0; /* Muted blue-gray for labels, secondary text */
  --text-on-accent: var(--bg-dark-primary); /* Dark text for buttons with cyan background */

  --body-color: var(--bg-dark-primary);
  --container-color: var(--bg-form-color); /* For the form itself */
  --input-border-color: hsl(var(--hue), var(--saturation-accent), 35%); /* Darker cyan for input border */

  /* ======== Font and typography ==========*/
  --body-font: 'Poppins', sans-serif;
  --h1-font-size: 1.75rem;
  --normal-font-size: .938rem;
  --small-font-size: .813rem;

  /* ======== z-index ==========*/
  --z-fixed: 100;
  --z-modal: 1000;
}

/* Responsive typography */
@media screen and (min-width: 968px) {
  :root {
    --h1-font-size: 2.25rem;
    --normal-font-size: 1rem;
    --small-font-size: .875rem;
  }
}

/* ============= BASE ===============*/
* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

body {
  font-family: var(--body-font);
  font-size: var(--normal-font-size);
  background-color: var(--body-color);
  background-image: radial-gradient(ellipse at center, hsl(var(--hue), 30%, 10%) 0%, var(--body-color) 70%);
  background-repeat: no-repeat;
  background-attachment: fixed;
  min-height: 100vh;
  color: var(--text-color);
  line-height: 1.6;
}

h1 {
  color: var(--title-color); /* Default h1 color, though login__title overrides */
}

a {
  text-decoration: none;
  color: var(--first-color);
}

input,
button {
  font-family: var(--body-font);
  border: none;
  outline: none;
}

/* ============= LOGIN PAGE STYLES ===============*/
.login {
  height: 100vh;
  display: grid;
  align-items: center;
  justify-content: center;
  padding: 1.5rem;
}

#loginBackgroundCanvas {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  z-index: -1;
  background-color: var(--body-color);
}

.login-page-container {
  width: 100%;
  height: 100vh;
  overflow: hidden;
}

.login__form {
  position: relative;
  z-index: 1;
  background-color: var(--container-color);
  border: 1px solid hsla(var(--hue), var(--saturation-accent), var(--lightness-accent), 0.2);
  backdrop-filter: blur(8px);
  padding: 2.5rem 2rem;
  border-radius: 1rem;
  box-shadow: 0 8px 32px 0 hsla(var(--hue), var(--saturation-accent), var(--lightness-accent), 0.15),
              0 0 25px hsla(var(--hue), var(--saturation-accent), var(--lightness-accent), 0.1) inset;
  width: 100%;
  max-width: 400px;
  text-align: center;
}

.login__title {
  font-size: var(--h1-font-size);
  font-weight: 500;
  margin-bottom: 2rem;
  color: var(--title-color);
  text-shadow: 0 0 8px hsla(var(--hue), var(--saturation-accent), var(--lightness-accent), 0.7);
}

.login__content {
  display: grid;
  gap: 1.5rem;
  margin-bottom: 1.25rem;
}

.login__box {
  display: grid;
  grid-template-columns: max-content 1fr;
  align-items: center;
  column-gap: 0.75rem;
  border: 1px solid var(--input-border-color);
  padding: 0.5rem 1rem;
  border-radius: 0.75rem;
  background-color: var(--input-bg-color);
  transition: border-color .3s, box-shadow .3s;
}

.login__box:focus-within {
  border-color: var(--first-color);
  box-shadow: 0 0 10px hsla(var(--hue), var(--saturation-accent), var(--lightness-accent), 0.6);
}

.login__icon {
  font-size: 1.25rem;
  color: var(--first-color-light);
  transition: color .3s;
}

.login__box:focus-within .login__icon {
  color: var(--first-color);
}

.login__box-input {
  position: relative;
  width: 100%;
}

.login__input {
  width: 100%;
  padding: 0.9rem 0.25rem;
  background: none;
  color: var(--text-color);
  font-size: var(--normal-font-size);
  letter-spacing: 0.5px;
}

/* Styles for Webkit browser autofill */
.login__input:-webkit-autofill,
.login__input:-webkit-autofill:hover, 
.login__input:-webkit-autofill:focus, 
.login__input:-webkit-autofill:active  {
    -webkit-box-shadow: 0 0 0 30px var(--input-bg-color) inset !important;
    -webkit-text-fill-color: var(--text-color) !important;
    caret-color: var(--first-color) !important;
    border-radius: 0.75rem;
}

.login__label {
  position: absolute;
  left: 0.25rem;
  top: 50%;
  transform: translateY(-50%);
  padding: 0 0.25rem;
  font-size: var(--normal-font-size);
  color: var(--text-color-light);
  font-weight: 400;
  pointer-events: none;
  transition: all 0.2s ease-out;
  background-color: var(--input-bg-color);
  line-height: 1;
}

.login__eye {
  position: absolute;
  right: 0;
  top: 50%;
  transform: translateY(-50%);
  font-size: 1.25rem;
  color: var(--text-color-light);
  cursor: pointer;
  transition: color .3s;
}
.login__eye:hover {
  color: var(--first-color);
}

/* Input focus or value present: move up label */
.login__input:focus + .login__label,
.login__input:not(:placeholder-shown) + .login__label {
  top: -0.85rem; /* Adjust this value to position label above input field correctly */
  font-size: .75rem;
  color: var(--first-color);
}

.login__check {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1.25rem;
  font-size: var(--small-font-size);
}

.login__check-group {
  display: flex;
  align-items: center;
  gap: .5rem;
}

.login__check-input {
  width: 1rem;
  height: 1rem;
  accent-color: var(--first-color); /* Modern browsers styling for checkbox */
  cursor: pointer;
  background-color: var(--input-bg-color); /* Ensure bg matches for non-accent-color scenarios */
  border: 1px solid var(--input-border-color); /* For consistency */
}
.login__check-input:checked {
    background-color: var(--first-color); /* Explicitly set checked bg */
}


.login__check-label,
.login__forgot {
  color: var(--text-color-light);
  transition: color .3s;
}

.login__check-label:hover, /* Hover for label to make it feel more interactive */
.login__forgot:hover {
  color: var(--first-color);
}

.login__button {
  width: 100%;
  padding: 1rem;
  border-radius: 0.75rem;
  background-color: var(--first-color);
  color: var(--text-on-accent);
  font-weight: 500;
  font-size: var(--normal-font-size);
  cursor: pointer;
  margin-bottom: 2rem;
  transition: background-color .3s, box-shadow .3s;
  box-shadow: 0 4px 15px hsla(var(--hue), var(--saturation-accent), var(--lightness-accent), 0.3);
}

.login__button:hover {
  background-color: var(--first-color-alt);
  box-shadow: 0 6px 20px hsla(var(--hue), var(--saturation-accent), var(--lightness-accent), 0.5);
}

.login__button:focus-visible { /* Accessibility focus ring */
  outline: 2px solid var(--first-color-alt);
  outline-offset: 3px;
}

.login__register {
  font-size: var(--small-font-size);
  text-align: center;
  color: var(--text-color-light);
}

.login__register a {
  color: var(--first-color);
  font-weight: 500;
  transition: color .3s, text-decoration .3s;
}

.login__register a:hover {
  color: var(--first-color-light);
  text-decoration: underline;
}

/* Custom scrollbar (Webkit browsers) */
::-webkit-scrollbar {
  width: 10px;
  height: 10px;
}
::-webkit-scrollbar-track {
  background: var(--input-bg-color);
  border-radius: 10px;
}
::-webkit-scrollbar-thumb {
  background: var(--input-border-color);
  border-radius: 10px;
  border: 2px solid var(--input-bg-color); /* Creates a padding effect */
}
::-webkit-scrollbar-thumb:hover {
  background: var(--first-color);
}


===== frontend/src/pages/GraphPage.tsx =====
// frontend/src/pages/GraphPage.tsx
import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';
import ReactFlow, {
  Controls,
  Background,
  useNodesState,
  useEdgesState,
  Node,
  Edge,
  Connection,
  useReactFlow,
  ReactFlowProvider,
  MarkerType,
  addEdge,
} from 'reactflow';
import 'reactflow/dist/style.css';
import '../styles/globals.css';
import '../styles/GraphPage.css';
import { Panel, PanelGroup, PanelResizeHandle } from 'react-resizable-panels';

import PersonNode from '../components/graph/PersonNode';
import CompanyNode from '../components/graph/CompanyNode';
import { UploadCloud, Replace, Layers, Download, X } from 'lucide-react';
import { JsonData, DemoNodeData } from '../types/graph';
import { processJsonToSinglePersonNode } from '../utils/jsonProcessor';
import JsonDetailModal from '../components/modals/JsonDetailModal';
import RelationshipModal from '../components/modals/RelationshipModal';

import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';
import CustomConnectionLine from '../components/graph/CustomConnectionLine';
import TopMenuBar from '../components/layout/TopMenuBar';
import { deepSearchInObject, flattenObject, formatKeyForDisplay, normalizeValueToSentenceCase } from '../utils/dataUtils';
import config from '../config';

const nodeTypes = {
  person: PersonNode,
  company: CompanyNode, // Keep for future use
};

export const GraphPage: React.FC = () => {
  const reactFlowInstance = useReactFlow();
  const animationCleanupRef = useRef<{ cleanup: (() => void) } | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const topBarRef = useRef<HTMLDivElement>(null);
  
  const [fileName, setFileName] = useState<string>('');
  const [selectedFileContent, setSelectedFileContent] = useState<JsonData | null>(null);
  const [isRelationshipModalOpen, setIsRelationshipModalOpen] = useState(false);
  const [pendingConnection, setPendingConnection] = useState<Connection | null>(null);
  const [editingEdge, setEditingEdge] = useState<Edge | null>(null);
  const [detailsNode, setDetailsNode] = useState<Node<DemoNodeData> | null>(null);
  const [isDetailPanelVisible, setIsDetailPanelVisible] = useState(false);
  const [topBarHeight, setTopBarHeight] = useState(60);
  const [isLoading, setIsLoading] = useState(true);
  
  const [nodes, setNodes, onNodesChange] = useNodesState<DemoNodeData>([]);
  const [edges, setEdges, onEdgesChange] = useEdgesState([]);
  const [uploadedImageUrls, setUploadedImageUrls] = useState<Record<string, string>>({});
  const [searchTerm, setSearchTerm] = useState('');
  const [highlightedNodes, setHighlightedNodes] = useState<Set<string>>(new Set());

  const memoizedNodeTypes = useMemo(() => nodeTypes, []);

  // Estilos para las aristas
  const defaultEdgeStyle = {
    stroke: 'var(--edge-default-color)',
    strokeWidth: 2,
    transition: 'all 0.2s ease',
  };

  const selectedEdgeStyle = {
    ...defaultEdgeStyle,
    stroke: 'var(--accent-cyan)',
    strokeWidth: 3,
    filter: 'drop-shadow(0 0 2px var(--accent-cyan))',
  };

  const connectionLineStyle = { stroke: 'var(--accent-cyan)', strokeWidth: 2.5 };

  // Actualizar el estado de detailsNode y visibilidad del panel
  const onNodeClick = useCallback((event: React.MouseEvent, node: Node<DemoNodeData>) => {
    if (node.data?.rawJsonData) {
      setDetailsNode(node);
      setIsDetailPanelVisible(true);
    } else {
      setDetailsNode(null);
      setIsDetailPanelVisible(false);
    }
  }, []);

  const handleCloseDetailPanel = useCallback(() => {
    setDetailsNode(null);
    setIsDetailPanelVisible(false);
  }, []);

  // Mejorar el manejo de conexiones
  const onConnect = useCallback((params: Connection) => {
    if (!params.source || !params.target) return;
    if (params.source === params.target) return;

    const newEdge: Edge = {
      id: `edge-${params.source}-${params.target}-${Date.now()}`,
      source: params.source,
      target: params.target,
      type: 'smoothstep',
      style: defaultEdgeStyle,
      markerEnd: { type: MarkerType.ArrowClosed, color: 'var(--edge-default-color)' },
    };

    setEdges((eds) => addEdge(newEdge, eds));

    const sourceNode = nodes.find(n => n.id === params.source);
    const targetNode = nodes.find(n => n.id === params.target);

    if (sourceNode?.type === 'person' && targetNode?.type === 'person') {
      setEditingEdge(newEdge);
      setIsRelationshipModalOpen(true);
    }
  }, [nodes, setEdges]);

  const handleCreateOrUpdateRelationship = useCallback((label: string, isDirected: boolean) => {
    console.log("Intentando crear/actualizar relación:", { label, isDirected, editingEdge, pendingConnection });
    
    let finalEdge: Edge | null = null;
    
    if (editingEdge) {
      finalEdge = { 
        ...editingEdge, 
        label, 
        markerEnd: isDirected ? { type: MarkerType.ArrowClosed, color: 'var(--edge-default-color)' } : undefined,
        style: defaultEdgeStyle,
      };
      setEdges((eds) => eds.map((edge) => (edge.id === editingEdge.id ? finalEdge as Edge : edge)));
      setEditingEdge(null);
    } else if (pendingConnection) {
      finalEdge = {
        id: `edge-${pendingConnection.source}-${pendingConnection.target}-${Date.now()}`,
        source: pendingConnection.source!,
        target: pendingConnection.target!,
        sourceHandle: pendingConnection.sourceHandle,
        targetHandle: pendingConnection.targetHandle,
        label: label,
        type: 'smoothstep',
        style: defaultEdgeStyle,
        markerEnd: isDirected ? { type: MarkerType.ArrowClosed, color: 'var(--edge-default-color)' } : undefined,
        className: 'edge-appear',
      };
      
      setEdges((eds) => {
        const newEdges = addEdge(finalEdge as Edge, eds);
        console.log("Nuevas aristas después de añadir:", newEdges);
        return newEdges;
      });
      setPendingConnection(null);
    }

    if (finalEdge) {
      const edgeToAnimateId = finalEdge.id;
      setTimeout(() => {
        setEdges((eds) =>
          eds.map((e) =>
            e.id === edgeToAnimateId 
              ? { ...e, className: (e.className || '').replace('edge-appear', 'edge-appear-static').trim() } 
              : e
          )
        );
      }, 400);
    }
    
    setIsRelationshipModalOpen(false);
  }, [editingEdge, pendingConnection, setEdges, defaultEdgeStyle]);

  // Function to handle image uploads for nodes
  const handleImageUploadForNode = useCallback((nodeId: string, file: File) => {
    console.log(`Uploading image for node ${nodeId}:`, file.name);
    
    // Revoke previous URL if it exists for this node
    if (uploadedImageUrls[nodeId]) {
      URL.revokeObjectURL(uploadedImageUrls[nodeId]);
    }

    const newImageUrl = URL.createObjectURL(file);
    setUploadedImageUrls(prev => ({ ...prev, [nodeId]: newImageUrl }));

    setNodes((nds) =>
      nds.map((node) => {
        if (node.id === nodeId) {
          return {
            ...node,
            data: {
              ...node.data,
              imageUrl: newImageUrl,
            },
          };
        }
        return node;
      })
    );
  }, [setNodes, uploadedImageUrls]);

  // Cleanup object URLs when component unmounts
  useEffect(() => {
    return () => {
      Object.values(uploadedImageUrls).forEach(url => URL.revokeObjectURL(url));
    };
  }, [uploadedImageUrls]);

  // Cleanup object URLs when nodes are removed
  useEffect(() => {
    const currentNodeImageUrls = new Set(
      nodes.map(node => node.data.imageUrl).filter(Boolean) as string[]
    );
    const urlsToRevoke = Object.entries(uploadedImageUrls)
      .filter(([nodeId, url]) => !currentNodeImageUrls.has(url))
      .map(([nodeId, url]) => url);

    if (urlsToRevoke.length > 0) {
      urlsToRevoke.forEach(url => URL.revokeObjectURL(url));
      setUploadedImageUrls(prev => {
        const newState = { ...prev };
        Object.entries(newState).forEach(([nodeId, url]) => {
          if (urlsToRevoke.includes(url)) {
            delete newState[nodeId];
          }
        });
        return newState;
      });
    }
  }, [nodes, uploadedImageUrls]);

  useEffect(() => {
    if (!searchTerm.trim()) {
      setHighlightedNodes(new Set());
      return;
    }

    const matchingNodeIds = new Set<string>();
    nodes.forEach(node => {
      if (node.data.rawJsonData && deepSearchInObject(node.data.rawJsonData, searchTerm)) {
        matchingNodeIds.add(node.id);
      }
    });
    setHighlightedNodes(matchingNodeIds);
  }, [searchTerm, nodes]);

  const animateGraphLoad = useCallback(
    (initialNodes: Node<DemoNodeData>[], initialEdges: Edge[], isOverwrite: boolean = false) => {
      if (animationCleanupRef.current?.cleanup) {
        animationCleanupRef.current.cleanup();
        animationCleanupRef.current = null;
      }

      const nodesToSet = initialNodes.map((node) => ({
        ...node,
        className: `${node.className || ''} node-appear`.trim(),
      }));
      const edgesToSet = initialEdges.map((edge) => ({
        ...edge,
        className: `${edge.className || ''} edge-appear`.trim(),
      }));
      
      if (isOverwrite) {
        setNodes(nodesToSet);
        setEdges(edgesToSet);
      } else {
        const existingNodeIds = new Set(nodes.map(n => n.id));
        const newNodesToAdd = nodesToSet.filter(n => !existingNodeIds.has(n.id));
        
        const existingEdgeIds = new Set(edges.map(e => e.id));
        const newEdgesToAdd = edgesToSet.filter(e => !existingEdgeIds.has(e.id));

        setNodes((nds) => [...nds, ...newNodesToAdd]);
        setEdges((eds) => [...eds, ...newEdgesToAdd]);
      }

      const timeoutId = setTimeout(() => {
        setNodes((nds) =>
          nds.map((n) => ({
            ...n,
            className: n.className?.replace('node-appear', 'node-appear-static').trim(),
          }))
        );
        setEdges((eds) =>
          eds.map((e) => ({
            ...e,
            className: e.className?.replace('edge-appear', 'edge-appear-static').trim(),
          }))
        );
        if (animationCleanupRef.current?.cleanup === (() => clearTimeout(timeoutId))) {
          animationCleanupRef.current = null;
        }
      }, 1000);

      animationCleanupRef.current = { cleanup: () => clearTimeout(timeoutId) };

      setTimeout(() => {
        reactFlowInstance.fitView({ padding: 0.2, duration: 800 });
      }, 100);
    },
    [setNodes, setEdges, reactFlowInstance, nodes, edges]
  );

  // Function to load initial graph data from backend
  const loadInitialGraph = useCallback(async (showFitView = true) => {
    setIsLoading(true);
    try {
      const token = localStorage.getItem('access_token');
      if (!token) {
        console.log("No auth token, skipping initial graph load.");
        setIsLoading(false);
        return;
      }
      const response = await fetch(config.api.endpoints.graphData, {
        headers: { 'Authorization': `Bearer ${token}` },
      });

      if (!response.ok) {
        if (response.status === 401) {
          console.error("Unauthorized. Token might be invalid or expired.");
          // navigate('/login'); // if navigate is available
        }
        throw new Error(`Failed to fetch graph data: ${response.statusText}`);
      }

      const data = await response.json();
      if (data.nodes && data.edges) {
        const initialNodes = data.nodes.map((n: Node<DemoNodeData>) => ({
          ...n,
          data: {
            ...n.data,
            onImageUpload: n.type === 'person' ? handleImageUploadForNode : undefined,
            isHighlighted: highlightedNodes.has(n.id),
          },
          className: 'node-appear-static',
        }));
        const initialEdges = data.edges.map((e: Edge) => ({
          ...e,
          className: 'edge-appear-static',
          markerEnd: e.markerEnd || { type: MarkerType.ArrowClosed, color: 'var(--edge-default-color)' },
          style: e.style || { stroke: 'var(--edge-default-color)', strokeWidth: 2 },
        }));
        
        setNodes(initialNodes);
        setEdges(initialEdges);

        if (showFitView && initialNodes.length > 0) {
          setTimeout(() => {
            reactFlowInstance.fitView({ padding: 0.2, duration: 0 });
          }, 50);
        }
      }
    } catch (error) {
      console.error("Error loading initial graph data:", error);
    } finally {
      setIsLoading(false);
    }
  }, [reactFlowInstance, setNodes, setEdges, handleImageUploadForNode, highlightedNodes]);

  // Load graph on component mount
  useEffect(() => {
    loadInitialGraph();
  }, []); // eslint-disable-line react-hooks/exhaustive-deps

  // Function to send JSON data to backend
  const uploadJsonToBackend = async (jsonDataToUpload: JsonData, mode: 'overwrite' | 'merge', originalFileName: string) => {
    const token = localStorage.getItem('access_token');
    if (!token) {
      alert("Authentication error. Please log in again.");
      return;
    }
    console.log(`Uploading ${originalFileName} to backend with mode: ${mode}`);
    try {
      const response = await fetch(config.api.endpoints.loadJson, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
        body: JSON.stringify({ jsonData: jsonDataToUpload, mode }),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({ detail: 'Unknown server error' }));
        throw new Error(`Failed to upload JSON to backend: ${errorData.detail || response.statusText}`);
      }
      
      alert(`File "${originalFileName}" processed by backend (${mode}). Graph will refresh.`);
      await loadInitialGraph(true);
      setSelectedFileContent(null);
      setFileName('');

    } catch (error) {
      console.error(`Error ${mode}ing JSON data in backend:`, error);
      alert(`Failed to ${mode} JSON data in backend: ${error}`);
    }
  };

  // This function is now a trigger for sending the JSON file content to the backend
  const handleJsonUploaded = useCallback(
    (uploadedData: JsonData, uploadedFileName: string, mode: 'overwrite' | 'merge' = 'overwrite') => {
      uploadJsonToBackend(uploadedData, mode, uploadedFileName);
    },
    [loadInitialGraph]
  );

  const handleUploadAreaClick = () => fileInputRef.current?.click();

  const handleFileDrop = useCallback((event: React.DragEvent<HTMLDivElement>) => {
    event.preventDefault();
    event.stopPropagation();
    const file = event.dataTransfer.files?.[0];
    if (file && file.type === 'application/json') {
      setFileName(file.name);
      file.text().then(text => {
        try {
          const parsedJson = JSON.parse(text) as JsonData;
          setSelectedFileContent(parsedJson);
        } catch (error) {
          alert('El archivo no es un JSON válido.');
        }
      });
    } else {
      alert('Por favor, carga un archivo JSON válido.');
    }
  }, []);

  const handleDragOver = useCallback((event: React.DragEvent<HTMLDivElement>) => {
    event.preventDefault();
    event.stopPropagation();
  }, []);

  const handleDragLeave = handleDragOver; // Assuming this was intended to be similar

  const handleFileSelected = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setFileName(file.name);
      try {
        const text = await file.text();
        const parsedJson = JSON.parse(text) as JsonData;
        setSelectedFileContent(parsedJson);
      } catch (error) {
        alert('El archivo no es un JSON válido.');
        setSelectedFileContent(null);
      }
      if (fileInputRef.current) fileInputRef.current.value = "";
    }
  };
  
  const onEdgeClick = useCallback((event: React.MouseEvent, edge: Edge) => {
    event.stopPropagation();
    setEditingEdge(edge);
    setPendingConnection(null);
    setIsRelationshipModalOpen(true);
  }, []);

  const onElementsRemove = useCallback((elementsToRemove: (Node | Edge)[]) => {
    const nodeIdsToRemove = new Set(elementsToRemove.filter(el => 'position' in el).map(el => el.id));
    const edgeIdsToRemove = new Set(elementsToRemove.filter(el => 'source' in el).map(el => el.id));

    if (nodeIdsToRemove.size > 0) {
      setNodes((nds) => nds.filter((node) => !nodeIdsToRemove.has(node.id)));
      // If a node is removed, also remove its details from the panel
      if (detailsNode && nodeIdsToRemove.has(detailsNode.id)) {
        setDetailsNode(null);
      }
    }
    if (edgeIdsToRemove.size > 0) {
      setEdges((eds) => eds.filter((edge) => !edgeIdsToRemove.has(edge.id)));
    }
  }, [setNodes, setEdges, detailsNode]);

  const handleExportPDF = async () => {
    const currentGraphNodes = reactFlowInstance.getNodes();
    if (currentGraphNodes.length === 0) {
      alert("No hay contenido en el grafo para exportar.");
      return;
    }
    const viewportElement = document.querySelector('.react-flow__viewport') as HTMLElement;
    if (!viewportElement) {
      console.error('Elemento viewport de ReactFlow no encontrado.');
      alert('Error: Elemento viewport no encontrado para exportar.');
      return;
    }
    try {
      // Remove box shadows from nodes for cleaner export
      document.querySelectorAll('.react-flow__node').forEach(nodeEl => {
        (nodeEl as HTMLElement).style.boxShadow = 'none';
      });
      
      const canvas = await html2canvas(viewportElement, {
        logging: false, 
        useCORS: true,
        backgroundColor: window.getComputedStyle(document.documentElement).getPropertyValue('--graph-bg').trim() || '#001F3F',
        scale: 1.5,
      });
      
      // Restore box shadows
      document.querySelectorAll('.react-flow__node').forEach(nodeEl => {
        (nodeEl as HTMLElement).style.boxShadow = ''; 
      });
      
      const imgData = canvas.toDataURL('image/png', 1.0);
      const pdf = new jsPDF({
        orientation: canvas.width > canvas.height ? 'l' : 'p',
        unit: 'px',
        format: [canvas.width, canvas.height],
      });
      
      pdf.addImage(imgData, 'PNG', 0, 0, canvas.width, canvas.height);
      const pdfFileName = `${fileName.replace(/\.json$/i, '') || 'grafo'}_${new Date().toISOString().split('T')[0]}.pdf`;
      pdf.save(pdfFileName);
    } catch (error: any) {
      console.error('Error exportando grafo a PDF:', error);
      alert(`Fallo al exportar grafo a PDF. Error: ${error.message || String(error)}`);
      document.querySelectorAll('.react-flow__node').forEach(nodeEl => {
        (nodeEl as HTMLElement).style.boxShadow = '';
      });
    }
  };

  const isValidConnection = (connection: Connection) => {
    return connection.source !== connection.target;
  };

  // Add missing zoom and fitView handlers
  const handleZoomIn = useCallback(() => {
    reactFlowInstance.zoomIn({ duration: 300 });
  }, [reactFlowInstance]);

  const handleZoomOut = useCallback(() => {
    reactFlowInstance.zoomOut({ duration: 300 });
  }, [reactFlowInstance]);

  const handleFitView = useCallback(() => {
    reactFlowInstance.fitView({ padding: 0.2, duration: 500 });
  }, [reactFlowInstance]);

  const sourceNodeForModal = editingEdge ? nodes.find(n => n.id === editingEdge.source) : null;
  const targetNodeForModal = editingEdge ? nodes.find(n => n.id === editingEdge.target) : null;
  
  const sourceNodeNameForModal = sourceNodeForModal?.data?.name || 'Nodo Origen';
  const targetNodeNameForModal = targetNodeForModal?.data?.name || 'Nodo Destino';

  // Show loading state if graph is empty and loading
  if (isLoading && nodes.length === 0) {
    return (
      <div className="flex items-center justify-center h-full w-full text-text-secondary">
        Loading graph data...
      </div>
    );
  }

  return (
    <div className="graph-page-container flex flex-col h-full w-full overflow-hidden">
      <TopMenuBar
        onFileMenuSelect={(action) => {
          switch (action) {
            case 'new':
              // Implementar nueva funcionalidad
              break;
            case 'open':
              handleUploadAreaClick();
              break;
            case 'save':
              // Implementar guardado
              break;
            case 'export':
              handleExportPDF();
              break;
          }
        }}
        onEditMenuSelect={(action) => {
          switch (action) {
            case 'undo':
              // Implementar deshacer
              break;
            case 'redo':
              // Implementar rehacer
              break;
            case 'copy':
              // Implementar copiar
              break;
            case 'paste':
              // Implementar pegar
              break;
          }
        }}
        onViewMenuSelect={(action) => {
          switch (action) {
            case 'zoomIn':
              handleZoomIn();
              break;
            case 'zoomOut':
              handleZoomOut();
              break;
            case 'resetView':
              handleFitView();
              break;
          }
        }}
      />
      
      <input 
        type="file" 
        accept=".json" 
        className="hidden" 
        ref={fileInputRef} 
        onChange={handleFileSelected} 
      />

      {/* Contenedor principal con paneles redimensionables */}
      <PanelGroup direction="horizontal" className="flex-grow min-h-0">
        <Panel 
          defaultSize={isDetailPanelVisible ? 70 : 100} 
          minSize={30} 
          order={1}
          className="relative"
        >
          <div 
            className="graph-viewport-wrapper w-full h-full relative bg-graph-bg rounded-md"
            onDrop={handleFileDrop}
            onDragOver={handleDragOver}
            onDragLeave={handleDragLeave}
          >
            <ReactFlow
              nodes={nodes.map(node => ({
                ...node,
                data: {
                  ...node.data,
                  isHighlighted: highlightedNodes.has(node.id),
                  onImageUpload: node.type === 'person' ? handleImageUploadForNode : undefined,
                }
              }))}
              edges={edges}
              onNodesChange={onNodesChange}
              onEdgesChange={onEdgesChange}
              onConnect={onConnect}
              onNodeClick={onNodeClick}
              onEdgeClick={onEdgeClick}
              onNodesDelete={onElementsRemove}
              onEdgesDelete={onElementsRemove}
              nodeTypes={memoizedNodeTypes}
              fitView={false}
              minZoom={0.1}
              maxZoom={2.5}
              defaultViewport={{ x: 0, y: 0, zoom: 1 }}
              proOptions={{ hideAttribution: true }}
              className="graph-viewport"
              connectionLineComponent={CustomConnectionLine}
              connectionLineStyle={connectionLineStyle}
              deleteKeyCode={['Backspace', 'Delete']}
              isValidConnection={isValidConnection}
            >
              <Background />
              <Controls />
              {nodes.length === 0 && (
                <div className="placeholder-message">
                  <UploadCloud size={64} className="mx-auto mb-6 text-text-secondary" />
                  <p className="mb-2">Arrastra y suelta un archivo JSON aquí</p>
                  <p className="mb-4 text-sm">o usa el botón "Cargar JSON" de arriba.</p>
                </div>
              )}
            </ReactFlow>
          </div>
        </Panel>
        
        {isDetailPanelVisible && detailsNode && (
          <>
            <PanelResizeHandle className="w-2 bg-input-border hover:bg-accent-cyan focus:outline-none focus:ring-2 focus:ring-accent-cyan transition-colors flex items-center justify-center group">
              <div className="w-[3px] h-10 bg-bg-primary rounded-full group-hover:bg-accent-cyan-darker transition-colors"></div>
            </PanelResizeHandle>
            <Panel 
              defaultSize={30} 
              minSize={20} 
              maxSize={50} 
              order={2} 
              id="details-panel-resizable"
            >
              <div className="bg-bg-secondary h-full flex flex-col overflow-hidden border-l-2 border-accent-main">
                <div className="p-4 border-b-2 border-border-primary flex justify-between items-center flex-shrink-0">
                  <h3 className="text-lg font-bold text-text-primary font-mono tracking-wider" title={detailsNode.data.name}>
                    // DATA LOG: {detailsNode.data.name}
                  </h3>
                  <button 
                    onClick={handleCloseDetailPanel} 
                    className="text-text-secondary hover:text-accent-danger transition-colors p-1 rounded-sm hover:bg-bg-tertiary"
                  >
                    <X size={20} />
                  </button>
                </div>
                <div className="flex-grow overflow-auto p-4 font-mono text-xs space-y-4">
                  {Object.entries(detailsNode.data.rawJsonData || {}).map(([sectionKey, sectionValue]) => {
                    if (!sectionValue || typeof sectionValue !== 'object' || Object.keys(sectionValue).length === 0) return null;
                    
                    return (
                      <details key={sectionKey} className="group" open>
                        <summary className="cursor-pointer list-none flex items-center gap-2 text-accent-main hover:brightness-125 transition-all">
                          <span className="text-accent-warn">$</span>
                          <span className="uppercase font-bold tracking-widest">{formatKeyForDisplay(sectionKey)}</span>
                          <div className="flex-grow border-b border-dashed border-border-secondary"></div>
                        </summary>
                        <div className="pl-4 pt-3 space-y-1.5">
                          {Object.entries(flattenObject(sectionValue))
                            .map(([key, value]) => {
                              if (value === null || value === undefined || String(value).trim() === '') return null;
                              const displayKey = formatKeyForDisplay(key);
                              const displayValue = normalizeValueToSentenceCase(String(value));
                              return (
                                <div key={key} className="flex">
                                  <span className="text-text-secondary w-1/3 truncate pr-2">{displayKey}</span>
                                  <span className="text-text-primary flex-1 break-all">{displayValue}</span>
                                </div>
                              );
                            })
                            .filter(Boolean)}
                        </div>
                      </details>
                    );
                  })}
                </div>
              </div>
            </Panel>
          </>
        )}
      </PanelGroup>

      <RelationshipModal
        isOpen={isRelationshipModalOpen}
        onClose={() => {
          setIsRelationshipModalOpen(false);
          setPendingConnection(null);
          setEditingEdge(null);
        }}
        onSubmit={handleCreateOrUpdateRelationship}
        sourceNodeName={sourceNodeNameForModal}
        targetNodeName={targetNodeNameForModal}
        initialLabel={editingEdge?.label as string | undefined}
        initialIsDirected={editingEdge ? editingEdge.markerEnd !== undefined : true}
      />
    </div>
  );
};

const GraphPageWithProvider: React.FC = () => (
  <ReactFlowProvider>
    <GraphPage />
  </ReactFlowProvider>
);

export default GraphPageWithProvider;


===== frontend/src/pages/LoginPage.tsx =====
import React from 'react';
import LoginForm from '../components/auth/LoginForm';
import AnimatedBackground from '../components/AnimatedBackground.js'; // Now available
import '../assets/css/styles.css';

const LoginPage: React.FC = () => {
  const handleLoginSuccess = () => {
    // This function is called on successful login from LoginForm
    // It can be used to update global state if needed, e.g., force App re-render
    // For now, navigation is handled within LoginForm.
    console.log('Login success callback triggered in LoginPage.');
  };

  return (
    <div className="login-page-container">
      <AnimatedBackground /> {/* Now uncommented */}
      <div className="login"> {/* Esta clase de styles.css centra el formulario */}
        <LoginForm onLoginSuccess={handleLoginSuccess} />
      </div>
    </div>
  );
};

export default LoginPage;

===== frontend/src/utils/dataUtils.ts =====
export const deepSearchInObject = (obj: any, term: string): boolean => {
  if (term === '') return false;
  const lowerCaseTerm = term.toLowerCase();

  for (const key in obj) {
    if (obj.hasOwnProperty(key)) {
      const value = obj[key];
      if (typeof value === 'object' && value !== null) {
        if (deepSearchInObject(value, term)) return true;
      } else if (value !== null && value !== undefined) {
        if (String(value).toLowerCase().includes(lowerCaseTerm)) {
          return true;
        }
      }
    }
  }
  return false;
};

export const flattenObject = (obj: any, parentKey: string = '', result: Record<string, any> = {}): Record<string, any> => {
  for (const key in obj) {
    if (obj.hasOwnProperty(key)) {
      const propName = parentKey ? `${parentKey} -> ${key}` : key;
      const value = obj[key];

      if (typeof value === 'object' && value !== null && !Array.isArray(value)) {
        flattenObject(value, propName, result);
      } else if (Array.isArray(value)) {
        if (value.every(item => typeof item !== 'object')) {
          result[propName] = value.join(', ');
        } else {
          value.forEach((item, index) => {
            flattenObject(item, `${propName}[${index}]`, result);
          });
        }
      } else {
        if (value !== null && value !== undefined && value !== '') {
          result[propName] = value;
        }
      }
    }
  }
  return result;
};

export const formatKeyForDisplay = (key: string): string => {
  // Extract the last part of the key if it comes with a path (e.g. "curp_online -> data -> curp" -> "curp")
  const finalKey = key.includes(' -> ') ? key.substring(key.lastIndexOf(' -> ') + 4) : key;

  // Convert camelCase or snake_case to Title Case
  let result = finalKey
    .replace(/_/g, ' ') // Replace underscores with spaces
    .replace(/([a-z])([A-Z])/g, '$1 $2'); // Insert space before uppercase in camelCase

  // Capitalize first letter of each word
  return result
    .toLowerCase()
    .split(' ')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
};

export const normalizeValueToSentenceCase = (value: string): string => {
  if (typeof value !== 'string' || value.length === 0) {
    return value;
  }
  // If the value is all uppercase and short (like an acronym), or a CURP/RFC, don't change it
  if ((value === value.toUpperCase() && value.length <= 5) || /^[A-Z0-9]{10,}$/.test(value)) {
    return value;
  }
  return value.charAt(0).toUpperCase() + value.slice(1).toLowerCase();
};


===== frontend/src/utils/layoutGraph.ts =====
import ELK, { ElkNode, ElkExtendedEdge, LayoutOptions } from 'elkjs/lib/elk.bundled.js';
import { Node, Edge } from 'reactflow';
import { DemoNodeData } from '../types/graph';

const NODE_DIMENSIONS: Record<string, { width: number; height: number }> = {
  person: { width: 160, height: 180 },
  company: { width: 192, height: 220 },
  jsonPrimitive: { width: 180, height: 70 },
  jsonObjectArray: { width: 192, height: 120 },
};
const DEFAULT_NODE_WIDTH = 180;
const DEFAULT_NODE_HEIGHT = 100;

const elk = new ELK();

const elkLayoutOptions: LayoutOptions = {
  'elk.algorithm': 'layered',
  'elk.direction': 'DOWN',
  'elk.layered.spacing.nodeNodeBetweenLayers': '100',
  'elk.layered.spacing.nodeNode': '80',
  'elk.layered.spacing.edgeNodeBetweenLayers': '80',
  'elk.layered.cycleBreaking.strategy': 'GREEDY',
  'elk.edgeRouting': 'ORTHOGONAL',
  'elk.layered.nodePlacement.strategy': 'NETWORK_SIMPLEX',
  'elk.padding': '[top=50,left=50,bottom=50,right=50]',
  'elk.zoomToFit': 'true',
  'elk.layered.crossingMinimization.strategy': 'LAYER_SWEEP',
  'elk.layered.considerModelOrder.strategy': 'NODES_AND_EDGES',
  'elk.separateConnectedComponents': 'false',
};

const getNodeDimensions = (node: Node<DemoNodeData>): { width: number; height: number } => {
  if (node.type && NODE_DIMENSIONS[node.type]) {
    return NODE_DIMENSIONS[node.type];
  }
  if (node.id.startsWith('jsonGraphNode-')) {
    if (node.type === 'person') return NODE_DIMENSIONS.jsonPrimitive || { width: DEFAULT_NODE_WIDTH, height: 70 };
    if (node.type === 'company') return NODE_DIMENSIONS.jsonObjectArray || { width: DEFAULT_NODE_WIDTH, height: DEFAULT_NODE_HEIGHT };
  }
  return { width: DEFAULT_NODE_WIDTH, height: DEFAULT_NODE_HEIGHT };
};

export const getLayoutedElements = async (
  nodes: Node<DemoNodeData>[],
  edges: Edge[],
  options: LayoutOptions = elkLayoutOptions
): Promise<{ nodes: Node<DemoNodeData>[]; edges: Edge[] }> => {
  if (!nodes || nodes.length === 0) {
    return { nodes, edges };
  }

  const elkNodes: ElkNode[] = nodes.map((node) => {
    const dimensions = getNodeDimensions(node);
    return {
      id: node.id,
      width: dimensions.width,
      height: dimensions.height,
    };
  });

  const elkEdges: ElkExtendedEdge[] = edges.map((edge) => ({
    id: edge.id,
    sources: [edge.source],
    targets: [edge.target],
  }));

  const graphToLayout: ElkNode = {
    id: 'root',
    layoutOptions: options,
    children: elkNodes,
    edges: elkEdges,
  };

  try {
    const layoutedGraph = await elk.layout(graphToLayout);
    const newNodes = nodes.map((node) => {
      const elkNode = layoutedGraph.children?.find((n) => n.id === node.id);
      if (elkNode && typeof elkNode.x === 'number' && typeof elkNode.y === 'number') {
        return {
          ...node,
          position: { x: elkNode.x, y: elkNode.y },
        };
      }
      return node;
    });
    const newEdges = edges.map(edge => {
      // ELK puede proveer puntos de ruteo para las aristas, pero por ahora devolvemos la arista original
      return edge;
    });
    return { nodes: newNodes, edges: newEdges };
  } catch (e) {
    console.error('Error during ELK layout:', e);
    return { nodes, edges };
  }
}; 

===== frontend/src/utils/imageUtils.ts =====
interface ResizeOptions {
  maxWidth: number;
  maxHeight: number;
  quality?: number;
}

/**
 * Redimensiona una imagen manteniendo su relación de aspecto.
 * La imagen se recorta al centro para que sea cuadrada.
 * @param file - El archivo de imagen original.
 * @param options - Opciones de redimensionamiento.
 * @returns - Una promesa que se resuelve con el Blob de la imagen redimensionada.
 */
export const resizeAndCropImage = (file: File, options: ResizeOptions): Promise<Blob> => {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = (event) => {
      const img = new Image();
      img.onload = () => {
        const canvas = document.createElement('canvas');
        const { maxWidth, maxHeight } = options;
        canvas.width = maxWidth;
        canvas.height = maxHeight;
        const ctx = canvas.getContext('2d');

        if (!ctx) {
          return reject(new Error('No se pudo obtener el contexto del canvas.'));
        }

        // Lógica para recortar al centro y escalar
        const srcRatio = img.width / img.height;
        const destRatio = maxWidth / maxHeight;
        let srcX = 0, srcY = 0, srcWidth = img.width, srcHeight = img.height;

        if (srcRatio > destRatio) { // La imagen es más ancha que el destino
          srcWidth = img.height * destRatio;
          srcX = (img.width - srcWidth) / 2;
        } else { // La imagen es más alta o igual
          srcHeight = img.width / destRatio;
          srcY = (img.height - srcHeight) / 2;
        }

        ctx.drawImage(img, srcX, srcY, srcWidth, srcHeight, 0, 0, maxWidth, maxHeight);
        canvas.toBlob((blob) => {
          if (blob) {
            resolve(blob);
          } else {
            reject(new Error('Fallo al crear el blob de la imagen.'));
          }
        }, file.type, options.quality || 0.9);
      };
      img.onerror = reject;
      img.src = event.target?.result as string;
    };
    reader.onerror = reject;
    reader.readAsDataURL(file);
  });
};


===== frontend/src/utils/jsonProcessor.ts =====
// frontend/src/utils/jsonProcessor.ts
import { Node } from 'reactflow';
import { DemoNodeData } from '../types/graph'; // Usaremos DemoNodeData, asegurándonos que incluya rawJsonData

// Helper function to safely get nested properties
const getNested = (obj: any, path: string, defaultValue: any = undefined): any => {
  const parts = path.split('.');
  let current = obj;

  for (const part of parts) {
    if (typeof current !== 'object' || current === null) {
      return defaultValue;
    }

    const arrayMatch = part.match(/^(\w+)\[(\d+)\]$/);
    if (arrayMatch) {
      const arrayKey = arrayMatch[1];
      const index = parseInt(arrayMatch[2], 10);
      if (current.hasOwnProperty(arrayKey) && Array.isArray(current[arrayKey]) && index < current[arrayKey].length) {
        current = current[arrayKey][index];
      } else {
        return defaultValue;
      }
    } else if (current.hasOwnProperty(part)) {
      current = current[part];
    } else {
      return defaultValue;
    }
  }
  return current === undefined ? defaultValue : current;
};

export const extractPersonInfo = (jsonData: any): { name: string; curp: string; rfc: string; otherKeyData: Record<string, any> } => {
  let name = "Persona Desconocida";
  let curp = "N/A";
  let rfc = "N/A";
  const otherKeyData: Record<string, any> = {};

  // Prioritized search for CURP
  const curpPaths = [
    'curp_online.data.registros[0].curp', 'buro1.data[0].curp', 'ine2.data[0].curp',
    'ine3.data[0].curp', 'vacunacion.data[0].curp', 'buro1.data[0].nombre.curp',
    'pasaportes2022.data[0].solicitud.datos_personales.curp',
    'pasaportes2023.data[0].solicitud.datos_personales.curp',
  ];
  for (const path of curpPaths) {
    const foundCurp = getNested(jsonData, path);
    if (foundCurp && typeof foundCurp === 'string' && foundCurp.length > 5) {
      curp = foundCurp;
      break;
    }
  }

  // Prioritized search for Full Name
  const namePaths = [
    'buro1.data[0].nombre_completo',
    'buro1.data[0].nombre.nombre_completo',
    'buro2.data[0].nombre_completo',
    'vacunacion.data[0].NOMBRE', 
  ];
   for (const path of namePaths) {
    const foundName = getNested(jsonData, path);
    if (foundName && typeof foundName === 'string' && foundName.trim().length > 3) {
      name = foundName.trim();
      if (path === 'vacunacion.data[0].NOMBRE') { // Completar con apellidos si es de vacunacion
        const paternoVac = getNested(jsonData, 'vacunacion.data[0].PATERNO');
        const maternoVac = getNested(jsonData, 'vacunacion.data[0].MATERNO');
        if (paternoVac) name += ` ${paternoVac.trim()}`;
        if (maternoVac) name += ` ${maternoVac.trim()}`;
        name = name.trim();
      }
      break;
    }
  }

  if (name === "Persona Desconocida" || name.split(' ').length < 2) {
    const nombres = getNested(jsonData, 'curp_online.data.registros[0].nombres') || getNested(jsonData, 'ine1.data[0].nombre');
    const paterno = getNested(jsonData, 'curp_online.data.registros[0].primerApellido') || getNested(jsonData, 'ine1.data[0].paterno');
    const materno = getNested(jsonData, 'curp_online.data.registros[0].segundoApellido') || getNested(jsonData, 'ine1.data[0].materno');
    if (nombres && paterno) {
      name = `${nombres.trim()} ${paterno.trim()}${materno ? ' ' + materno.trim() : ''}`.trim();
    }
  }
  
  const rfcPaths = [
    'buro1.data[0].rfc_completo', 
    'buro1.data[0].nombre.rfc_completo',
    'buro2.data[0].rfc_completo',
  ];
  for (const path of rfcPaths) {
      const foundRfc = getNested(jsonData, path);
      if (foundRfc && typeof foundRfc === 'string' && foundRfc.length > 5) {
          rfc = foundRfc;
          break;
      }
  }
  
  otherKeyData.fechaNacimiento = getNested(jsonData, 'curp_online.data.registros[0].fechaNacimiento') || 
                                 getNested(jsonData, 'buro1.data[0].fecha_nacimiento') || 
                                 getNested(jsonData, 'ine1.data[0].fecha_nac') ||
                                 getNested(jsonData, 'buro1.data[0].nombre.fecha_nacimiento');
  const oid = getNested(jsonData, '_id.$oid');
  if (oid) otherKeyData.docId = oid;

  return { name, curp, rfc, otherKeyData };
};

export const processJsonToSinglePersonNode = (jsonData: any, existingNodes: Node<DemoNodeData>[]): { node: Node<DemoNodeData> | null } => {
  const personInfo = extractPersonInfo(jsonData);

  if (personInfo.name === "Persona Desconocida" && personInfo.curp === "N/A") {
    console.warn("No se pudo identificar a la persona desde el JSON. No se creó el nodo.");
    return { node: null };
  }
  
  let nodeIdBase = personInfo.curp !== "N/A" ? personInfo.curp : personInfo.name.replace(/[^a-zA-Z0-9]/g, '_').toLowerCase();
  if (!nodeIdBase || nodeIdBase === "persona_desconocida") {
    nodeIdBase = `person-uid-${Date.now()}`;
  }
  let nodeId = `person-${nodeIdBase}`;
  let counter = 1;
  while (existingNodes.some(n => n.id === nodeId)) {
    nodeId = `person-${nodeIdBase}-${counter++}`;
  }

  const PADDING = 40;
  const NODE_WIDTH = 200; 
  const NODE_HEIGHT = 220; // Ajustar según el contenido típico del nodo
  const COLS = Math.max(1, Math.floor( (typeof window !== 'undefined' ? window.innerWidth * 0.9 : 1200) / (NODE_WIDTH + PADDING) ) );

  const numExistingNodes = existingNodes.length;
  const xPos = (numExistingNodes % COLS) * (NODE_WIDTH + PADDING) + PADDING;
  const yPos = Math.floor(numExistingNodes / COLS) * (NODE_HEIGHT + PADDING) + PADDING;

  const personNode: Node<DemoNodeData> = {
    id: nodeId,
    type: 'person', // Usará PersonNode.tsx
    position: { x: xPos, y: yPos },
    data: {
      name: personInfo.name,
      title: `CURP: ${personInfo.curp}`, // Se mostrará debajo del nombre
      typeDetails: 'Persona', // Para consistencia con DemoNodeData, no se usa mucho en PersonNode.tsx
      status: 'normal',
      details: { // Estos son los detalles que se muestran en el nodo mismo
          ...(personInfo.rfc !== "N/A" && { RFC: personInfo.rfc }),
          ...(personInfo.otherKeyData.fechaNacimiento && { "Fec. Nac.": personInfo.otherKeyData.fechaNacimiento }),
          ...(personInfo.otherKeyData.docId && { "ID Doc.": personInfo.otherKeyData.docId.substring(0,10) + "..." }),
      },
      rawJsonData: jsonData, // El JSON completo para el modal de detalles
    },
  };

  return { node: personNode };
};


===== frontend/src/components/modals/RelationshipModal.tsx =====
import React, { useState } from 'react';

interface RelationshipModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: (label: string, isDirected: boolean) => void;
  sourceNodeName: string;
  targetNodeName: string;
  initialLabel?: string;
  initialIsDirected?: boolean;
}

const RelationshipModal: React.FC<RelationshipModalProps> = ({
  isOpen,
  onClose,
  onSubmit,
  sourceNodeName,
  targetNodeName,
  initialLabel = '',
  initialIsDirected = true,
}) => {
  const [label, setLabel] = useState(initialLabel);
  const [isDirected, setIsDirected] = useState(initialIsDirected);

  if (!isOpen) return null;

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSubmit(label, isDirected);
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-60 backdrop-blur-sm flex items-center justify-center z-50 p-4">
      <div className="bg-bg-secondary p-6 rounded-lg shadow-xl border border-input-border w-full max-w-md">
        <h2 className="text-xl font-semibold text-accent-cyan mb-4">
          {initialLabel ? 'Editar Relación' : 'Nueva Relación'}
        </h2>
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <p className="text-sm text-text-secondary mb-2">
              <span className="font-medium text-text-primary">{sourceNodeName}</span>
              <span className="mx-2">→</span>
              <span className="font-medium text-text-primary">{targetNodeName}</span>
            </p>
            <input
              type="text"
              value={label}
              onChange={(e) => setLabel(e.target.value)}
              placeholder="Etiqueta (ej. FAMILIAR, SOCIO)"
              className="w-full p-2 bg-input-bg border border-node-border rounded text-text-primary focus:border-accent-cyan focus:ring-1 focus:ring-accent-cyan transition"
              required
            />
          </div>
          <div className="mb-6">
            <label className="flex items-center text-text-secondary cursor-pointer">
              <input
                type="checkbox"
                checked={isDirected}
                onChange={(e) => setIsDirected(e.target.checked)}
                className="appearance-none w-4 h-4 bg-input-bg border-2 border-input-border rounded-sm transition-all duration-200 checked:bg-accent-cyan checked:border-accent-cyan"
              />
              <span className="ml-2 select-none">Relación dirigida (con flecha)</span>
            </label>
          </div>
          <div className="flex justify-end gap-3">
            <button type="button" onClick={onClose} className="px-4 py-2 rounded-md text-text-secondary hover:bg-input-bg transition-colors">
              Cancelar
            </button>
            <button type="submit" className="px-4 py-2 bg-accent-cyan text-bg-primary rounded-md hover:bg-accent-cyan-darker transition-colors font-medium">
              {initialLabel ? 'Actualizar' : 'Crear'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default RelationshipModal;

===== frontend/src/components/modals/JsonDetailModal.tsx =====
// frontend/src/components/modals/JsonDetailModal.tsx
import React from 'react';
import { Node } from 'reactflow';
import { DemoNodeData } from '../../types/graph';

interface JsonDetailModalProps {
  isOpen: boolean;
  onClose: () => void;
  jsonData: any;
  title?: string;
}

const JsonDetailModal: React.FC<JsonDetailModalProps> = ({ isOpen, onClose, jsonData, title }) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center z-[1000] p-4 transition-opacity duration-300 ease-in-out">
      <div className="bg-bg-secondary p-5 rounded-xl shadow-2xl max-w-4xl w-full max-h-[90vh] flex flex-col border border-accent-cyan-darker">
        <div className="flex justify-between items-center mb-4 pb-3 border-b border-input-border">
          <h2 className="text-2xl font-bold text-accent-cyan">{title || "Detalles del Nodo"}</h2>
          <button
            onClick={onClose}
            className="text-text-secondary hover:text-accent-cyan text-3xl leading-none font-semibold outline-none focus:outline-none"
            aria-label="Cerrar modal"
          >
            &times;
          </button>
        </div>
        <div className="flex-grow overflow-hidden rounded">
          <pre className="h-full bg-input-bg text-text-secondary p-4 rounded overflow-auto text-xs scrollbar-thin scrollbar-thumb-accent-cyan-darker scrollbar-track-bg-secondary">
            {JSON.stringify(jsonData, null, 2)}
          </pre>
        </div>
        <button
          onClick={onClose}
          className="mt-5 bg-accent-cyan text-bg-primary py-2.5 px-6 rounded-md hover:bg-accent-cyan-darker focus:outline-none focus:ring-2 focus:ring-accent-cyan focus:ring-opacity-50 transition-colors font-medium self-end"
        >
          Cerrar
        </button>
      </div>
    </div>
  );
};

export default JsonDetailModal;


===== frontend/src/components/auth/LoginForm.tsx =====
// frontend/src/components/auth/LoginForm.tsx
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import '../../assets/css/styles.css';
import config from '../../config';

interface LoginFormProps {
  onLoginSuccess: () => void; // This prop might become less critical if AppContent handles state
}

const LoginForm: React.FC<LoginFormProps> = ({ onLoginSuccess }) => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  // const [showPassword, setShowPassword] = useState(false); // Not used in current UI
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (loading) return;

    setError('');
    setLoading(true);

    try {
      const response = await fetch(config.api.endpoints.login, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: new URLSearchParams({ username, password }).toString(),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({ detail: 'Login failed. Server error.' }));
        setError(errorData.detail || 'Login failed');
        setLoading(false);
        return;
      }

      const data = await response.json();
      localStorage.setItem('access_token', data.access_token);
      
      // Dispatch a custom event to notify AppContent
      window.dispatchEvent(new CustomEvent('loginSuccess'));
      
      onLoginSuccess(); // Call original prop if still needed for other purposes
      navigate('/graph', { replace: true }); // Use replace to avoid login page in history

    } catch (err) {
      console.error('Login fetch error:', err);
      setError('An error occurred. Please try again.');
    } finally {
      // setLoading(false); // setLoading will be handled by navigation and re-render
      // No, keep setLoading(false) in case of error before navigation
      if (!localStorage.getItem('access_token')) { // Only set loading false if not navigated
          setLoading(false);
      }
    }
  };

  return (
    <div className="login">
      <form className="login__form" onSubmit={handleSubmit}>
        <h1 className="login__title">Login</h1>
        {error && (
          <p className="text-sm text-red-500 mb-4 text-center bg-red-900 bg-opacity-50 p-2 rounded">
            {error}
          </p>
        )}
        <div className="login__content">
          <div className="login__box">
            <div className="login__box-input">
              <input
                type="text"
                className="login__input"
                placeholder=" "
                value={username}
                onChange={(e) => setUsername(e.target.value)}
                id="login-username"
                required
                autoComplete="username"
              />
              <label htmlFor="login-username" className="login__label">Username</label>
            </div>
          </div>
          <div className="login__box">
            <div className="login__box-input">
              <input
                type="password" // Was: type={showPassword ? "text" : "password"}
                className="login__input"
                placeholder=" "
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                id="login-password"
                required
                autoComplete="current-password"
              />
              <label htmlFor="login-password" className="login__label">Password</label>
            </div>
          </div>
        </div>
        <button type="submit" className="login__button" disabled={loading}>
          {loading ? 'Logging in...' : 'Login'}
        </button>
      </form>
    </div>
  );
};

export default LoginForm;

===== frontend/src/components/graph/PersonNode.tsx =====
import React, { memo } from 'react';
import { Handle, Position, NodeProps } from 'reactflow';
import classnames from 'classnames';
import { User, Briefcase, Fingerprint, AlertTriangle } from 'lucide-react';
import { DemoNodeData } from '../../types/graph';

// Estilo para las esquinas biseladas (chamfered corners)
const ChamferStyle = () => (
  <style>{`
    .chamfer-clip {
      clip-path: polygon(10px 0, calc(100% - 10px) 0, 100% 10px, 100% calc(100% - 10px), calc(100% - 10px) 100%, 10px 100%, 0 calc(100% - 10px), 0 10px);
    }
  `}</style>
);

const PersonNode: React.FC<NodeProps<DemoNodeData>> = ({ data, selected, id: nodeId }) => {
  const statusColor = {
    normal: 'bg-accent-main',
    warning: 'bg-accent-warn',
    alert: 'bg-accent-danger',
    delayed: 'bg-accent-warn',
  }[data.status || 'normal'];

  return (
    <>
      <ChamferStyle />
      <div
        className={classnames(
          'person-node chamfer-clip p-0 rounded-none flex flex-col relative transition-all duration-300 group w-[240px] h-[300px]',
          'bg-node-bg border-2',
          {
            'border-accent-main-glow glow-main': selected,
            'border-node-border': !selected,
          }
        )}
      >
        {/* Handles */}
        <Handle type="source" position={Position.Top} id={`${nodeId}-s-t`} className="!bg-accent-main" />
        <Handle type="target" position={Position.Left} id={`${nodeId}-t-l`} className="!bg-accent-warn" />
        <Handle type="source" position={Position.Right} id={`${nodeId}-s-r`} className="!bg-accent-main" />
        <Handle type="target" position={Position.Bottom} id={`${nodeId}-t-b`} className="!bg-accent-warn" />

        {/* Header del Nodo */}
        <div className="w-full bg-bg-tertiary p-2 flex items-center justify-between font-mono text-xs text-text-secondary uppercase tracking-widest">
          <span>// Profile ID: {nodeId.slice(0, 8)}</span>
          <div className={`w-2 h-2 rounded-full ${statusColor} ${selected ? 'animate-pulse' : ''}`}></div>
        </div>

        {/* Contenido Principal */}
        <div className="p-3 flex-grow flex flex-col">
          <div className="flex gap-3">
            {/* Imagen con retícula */}
            <div className="relative w-20 h-20 flex-shrink-0">
              <img
                src={data.imageUrl || `https://api.dicebear.com/7.x/pixel-art/svg?seed=${nodeId}`}
                alt={data.name}
                className="w-full h-full object-cover filter grayscale"
              />
              <div className="absolute inset-0 bg-accent-main opacity-20 mix-blend-screen"></div>
              <svg className="absolute inset-0 text-accent-main opacity-50" fill="none" viewBox="0 0 100 100">
                <path d="M50 0V100" stroke="currentColor" strokeWidth="1"/>
                <path d="M0 50H100" stroke="currentColor" strokeWidth="1"/>
                <rect x="15" y="15" width="70" height="70" stroke="currentColor" strokeWidth="2"/>
              </svg>
            </div>
            {/* Info Primaria */}
            <div className="flex flex-col justify-center overflow-hidden">
              <h3 className="text-lg font-bold text-text-primary truncate">{data.name}</h3>
              <p className="text-sm text-text-secondary truncate">{data.title || 'No Asignado'}</p>
            </div>
          </div>

          {/* Separador */}
          <div className="w-full h-px bg-gradient-to-r from-transparent via-border-secondary to-transparent my-3"></div>

          {/* Datos Clave */}
          <div className="space-y-2 font-mono text-xs">
            <div className="flex items-center gap-2">
              <Fingerprint size={14} className="text-accent-main" />
              <span className="text-text-secondary">CURP:</span>
              <span className="text-text-primary">{data.rawJsonData?.curp_online?.data?.registros?.[0]?.curp || 'N/A'}</span>
            </div>
            <div className="flex items-center gap-2">
              <Briefcase size={14} className="text-accent-main" />
              <span className="text-text-secondary">RFC:</span>
              <span className="text-text-primary">{data.rawJsonData?.buro1?.data?.[0]?.rfc_completo || 'N/A'}</span>
            </div>
          </div>

          {/* Estado de Alerta */}
          {data.status === 'alert' && (
            <div className="mt-3 p-2 bg-accent-danger/10 border border-accent-danger/20 rounded-sm flex items-center gap-2">
              <AlertTriangle size={14} className="text-accent-danger" />
              <span className="text-xs text-accent-danger font-medium">Estado Crítico Detectado</span>
            </div>
          )}
        </div>
        
        {/* Footer del Nodo */}
        <div className="w-full bg-bg-tertiary p-1.5 text-center font-mono text-xs text-accent-warn uppercase tracking-wider">
          Classification: {data.status === 'alert' ? 'Critical' : 'Standard'}
        </div>
      </div>
    </>
  );
};

export default memo(PersonNode);

===== frontend/src/components/graph/JsonUploadButton.tsx =====
import React, { useRef } from 'react';
import { UploadCloud } from 'lucide-react';

interface JsonUploadButtonProps {
  onJsonUploaded: (jsonData: any, fileName?: string) => void; // Añadir fileName opcional
}

const JsonUploadButton: React.FC<JsonUploadButtonProps> = ({ onJsonUploaded }) => {
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        try {
          const json = JSON.parse(e.target?.result as string);
          onJsonUploaded(json, file.name); // Pasar file.name
        } catch (error) {
          console.error("Error parsing JSON:", error);
          alert("Failed to parse JSON file. Please ensure it's valid JSON.");
        }
      };
      reader.readAsText(file);
      if (fileInputRef.current) {
        fileInputRef.current.value = "";
      }
    }
  };

  const handleButtonClick = () => {
    fileInputRef.current?.click();
  };

  const handleDrop = (event: React.DragEvent<HTMLDivElement>) => {
    event.preventDefault();
    event.stopPropagation();
    event.currentTarget.classList.remove('border-accent-cyan', 'bg-gray-700');
    const file = event.dataTransfer.files?.[0];
    if (file && file.type === "application/json") {
        const reader = new FileReader();
        reader.onload = (e) => {
            try {
                const json = JSON.parse(e.target?.result as string);
                onJsonUploaded(json, file.name); // Pasar file.name
            } catch (error) {
                console.error("Error parsing JSON:", error);
                alert("Failed to parse JSON file. Please ensure it's valid JSON.");
            }
        };
        reader.readAsText(file);
    } else if (file) {
        alert("Please drop a valid JSON file.");
    }
  };

  const handleDragOver = (event: React.DragEvent<HTMLDivElement>) => {
    event.preventDefault();
    event.stopPropagation();
    event.currentTarget.classList.add('border-accent-cyan', 'bg-gray-700');
  };

  const handleDragLeave = (event: React.DragEvent<HTMLDivElement>) => {
    event.preventDefault();
    event.stopPropagation();
    event.currentTarget.classList.remove('border-accent-cyan', 'bg-gray-700');
  };

  return (
    <div
      onDrop={handleDrop}
      onDragOver={handleDragOver}
      onDragLeave={handleDragLeave}
      className="border-2 border-dashed border-gray-600 rounded-lg p-8 text-center cursor-pointer hover:border-accent-cyan transition-colors duration-200"
      onClick={handleButtonClick}
    >
      <input
        type="file"
        accept=".json"
        ref={fileInputRef}
        onChange={handleFileChange}
        className="hidden"
      />
      <UploadCloud size={48} className="mx-auto mb-4 text-gray-500" />
      <p className="text-text-secondary">
        Drag & drop your JSON file here, or{' '}
        <span className="text-accent-cyan font-semibold">click to browse</span>.
      </p>
    </div>
  );
};

export default JsonUploadButton;

===== frontend/src/components/graph/GraphCanvas.tsx =====
import React from 'react';

const GraphCanvas: React.FC = () => {
  console.log("GraphCanvas component is rendering (ultra-simple version)");

  return (
    <div
      style={{
        width: '100%',
        height: '100%', // asegura que este div intente llenar a su padre
        backgroundColor: 'rgba(0, 255, 0, 0.3)', // verde brillante, semi-transparente
        border: '5px dashed hotpink', // borde rosa brillante y discontinuo
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        color: 'white', // color de texto blanco para contraste
        fontSize: '2rem',
        padding: '20px',
      }}
      className="debug-border-canvas" // si tienes esta clase para depurar
    >
      GraphCanvas Test - ¿Puedes ver esto?
    </div>
  );
};

export default GraphCanvas;


===== frontend/src/components/graph/CustomConnectionLine.tsx =====
import React from 'react';
import { getSmoothStepPath, ConnectionLineComponentProps } from 'reactflow';

const CustomConnectionLine: React.FC<ConnectionLineComponentProps> = ({
  fromX,
  fromY,
  toX,
  toY,
  connectionLineStyle,
}) => {
  const [edgePath] = getSmoothStepPath({
    sourceX: fromX,
    sourceY: fromY,
    targetX: toX,
    targetY: toY,
  });

  return (
    <g>
      <path
        style={{
          stroke: 'var(--accent-cyan)',
          strokeWidth: 2.5,
          ...connectionLineStyle,
        }}
        fill="none"
        d={edgePath}
      />
      <circle 
        cx={toX} 
        cy={toY} 
        r={4} 
        fill="var(--accent-cyan)" 
        stroke="var(--bg-secondary)" 
        strokeWidth={1.5} 
      />
    </g>
  );
};

export default CustomConnectionLine; 

===== frontend/src/components/graph/CompanyNode.tsx =====
import React, { memo } from 'react';
import { Handle, Position, NodeProps } from 'reactflow';
import classnames from 'classnames';
import { Building2, Upload } from 'lucide-react';

interface CompanyNodeData {
  name: string;
  location?: string;
  logoUrl?: string;
  status?: 'normal' | 'warning' | 'alert' | 'delayed';
  onImageUpload?: (nodeId: string, file: File) => void;
  isHighlighted?: boolean;
  details?: any;
}

const CompanyNode: React.FC<NodeProps<CompanyNodeData>> = ({ data, selected, id }) => {
  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file && data.onImageUpload) {
      data.onImageUpload(id, file);
    }
  };

  const isSelectedOrHighlighted = selected || data.isHighlighted;

  return (
    <div
      className={classnames(
        'company-node w-48 p-3 rounded-lg flex flex-col items-center justify-center text-center relative transition-all duration-200',
        'bg-node-bg border-2', // Usar variables CSS
        {
          'border-node-border-selected shadow-node-selected': isSelectedOrHighlighted && data.status !== 'alert' && data.status !== 'warning',
          'border-node-border': !isSelectedOrHighlighted && data.status !== 'alert' && data.status !== 'warning',
          'node-alert-style': data.status === 'alert',
          'node-warning-style': data.status === 'warning',
        }
      )}
    >
      <Handle type="target" position={Position.Left} className="react-flow__handle" />
      
      <div className="relative mb-2">
        {data.logoUrl ? (
          <img
            src={data.logoUrl}
            alt={data.name}
            className="w-20 h-20 rounded-lg object-cover border-2 border-node-border"
          />
        ) : (
          <div className="w-20 h-20 rounded-lg bg-node-bg border-2 border-node-border flex items-center justify-center">
            <Building2 size={40} className="text-node-icon-color" />
          </div>
        )}
        {data.onImageUpload && (
          <label className="absolute bottom-0 right-0 bg-node-bg rounded-full p-1 cursor-pointer hover:bg-node-bg-hover transition-colors">
            <Upload size={14} className="text-node-icon-color" />
            <input
              type="file"
              accept="image/*"
              className="hidden"
              onChange={handleImageUpload}
            />
          </label>
        )}
      </div>

      <div className="node-content">
        <h3 className="text-sm font-semibold text-node-text mb-1">{data.name}</h3>
        {data.location && (
          <p className="text-xs text-node-text-secondary mb-1">{data.location}</p>
        )}
        {data.details && (
          <div className="text-xs text-node-text-secondary mt-1">
            {Object.entries(data.details).map(([key, value]) => (
              <div key={key} className="detail-item">
                <span className="detail-label">{key}:</span>{' '}
                <span className="detail-value">
                  {typeof value === 'object' ? JSON.stringify(value) : String(value)}
                </span>
              </div>
            ))}
          </div>
        )}
      </div>

      <Handle type="source" position={Position.Right} className="react-flow__handle" />
    </div>
  );
};

export default memo(CompanyNode);

===== frontend/src/components/layout/DropdownMenu.tsx =====
import React, { useState, useRef, useEffect, useCallback } from 'react';
import { ChevronRight, LucideIcon } from 'lucide-react';

export interface MenuItem {
  label?: string;
  action?: () => void;
  icon?: LucideIcon;
  disabled?: boolean;
  isSeparator?: boolean;
  shortcut?: string;
  submenu?: MenuItem[];
}

export interface DropdownMenuProps {
  triggerLabel: string;
  triggerIcon?: LucideIcon;
  items: MenuItem[];
  align?: 'left' | 'right';
}

const DropdownMenu: React.FC<DropdownMenuProps> = ({
  triggerLabel, triggerIcon: TriggerIcon, items, align = 'left',
}: DropdownMenuProps) => {
  const [isOpen, setIsOpen] = useState<boolean>(false);
  const [activeSubmenu, setActiveSubmenu] = useState<number | null>(null);
  const menuRef = useRef<HTMLDivElement>(null);
  const submenuTimer = useRef<NodeJS.Timeout>();

  const handleTriggerClick = useCallback(() => setIsOpen((prev: boolean) => !prev), []);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    };
    if (isOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    }
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, [isOpen]);

  const handleItemClick = (item: MenuItem) => {
    if (item.disabled || item.submenu) return;
    if (item.action) item.action();
    setIsOpen(false);
  };

  const handleItemMouseEnter = (index: number, hasSubmenu: boolean) => {
    clearTimeout(submenuTimer.current);
    if (hasSubmenu) {
      submenuTimer.current = setTimeout(() => setActiveSubmenu(index), 150);
    } else {
      setActiveSubmenu(null);
    }
  };

  const renderMenuItem = (item: MenuItem, index: number) => {
    if (item.isSeparator) {
      return <div key={`sep-${index}`} className="h-px my-1 bg-menu-border" />;
    }

    const hasSubmenu = !!item.submenu?.length;
    const isSubmenuActive = activeSubmenu === index;

    return (
      <div
        key={item.label}
        className="relative"
        onMouseEnter={() => handleItemMouseEnter(index, hasSubmenu)}
        onMouseLeave={() => clearTimeout(submenuTimer.current)}
      >
        <button
          className={`w-full px-3 py-1.5 text-sm text-left flex items-center justify-between gap-4 whitespace-nowrap rounded-sm mx-1
            ${item.disabled 
              ? 'text-menu-text-secondary/40 cursor-not-allowed' 
              : 'text-menu-text hover:bg-menu-hover-bg hover:text-menu-hover-text transition-colors duration-150'
            }
            ${isSubmenuActive ? 'bg-menu-hover-bg text-menu-hover-text' : ''}`}
          onClick={() => handleItemClick(item)}
          disabled={item.disabled}
        >
          <div className="flex items-center gap-2">
            {item.icon && (
              <item.icon 
                size={16} 
                className={`${item.disabled ? 'opacity-40' : ''} transition-colors duration-150`} 
              />
            )}
            <span>{item.label}</span>
          </div>
          <div className="flex items-center gap-2">
            {item.shortcut && (
              <span className="text-xs text-menu-text-secondary/70">{item.shortcut}</span>
            )}
            {hasSubmenu && <ChevronRight size={16} className="text-menu-text-secondary/70" />}
          </div>
        </button>

        {hasSubmenu && isSubmenuActive && (
          <div 
            className={`absolute top-0 mt-[-5px] 
              ${align === 'right' ? 'right-full mr-1' : 'left-full ml-1'} 
              bg-menu-bg rounded-md shadow-lg border border-menu-border py-1 z-10 min-w-[220px]
              transition-opacity duration-150 ease-in-out`}
          >
            {item.submenu?.map((subItem, subIndex) => renderMenuItem(subItem, subIndex))}
          </div>
        )}
      </div>
    );
  };

  return (
    <div className="relative h-full" ref={menuRef}>
      <button
        className={`flex items-center gap-2 px-3 h-full text-sm font-medium transition-colors duration-150
          hover:bg-menu-hover-bg focus:outline-none focus-visible:ring-2 focus-visible:ring-accent-cyan/50
          ${isOpen 
            ? 'bg-menu-active-bg text-menu-active-text' 
            : 'text-menu-text hover:text-menu-hover-text'
          }`}
        onClick={handleTriggerClick}
      >
        {TriggerIcon && (
          <TriggerIcon 
            size={16} 
            className={`transition-colors duration-150 ${
              isOpen ? 'text-menu-active-text' : 'text-menu-text'
            }`} 
          />
        )}
        <span>{triggerLabel}</span>
      </button>
      {isOpen && (
        <div 
          className={`absolute top-full mt-1 bg-menu-bg rounded-md shadow-lg border border-menu-border py-1 z-50 min-w-[240px]
            ${align === 'right' ? 'right-0' : 'left-0'}
            transition-all duration-150 ease-in-out transform origin-top
            ${isOpen ? 'opacity-100 scale-100' : 'opacity-0 scale-95'}`}
        >
          {items.map((item, index) => renderMenuItem(item, index))}
        </div>
      )}
    </div>
  );
};

export default DropdownMenu;


===== frontend/src/components/layout/TopMenuBar.tsx =====
import React from 'react';
import DropdownMenu, { MenuItem } from './DropdownMenu';
import { FileCode, Edit, Eye, HelpCircle, Database, User, Settings } from 'lucide-react';

interface TopMenuBarProps {
  onFileMenuSelect: (action: string) => void;
  onEditMenuSelect: (action: string) => void;
  onViewMenuSelect: (action: string) => void;
}

const TopMenuBar: React.FC<TopMenuBarProps> = ({
  onFileMenuSelect,
  onEditMenuSelect,
  onViewMenuSelect,
}) => {
  const fileMenuItems: MenuItem[] = [
    { label: 'Nuevo Grafo', action: () => onFileMenuSelect('new'), icon: FileCode },
    { label: 'Abrir...', action: () => onFileMenuSelect('open'), icon: FileCode },
    { label: 'Guardar', action: () => onFileMenuSelect('save'), icon: FileCode },
    { label: 'Exportar...', action: () => onFileMenuSelect('export'), icon: FileCode },
  ];

  const editMenuItems: MenuItem[] = [
    { label: 'Deshacer', action: () => onEditMenuSelect('undo'), icon: Edit },
    { label: 'Rehacer', action: () => onEditMenuSelect('redo'), icon: Edit },
    { label: 'Copiar', action: () => onEditMenuSelect('copy'), icon: Edit },
    { label: 'Pegar', action: () => onEditMenuSelect('paste'), icon: Edit },
  ];

  const viewMenuItems: MenuItem[] = [
    { label: 'Zoom In', action: () => onViewMenuSelect('zoomIn'), icon: Eye },
    { label: 'Zoom Out', action: () => onViewMenuSelect('zoomOut'), icon: Eye },
    { label: 'Reset View', action: () => onViewMenuSelect('resetView'), icon: Eye },
  ];

  return (
    <div className="relative flex items-center w-full px-4 bg-bg-secondary/70 backdrop-blur-sm border-b border-border-primary h-11 shadow-lg z-20 flex-shrink-0">
      {/* Logo y Título */}
      <div className="flex items-center gap-2 mr-6">
        <Database size={18} className="text-accent-main" />
        <span className="font-bold text-lg text-text-primary tracking-wider font-mono">NODEX</span>
      </div>

      {/* Menús Principales */}
      <div className="flex items-center h-full gap-1 uppercase text-xs tracking-widest font-semibold">
        <div className="hover:bg-bg-tertiary px-3 py-2 rounded-sm transition-colors">
          <DropdownMenu 
            triggerLabel="Archivo" 
            items={fileMenuItems}
          />
        </div>
        <div className="hover:bg-bg-tertiary px-3 py-2 rounded-sm transition-colors">
          <DropdownMenu 
            triggerLabel="Edición" 
            items={editMenuItems}
          />
        </div>
        <div className="hover:bg-bg-tertiary px-3 py-2 rounded-sm transition-colors">
          <DropdownMenu 
            triggerLabel="Visualización" 
            items={viewMenuItems}
          />
        </div>
      </div>

      {/* Espaciador */}
      <div className="flex-grow" />

      {/* Acciones de Usuario */}
      <div className="flex items-center h-full gap-2">
        <button 
          className="p-2 rounded-sm hover:bg-bg-tertiary text-text-secondary hover:text-text-primary transition-colors"
          title="Configuración"
        >
          <Settings size={16} />
        </button>
        <button 
          className="p-2 rounded-sm hover:bg-bg-tertiary text-text-secondary hover:text-text-primary transition-colors"
          title="Ayuda"
        >
          <HelpCircle size={16} />
        </button>
        <div className="w-px h-5 bg-border-secondary mx-2"></div>
        <div 
          className="w-8 h-8 rounded-sm bg-bg-tertiary flex items-center justify-center text-text-secondary cursor-pointer hover:bg-accent-main hover:text-bg-primary transition-colors border border-border-secondary"
          title="Perfil de Usuario"
        >
          <User size={16} />
        </div>
      </div>
    </div>
  );
};

export default TopMenuBar;


===== frontend/src/components/AnimatedBackground.js =====
import React, { useEffect, useRef } from 'react';

const AnimatedBackground = () => {
  const canvasRef = useRef(null);

  useEffect(() => {
    const can = canvasRef.current;
    if (!can) return;

    const ctx = can.getContext('2d');
    let animationFrameId;
    let pulseTimeoutId;
    
    // --- NUEVO: Objeto para guardar la posición del ratón ---
    const mouse = {
      x: undefined,
      y: undefined,
      radius: 120 // Área de efecto del ratón
    };

    // --- NUEVO: Listeners para el ratón ---
    const handleMouseMove = (event) => {
        mouse.x = event.clientX; // Usar clientX/Y para coordenadas de la ventana
        mouse.y = event.clientY;
    };
    const handleMouseOut = () => {
        mouse.x = undefined;
        mouse.y = undefined;
    };
    window.addEventListener('mousemove', handleMouseMove);
    window.addEventListener('mouseout', handleMouseOut);

    // Get theme colors from CSS variables (del archivo styles.css)
    const computedStyle = getComputedStyle(document.documentElement);
    const bgColorPrimary = computedStyle.getPropertyValue('--body-color').trim() || '#05080D';
    const accentHue = parseInt(computedStyle.getPropertyValue('--hue').trim(), 10) || 200;

    // Convert bgColorPrimary to RGB for the trail effect
    let bgR = 5, bgG = 8, bgB = 13;
    if (bgColorPrimary.startsWith('#')) {
      const hex = bgColorPrimary.substring(1);
      if (hex.length === 3) {
        bgR = parseInt(hex[0] + hex[0], 16);
        bgG = parseInt(hex[1] + hex[1], 16);
        bgB = parseInt(hex[2] + hex[2], 16);
      } else if (hex.length === 6) {
        bgR = parseInt(hex.substring(0, 2), 16);
        bgG = parseInt(hex.substring(2, 4), 16);
        bgB = parseInt(hex.substring(4, 6), 16);
      }
    }
    const trailColor = `rgba(${bgR}, ${bgG}, ${bgB}, 0.15)`;
    const particleTrailColor = `rgba(${bgR}, ${bgG}, ${bgB}, 0.07)`;

    can.width = window.innerWidth;
    can.height = window.innerHeight;

    const particles = [];
    // --- MODIFICADO: Aumentamos el número de partículas ---
    const maxParticles = 120; // Antes era 60
    const connectionDistance = 150;
    const particleBaseRadius = 1.5;

    function drawBackgroundEffect() {
      ctx.fillStyle = trailColor;
      ctx.fillRect(0, 0, can.width, can.height);
      ctx.fillStyle = particleTrailColor;
      ctx.fillRect(0, 0, can.width, can.height);
    }

    function Particle(x, y, speed, color, radius) {
      this.x = x;
      this.y = y;
      this.vx = speed.x;
      this.vy = speed.y;
      this.color = color;
      this.radius = radius;
      this.initialLife = Math.random() * 150 + 150;
      this.life = this.initialLife;
      this.connections = 0;
      this.maxConnections = 4; // Un poco más de conexiones

      this.draw = function () {
        const currentRadius = this.radius * (this.life / this.initialLife);
        if (currentRadius < 0.5) return;
        ctx.beginPath();
        ctx.arc(this.x, this.y, currentRadius, 0, Math.PI * 2, false);
        ctx.shadowBlur = 5;
        ctx.shadowColor = this.color;
        ctx.fillStyle = this.color;
        ctx.fill();
        ctx.shadowBlur = 0;
      };

      this.update = function () {
        this.x += this.vx;
        this.y += this.vy;
        this.life -= 0.5;

        // --- NUEVO: Interacción con el ratón (efecto de repulsión) ---
        if (mouse.x !== undefined && mouse.y !== undefined) {
            const dxMouse = this.x - mouse.x;
            const dyMouse = this.y - mouse.y;
            const distanceMouse = Math.sqrt(dxMouse * dxMouse + dyMouse * dyMouse);
            if (distanceMouse < mouse.radius) {
                const forceDirectionX = dxMouse / distanceMouse;
                const forceDirectionY = dyMouse / distanceMouse;
                const force = (mouse.radius - distanceMouse) / mouse.radius;
                const directionX = forceDirectionX * force * 0.5; // Ajusta la fuerza de repulsión
                const directionY = forceDirectionY * force * 0.5;
                this.x += directionX;
                this.y += directionY;
            }
        }

        // Soft bounce
        if (this.x + this.radius > can.width || this.x - this.radius < 0) {
          this.vx *= -0.7;
          this.x = Math.max(this.radius, Math.min(can.width - this.radius, this.x));
        }
        if (this.y + this.radius > can.height || this.y - this.radius < 0) {
          this.vy *= -0.7;
          this.y = Math.max(this.radius, Math.min(can.height - this.radius, this.y));
        }
        // Gentle random direction change
        if (Math.random() < 0.02) {
          const angleChange = (Math.random() - 0.5) * (Math.PI / 4);
          const currentAngle = Math.atan2(this.vy, this.vx);
          const magnitude = Math.sqrt(this.vx ** 2 + this.vy ** 2) * (0.8 + Math.random() * 0.4);
          this.vx = Math.cos(currentAngle + angleChange) * magnitude;
          this.vy = Math.sin(currentAngle + angleChange) * magnitude;
        }
        // Limit speed
        const maxSpeed = 1.5;
        const currentSpeed = Math.sqrt(this.vx ** 2 + this.vy ** 2);
        if (currentSpeed > maxSpeed) {
          this.vx = (this.vx / currentSpeed) * maxSpeed;
          this.vy = (this.vy / currentSpeed) * maxSpeed;
        }
      };
    }

    function connectParticles() {
      particles.forEach(p => p.connections = 0);
      for (let i = 0; i < particles.length; i++) {
        // --- NUEVO: Conectar partículas con el ratón ---
        if (mouse.x !== undefined && mouse.y !== undefined) {
            const dx = particles[i].x - mouse.x;
            const dy = particles[i].y - mouse.y;
            const distance = Math.sqrt(dx * dx + dy * dy);
            if (distance < connectionDistance * 1.2) { // Un poco más de rango para el ratón
                const opacity = Math.max(0, 1 - (distance / (connectionDistance * 1.2)));
                ctx.beginPath();
                ctx.strokeStyle = `hsla(${accentHue}, 100%, 70%, ${opacity * 0.5})`;
                ctx.lineWidth = 0.8;
                ctx.moveTo(particles[i].x, particles[i].y);
                ctx.lineTo(mouse.x, mouse.y);
                ctx.stroke();
            }
        }

        if (particles[i].connections >= particles[i].maxConnections) continue;
        for (let j = i + 1; j < particles.length; j++) {
          if (particles[j].connections >= particles[j].maxConnections) continue;
          const dx = particles[i].x - particles[j].x;
          const dy = particles[i].y - particles[j].y;
          const distance = Math.sqrt(dx * dx + dy * dy);
          if (distance < connectionDistance) {
            const opacity = Math.max(0, 1 - (distance / connectionDistance) * 0.8);
            ctx.beginPath();
            const connectionHue = accentHue;
            const connectionLightness = 60 + Math.random() * 10;
            ctx.strokeStyle = `hsla(${connectionHue}, 100%, ${connectionLightness}%, ${opacity * 0.4})`;
            ctx.lineWidth = 0.6;
            ctx.moveTo(particles[i].x, particles[i].y);
            ctx.lineTo(particles[j].x, particles[j].y);
            ctx.stroke();
            particles[i].connections++;
            particles[j].connections++;
            if (particles[i].connections >= particles[i].maxConnections) break;
          }
        }
      }
    }

    const particleBaseSpeed = 0.5;
    // --- MODIFICADO: Generar partículas más rápido ---
    const pulsePeriod = 800; // Antes era 1200
    const particlesPerPulse = 4; // Antes era 2

    function pulse() {
      if (particles.length < maxParticles) {
        const numToSpawn = Math.min(particlesPerPulse, maxParticles - particles.length);
        for (let i = 0; i < numToSpawn; i++) {
          const edge = Math.floor(Math.random() * 4);
          let startX, startY;
          switch(edge) {
            case 0: startX = Math.random() * can.width; startY = 0 - particleBaseRadius * 5; break;
            case 1: startX = can.width + particleBaseRadius * 5; startY = Math.random() * can.height; break;
            case 2: startX = Math.random() * can.width; startY = can.height + particleBaseRadius * 5; break;
            case 3: startX = 0 - particleBaseRadius * 5; startY = Math.random() * can.height; break;
            default: startX = can.width / 2; startY = can.height / 2;
          }
          const angleToCenter = Math.atan2(can.height / 2 - startY, can.width / 2 - startX);
          const speedMagnitude = particleBaseSpeed * (0.7 + Math.random() * 0.6);
          const currentHue = accentHue + (Math.random() * 30 - 15);
          const color = `hsl(${currentHue}, 100%, 60%)`;
          particles.push(
            new Particle(
              startX, startY,
              {
                x: Math.cos(angleToCenter) * speedMagnitude + (Math.random() - 0.5) * 0.2,
                y: Math.sin(angleToCenter) * speedMagnitude + (Math.random() - 0.5) * 0.2,
              },
              color,
              particleBaseRadius + Math.random() * 2
            )
          );
        }
      }
      pulseTimeoutId = setTimeout(pulse, pulsePeriod + Math.random() * 500);
    }

    function gameMove() {
      drawBackgroundEffect();
      for (let i = particles.length - 1; i >= 0; i--) {
        particles[i].update();
        particles[i].draw();
        if (particles[i].life <= 0) {
          particles.splice(i, 1);
        }
      }
      connectParticles();
      animationFrameId = requestAnimationFrame(gameMove);
    }

    const handleResize = () => {
      can.width = window.innerWidth;
      can.height = window.innerHeight;
    };

    window.addEventListener('resize', handleResize);

    // Inicializar con algunas partículas
    for(let k=0; k < Math.min(30, maxParticles); k++) { //--- Aumentamos las partículas iniciales
      const currentHue = accentHue + (Math.random() * 40 - 20);
      const color = `hsl(${currentHue}, 100%, 60%)`;
      particles.push(
        new Particle(
          can.width / 2 + (Math.random() - 0.5) * can.width * 0.5,
          can.height / 2 + (Math.random() - 0.5) * can.height * 0.5,
          {
            x: (Math.random() - 0.5) * particleBaseSpeed,
            y: (Math.random() - 0.5) * particleBaseSpeed,
          },
          color,
          particleBaseRadius + Math.random() * 1.5
        )
      );
    }

    pulse();
    gameMove();

    return () => {
      // --- Limpiar todos los listeners ---
      window.removeEventListener('resize', handleResize);
      window.removeEventListener('mousemove', handleMouseMove);
      window.removeEventListener('mouseout', handleMouseOut);
      cancelAnimationFrame(animationFrameId);
      clearTimeout(pulseTimeoutId);
      particles.length = 0; // Vaciar el array para liberar memoria
    };
  }, []);

  // El canvas debe estar posicionado correctamente con CSS para cubrir el fondo
  return <canvas id="loginBackgroundCanvas" ref={canvasRef} style={{ position: 'fixed', top: 0, left: 0, zIndex: -1, width: '100vw', height: '100vh' }} />;
};

export default AnimatedBackground;


===== frontend/src/data/defaultGraphData.ts =====
import { Node, Edge, MarkerType } from 'reactflow';
import { DemoNodeData } from '../types/graph';

export const defaultNodes: Node<DemoNodeData>[] = [
  // People (mapped to PersonNode)
  {
    id: 'alice',
    type: 'person', // This will use PersonNode
    position: { x: 600, y: 50 },
    data: { name: 'Alice', title: 'CEO', typeDetails: 'Executive User', status: 'normal', icon: 'user-tie', details: { department: 'Executive', employeeId: 'E1001' } },
    className: 'node-appear',
  },
  {
    id: 'bob',
    type: 'person',
    position: { x: 350, y: 200 },
    data: { name: 'Bob', title: 'Dev Manager', typeDetails: 'Management User', status: 'normal', icon: 'user-cog', details: { department: 'Engineering', team: 'Alpha Team' } },
    className: 'node-appear',
  },
  {
    id: 'carol',
    type: 'person',
    position: { x: 850, y: 200 },
    data: { name: 'Carol', title: 'Product Manager', typeDetails: 'Management User', status: 'warning', icon: 'user-shield', details: { department: 'Product', projectsOverseeing: ['Alpha', 'Beta'] } },
    className: 'node-appear',
  },
  {
    id: 'david',
    type: 'person',
    position: { x: 200, y: 350 },
    data: { name: 'David', title: 'Sr. Developer', typeDetails: 'Technical User', status: 'normal', icon: 'user-hard-hat', details: { team: 'Alpha Team', skills: ['React', 'Node.js'] } },
    className: 'node-appear',
  },
  {
    id: 'eve',
    type: 'person',
    position: { x: 500, y: 350 },
    data: { name: 'Eve', title: 'UX Designer', typeDetails: 'Technical User', status: 'normal', icon: 'user-pen', details: { team: 'Alpha Team', specialisation: 'Mobile UX' } },
    className: 'node-appear',
  },

  // Systems/Computers (mapped to CompanyNode)
  {
    id: 'main_server',
    type: 'company', // This will use CompanyNode
    position: { x: 350, y: 550 },
    data: { name: 'Main Server', location: 'DC-1 Rack A', typeDetails: 'Primary Application Server', status: 'normal', icon: 'server', details: { ip: '192.168.1.10', os: 'Linux Ubuntu 22.04' } },
    className: 'node-appear',
  },
  {
    id: 'db_server',
    type: 'company',
    position: { x: 600, y: 700 },
    data: { name: 'Database Server', location: 'DC-1 Rack B', typeDetails: 'PostgreSQL Cluster', status: 'alert', icon: 'database', details: { ip: '192.168.1.15', version: 'PostgreSQL 14', issue: 'High CPU Load' } },
    className: 'node-appear',
  },
  {
    id: 'backup_server',
    type: 'company',
    position: { x: 100, y: 700 },
    data: { name: 'Backup Server', location: 'DC-2 Offsite', typeDetails: 'Daily Backup Storage', status: 'normal', icon: 'archive', details: { ip: '10.10.5.20', lastBackup: '2023-10-26 03:00 UTC' } },
    className: 'node-appear',
  },

  // Projects (mapped to CompanyNode)
  {
    id: 'project_alpha',
    type: 'company',
    position: { x: 700, y: 350 },
    data: { name: 'Project Alpha', location: 'Q4 Initiative', typeDetails: 'Core Product Rewrite', status: 'normal', icon: 'clipboard-list', details: { deadline: '2023-12-15', budget: '$250,000' } },
    className: 'node-appear',
  },
  {
    id: 'project_beta',
    type: 'company',
    position: { x: 1000, y: 350 },
    data: { name: 'Project Beta', location: 'R&D Effort', typeDetails: 'New Feature Exploration', status: 'delayed', icon: 'lightbulb', details: { statusReason: 'Resource constraints', revisedEta: '2024-02-01' } },
    className: 'node-appear',
  },
  {
    id: 'firewall_main',
    type: 'company',
    position: { x: 600, y: 550 },
    data: { name: 'Firewall GW', location: 'Network Edge', typeDetails: 'Main Security Gateway', status: 'warning', icon: 'shield-check', details: { policy: 'Strict', lastAudit: '2023-09-15', issue: 'Firmware update pending' } },
    className: 'node-appear',
  }
];

export const defaultEdges: Edge[] = [
  // Hierarchy
  { id: 'e-alice-bob', source: 'alice', target: 'bob', label: 'Manages', type: 'smoothstep', animated: false, style: { stroke: 'var(--accent-cyan)', strokeWidth: 1.5 }, markerEnd: { type: MarkerType.ArrowClosed, color: 'var(--accent-cyan)' }, className: 'edge-appear' },
  { id: 'e-alice-carol', source: 'alice', target: 'carol', label: 'Manages', type: 'smoothstep', style: { stroke: 'var(--accent-cyan)', strokeWidth: 1.5 }, markerEnd: { type: MarkerType.ArrowClosed, color: 'var(--accent-cyan)' }, className: 'edge-appear' },
  { id: 'e-bob-david', source: 'bob', target: 'david', label: 'Leads', type: 'smoothstep', style: { stroke: 'var(--accent-green)', strokeWidth: 1.5 }, markerEnd: { type: MarkerType.ArrowClosed, color: 'var(--accent-green)' }, className: 'edge-appear' },
  { id: 'e-bob-eve', source: 'bob', target: 'eve', label: 'Leads', type: 'smoothstep', style: { stroke: 'var(--accent-green)', strokeWidth: 1.5 }, markerEnd: { type: MarkerType.ArrowClosed, color: 'var(--accent-green)' }, className: 'edge-appear' },

  // Project Assignments
  { id: 'e-carol-project_alpha', source: 'carol', target: 'project_alpha', label: 'Oversees', type: 'smoothstep', style: { stroke: 'var(--accent-purple)', strokeWidth: 1.5 }, markerEnd: { type: MarkerType.ArrowClosed, color: 'var(--accent-purple)' }, className: 'edge-appear' },
  { id: 'e-carol-project_beta', source: 'carol', target: 'project_beta', label: 'Oversees', type: 'smoothstep', style: { stroke: 'var(--accent-purple)', strokeWidth: 1.5 }, markerEnd: { type: MarkerType.ArrowClosed, color: 'var(--accent-purple)' }, className: 'edge-appear' },
  { id: 'e-david-project_alpha', source: 'david', target: 'project_alpha', label: 'Works On', type: 'smoothstep', animated: true, style: { stroke: 'var(--accent-orange)', strokeWidth: 2 }, markerEnd: { type: MarkerType.ArrowClosed, color: 'var(--accent-orange)' }, className: 'edge-appear' },
  { id: 'e-eve-project_alpha', source: 'eve', target: 'project_alpha', label: 'Works On', type: 'smoothstep', animated: true, style: { stroke: 'var(--accent-orange)', strokeWidth: 2 }, markerEnd: { type: MarkerType.ArrowClosed, color: 'var(--accent-orange)' }, className: 'edge-appear' },
  { id: 'e-david-project_beta', source: 'david', target: 'project_beta', label: 'Consults For', type: 'smoothstep', style: { stroke: 'var(--accent-pink)', strokeWidth: 1.5 }, markerEnd: { type: MarkerType.ArrowClosed, color: 'var(--accent-pink)' }, className: 'edge-appear' },

  // System Connections
  { id: 'e-david-main_server', source: 'david', target: 'main_server', label: 'Accesses (SSH)', type: 'smoothstep', className: 'edge-appear' },
  { id: 'e-main_server-firewall', source: 'main_server', target: 'firewall_main', label: 'Protected By', type: 'smoothstep', animated: true, style: { stroke: 'var(--accent-green)', strokeWidth: 2 }, markerEnd: { type: MarkerType.ArrowClosed, color: 'var(--accent-green)' }, className: 'edge-appear' },
  { id: 'e-firewall-db_server', source: 'firewall_main', target: 'db_server', label: 'Protects', type: 'smoothstep', style: { stroke: 'var(--accent-red)', strokeWidth: 1.5 }, markerEnd: { type: MarkerType.ArrowClosed, color: 'var(--accent-red)' }, className: 'edge-appear' }, // Edge to alert node
  { id: 'e-main_server-db_server', source: 'main_server', target: 'db_server', label: 'Connects To', type: 'smoothstep', animated: true, style: { stroke: 'var(--accent-red)', strokeWidth: 2.5 }, markerEnd: { type: MarkerType.ArrowClosed, color: 'var(--accent-red)' }, className: 'edge-appear' },
  { id: 'e-main_server-backup_server', source: 'main_server', target: 'backup_server', label: 'Backs Up To', type: 'smoothstep', className: 'edge-appear' },
  { id: 'e-project_alpha-db_server', source: 'project_alpha', target: 'db_server', label: 'Uses Data From', type: 'smoothstep', style: { stroke: 'var(--accent-red)', strokeWidth: 1.5 }, markerEnd: { type: MarkerType.ArrowClosed, color: 'var(--accent-red)' }, className: 'edge-appear' },

  // Inter-departmental
  { id: 'e-bob-carol', source: 'bob', target: 'carol', label: 'Collaborates With', type: 'smoothstep', style: { stroke: 'var(--text-secondary)', strokeDasharray: '5 5', strokeWidth: 1.5 }, markerEnd: { type: MarkerType.ArrowClosed, color: 'var(--text-secondary)' }, className: 'edge-appear' },
  { id: 'e-eve-main_server', source: 'eve', target: 'main_server', label: 'Uses API', type: 'smoothstep', style: { stroke: '#7c3aed', strokeDasharray: '3 3', strokeWidth: 1.5 }, markerEnd: { type: MarkerType.ArrowClosed, color: '#7c3aed' }, className: 'edge-appear' }, // Eve also interacts with main server
]; 

===== frontend/public/index.html =====
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
  <title>nodex</title>
</head>
<body>
  <div id="root"></div>
</body>
</html>


===== backend/app/models.py =====
from pydantic import BaseModel
from typing import Optional, List, Dict, Any

class Token(BaseModel):
    access_token: str
    token_type: str

class TokenData(BaseModel):
    username: Optional[str] = None

class User(BaseModel):
    username: str
    email: Optional[str] = None
    full_name: Optional[str] = None
    disabled: Optional[bool] = None

class UserInDB(User):
    hashed_password: str

class Node(BaseModel):
    label: str
    properties: dict

# Puedes añadir más modelos para representar la estructura de tus nodos si es necesario
# class PersonNode(BaseModel):
#     curp: str
#     nombre_completo: str
#     # ... otros campos


===== backend/app/auth.py =====
import os
from datetime import datetime, timedelta
from typing import Optional, Dict
from jose import JWTError, jwt
from passlib.context import CryptContext
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer

from . import models

# Configuración (mejor en variables de entorno)
JWT_SECRET_KEY = os.getenv("JWT_SECRET_KEY", "supersecretkey") # CAMBIA ESTO EN PRODUCCIÓN
ALGORITHM = os.getenv("ALGORITHM", "HS256")
ACCESS_TOKEN_EXPIRE_MINUTES = int(os.getenv("ACCESS_TOKEN_EXPIRE_MINUTES", 30))

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

# Base de datos de usuarios en memoria (SOLO PARA PoC)
fake_users_db: Dict[str, models.UserInDB] = {}

def init_fake_users_db():
    # Crear un usuario de ejemplo
    hashed_password = get_password_hash("testpassword")
    fake_users_db["testuser"] = models.UserInDB(
        username="testuser",
        email="testuser@example.com",
        full_name="Test User",
        hashed_password=hashed_password,
        disabled=False
    )

def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password):
    return pwd_context.hash(password)

def authenticate_user(db: dict, username: str, password: str) -> Optional[models.User]:
    user_in_db = db.get(username)
    if not user_in_db:
        return None
    if not verify_password(password, user_in_db.hashed_password):
        return None
    return models.User(**user_in_db.dict())

def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=15)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, JWT_SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

async def get_current_user(token: str = Depends(oauth2_scheme)) -> models.User:
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, JWT_SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
        token_data = models.TokenData(username=username)
    except JWTError:
        raise credentials_exception
    
    user_dict = fake_users_db.get(token_data.username)
    if user_dict is None:
        raise credentials_exception
    user = models.User(**user_dict.dict()) # Convert UserInDB to User
    return user

async def get_current_active_user(current_user: models.User = Depends(get_current_user)):
    if current_user.disabled:
        raise HTTPException(status_code=400, detail="Inactive user")
    return current_user


===== backend/app/crud.py =====
import os
import json
from typing import Dict, Any, Tuple, List
import redis
from fastapi import HTTPException

# Configuration from environment variables
REDIS_HOST = os.getenv("REDIS_HOST", "localhost")
REDIS_PORT = int(os.getenv("REDIS_PORT", 6379))
REDIS_PASSWORD = os.getenv("REDIS_PASSWORD", None)
REDISGRAPH_GRAPH_NAME = os.getenv("REDISGRAPH_GRAPH_NAME", "sivg_graph")

redis_conn = None
redis_graph = None  # This will be a redis.graph.Graph object

async def init_db_connection():
    global redis_conn, redis_graph
    try:
        print(f"DEBUG: backend/app/crud.py - redis-py version: {redis.__version__}")
        redis_conn = redis.Redis(
            host=REDIS_HOST,
            port=REDIS_PORT,
            password=REDIS_PASSWORD,
            decode_responses=False  # Important for RedisGraph to work correctly with redis-py
        )
        redis_conn.ping()
        print(f"Successfully connected to Redis at {REDIS_HOST}:{REDIS_PORT}")

        if hasattr(redis_conn, 'graph'):
            redis_graph = redis_conn.graph(REDISGRAPH_GRAPH_NAME)
            print(f"RedisGraph object obtained successfully for graph: {REDISGRAPH_GRAPH_NAME}")
        else:
            print(f"ERROR: 'redis.Redis' object does NOT have attribute 'graph'. Available attributes: {dir(redis_conn)}")
            raise AttributeError(f"'Redis' object (version {redis.__version__}) has no attribute 'graph'")

    except redis.exceptions.ConnectionError as e:
        print(f"Failed to connect to Redis: {e}")
        raise HTTPException(
            status_code=503,
            detail=f"Could not connect to Redis: {e}"
        )
    except AttributeError as ae:
        print(f"AttributeError during RedisGraph client initialization: {ae}")
        raise HTTPException(
            status_code=503,
            detail=f"Could not initialize RedisGraph client (AttributeError): {ae}"
        )
    except Exception as e:
        print(f"Failed to initialize RedisGraph object (General Exception): {e}")
        import traceback
        print(traceback.format_exc())
        raise HTTPException(
            status_code=503,
            detail=f"Could not initialize RedisGraph (General Exception): {e}"
        )

async def close_db_connection():
    global redis_conn
    if redis_conn:
        redis_conn.close()
        print("Redis connection closed.")

async def create_indices_if_needed():
    if not redis_graph:
        print("RedisGraph not initialized. Skipping index creation.")
        return

    expected_labels = ["person", "company", "UnknownNode"]  # From ReactFlow node types
    for label in expected_labels:
        if not label or not label.strip():
            continue
        try:
            # Index creation is idempotent in recent RedisGraph versions
            await redis_graph.query(f"CREATE INDEX FOR (n:{label}) ON (n.frontend_id)")
            print(f"Ensured index exists for :{label}(frontend_id)")
        except redis.exceptions.ResponseError as e:
            if any(msg in str(e).lower() for msg in ["already created", "already exists", "index already exists"]):
                print(f"Index on :{label}(frontend_id) already exists.")
            else:
                print(f"Could not create or verify index for :{label}(frontend_id). Error: {e}")
        except Exception as e:
            print(f"Unexpected error creating index for :{label}(frontend_id): {e}")

async def process_and_store_json(data: Dict[str, Any], mode: str = "overwrite"):
    if not redis_graph:
        raise HTTPException(status_code=503, detail="Database not connected")

    if mode == "overwrite":
        try:
            await redis_graph.query("MATCH (n) DETACH DELETE n")
            print("Graph cleared for overwrite.")
        except redis.exceptions.ResponseError as e:
            print(f"Note: Could not delete graph contents (may be empty): {e}")
    
    # Process nodes
    if "nodes" in data and isinstance(data["nodes"], list):
        for node_data in data["nodes"]:
            node_frontend_id = node_data.get("id")
            label = node_data.get("type", "UnknownNode")
            if not label or not label.strip():
                label = "UnknownNode"

            props_from_rf = node_data.get("data", {})
            
            cypher_props = {'frontend_id': node_frontend_id}
            if isinstance(props_from_rf, dict):
                for key, value in props_from_rf.items():
                    if isinstance(value, (str, int, float, bool)):
                        cypher_props[key] = value
                    elif key == 'rawJsonData' and value is not None:
                        try:
                            cypher_props['rawJsonData'] = json.dumps(value)
                        except (TypeError, ValueError):
                            cypher_props['rawJsonData'] = "{}"
            
            query = f"CREATE (n:{label} $props)"
            try:
                await redis_graph.query(query, {'props': cypher_props})
            except Exception as e:
                print(f"Error creating node {node_frontend_id} ({label}): {e}")

    # Process edges
    if "edges" in data and isinstance(data["edges"], list):
        for edge_data in data["edges"]:
            source_frontend_id = edge_data.get("source")
            target_frontend_id = edge_data.get("target")
            relation_type = edge_data.get("label", "RELATED_TO")
            if not relation_type or not relation_type.strip():
                relation_type = "RELATED_TO"
            
            # Sanitize relation_type for Cypher
            sanitized_relation_type = "".join(c if c.isalnum() else "_" for c in str(relation_type))
            if not sanitized_relation_type or sanitized_relation_type[0].isdigit():
                sanitized_relation_type = f"REL_{sanitized_relation_type}"
            if not sanitized_relation_type:
                sanitized_relation_type = "RELATED_TO"

            # Edge properties
            edge_props_from_rf = edge_data.get("data", {})
            cypher_edge_props = {}
            if isinstance(edge_props_from_rf, dict):
                for key, value in edge_props_from_rf.items():
                    if isinstance(value, (str, int, float, bool)):
                        cypher_edge_props[key] = value
            
            if cypher_edge_props:
                query = f"""
                MATCH (a {{frontend_id: $source_id}}), (b {{frontend_id: $target_id}})
                CREATE (a)-[r:{sanitized_relation_type} $props]->(b)
                """
                params = {
                    'source_id': source_frontend_id,
                    'target_id': target_frontend_id,
                    'props': cypher_edge_props
                }
            else:
                query = f"""
                MATCH (a {{frontend_id: $source_id}}), (b {{frontend_id: $target_id}})
                CREATE (a)-[:{sanitized_relation_type}]->(b)
                """
                params = {
                    'source_id': source_frontend_id,
                    'target_id': target_frontend_id
                }
            
            try:
                await redis_graph.query(query, params)
            except Exception as e:
                print(f"Error creating edge from {source_frontend_id} to {target_frontend_id}: {e}")

async def get_all_graph_data() -> Tuple[List[Dict], List[Dict]]:
    if not redis_graph:
        print("Warning: get_all_graph_data called but DB not connected. Returning empty.")
        return [], []

    query = "MATCH (n) OPTIONAL MATCH (n)-[r]->(m) RETURN n, r, m"
    try:
        # With redis-py, query result is a QueryResult object
        result = await redis_graph.query(query)
    except Exception as e:
        print(f"Error querying graph data: {e}")
        return [], []
        
    processed_nodes = {}
    processed_edges = []

    # result_set in redis-py is a list of lists
    if result and result.result_set:
        for row_data in result.result_set:
            # row_data is a list where each element is a node or relationship
            # Example: [redisgraph.Node, redisgraph.Edge, redisgraph.Node]
            # Or [redisgraph.Node, None, None] if no outgoing relationships
            
            n_rg_node, r_rg_rel, m_rg_node = None, None, None
            
            if len(row_data) > 0 and row_data[0] is not None:
                n_rg_node = row_data[0]  # This is a redisgraph.Node object
            if len(row_data) > 1 and row_data[1] is not None:
                r_rg_rel = row_data[1]  # This is a redisgraph.Edge object
            if len(row_data) > 2 and row_data[2] is not None:
                m_rg_node = row_data[2]  # This is a redisgraph.Node object

            nodes_in_row = []
            if n_rg_node: nodes_in_row.append(n_rg_node)
            if m_rg_node: nodes_in_row.append(m_rg_node)

            for rg_node_obj in nodes_in_row:
                # Properties in redis-py are already decoded if decode_responses=True in Redis()
                # but we keep it False for RedisGraph, so decode here
                node_frontend_id = rg_node_obj.properties.get(b'frontend_id', str(rg_node_obj.id).encode()).decode('utf-8')
                
                if node_frontend_id not in processed_nodes:
                    node_properties_decoded = {}
                    for k_bytes, v_val in rg_node_obj.properties.items():
                        k_str = k_bytes.decode('utf-8')
                        # v_val can be bytes, int, float, bool
                        if isinstance(v_val, bytes):
                            v_decoded = v_val.decode('utf-8')
                            if k_str == 'rawJsonData':
                                try:
                                    v_decoded = json.loads(v_decoded)
                                except json.JSONDecodeError:
                                    pass  # Keep as string if not valid JSON
                            node_properties_decoded[k_str] = v_decoded
                        else:
                            node_properties_decoded[k_str] = v_val
                    
                    rf_data_payload = {
                        k: v for k, v in node_properties_decoded.items()
                        if k != 'frontend_id' 
                    }
                    
                    # Labels in redis-py are a list of strings
                    node_label = rg_node_obj.labels[0] if rg_node_obj.labels else "Unknown"

                    processed_nodes[node_frontend_id] = {
                        "id": node_frontend_id,
                        "type": node_label,
                        "data": rf_data_payload,
                    }
            
            if r_rg_rel:
                # Get frontend_ids of source and target nodes from the relationship
                source_node_internal_id = r_rg_rel.source_id
                target_node_internal_id = r_rg_rel.dest_id

                source_frontend_id = None
                target_frontend_id = None

                # Look in already processed nodes (more efficient)
                for fid, node_info in processed_nodes.items():
                    # We can't directly compare internal ID with frontend_id
                    # We need a way to map internal ID to frontend_id if not in props
                    # For now, we assume source and target nodes are already in processed_nodes
                    # and their frontend_ids are known
                    pass

                # If not found, make a query (less efficient)
                if not source_frontend_id:
                    source_node_q_result = await redis_graph.query(f"MATCH (s) WHERE id(s) = {source_node_internal_id} RETURN s.frontend_id")
                    if source_node_q_result.result_set and source_node_q_result.result_set[0][0]:
                        source_frontend_id = source_node_q_result.result_set[0][0].decode('utf-8')
                
                if not target_frontend_id:
                    target_node_q_result = await redis_graph.query(f"MATCH (t) WHERE id(t) = {target_node_internal_id} RETURN t.frontend_id")
                    if target_node_q_result.result_set and target_node_q_result.result_set[0][0]:
                        target_frontend_id = target_node_q_result.result_set[0][0].decode('utf-8')

                if source_frontend_id and target_frontend_id:
                    edge_frontend_id_prop = r_rg_rel.properties.get(b'frontend_id')
                    edge_frontend_id = (
                        edge_frontend_id_prop.decode('utf-8')
                        if edge_frontend_id_prop
                        else f"edge_{source_frontend_id}_{target_frontend_id}_{r_rg_rel.id}"
                    )

                    edge_properties_decoded = {}
                    for k_bytes, v_val in r_rg_rel.properties.items():
                        k_str = k_bytes.decode('utf-8')
                        edge_properties_decoded[k_str] = (
                            v_val.decode('utf-8')
                            if isinstance(v_val, bytes)
                            else v_val
                        )
                    
                    rf_edge_data_payload = {
                        k: v for k, v in edge_properties_decoded.items()
                        if k != 'frontend_id'
                    }

                    edge_struct = {
                        "id": edge_frontend_id,
                        "source": source_frontend_id,
                        "target": target_frontend_id,
                        "label": r_rg_rel.relation,  # Already string with redis-py
                        "data": rf_edge_data_payload if rf_edge_data_payload else None,
                        "style": {
                            'stroke': 'var(--edge-default-color)',
                            'strokeWidth': 2
                        },
                        "markerEnd": {
                            'type': 'arrowclosed',  # React Flow uses 'arrowclosed'
                            'color': 'var(--edge-default-color)'
                        }
                    }
                    if not any(e['id'] == edge_frontend_id for e in processed_edges):
                        processed_edges.append(edge_struct)
    
    return list(processed_nodes.values()), processed_edges

async def get_node_properties(node_frontend_id: str) -> Dict:
    if not redis_graph:
        raise HTTPException(status_code=503, detail="Database not connected")

    query = "MATCH (n {frontend_id: $fid}) RETURN n"
    try:
        result = await redis_graph.query(query, {'fid': node_frontend_id})
    except Exception as e:
        print(f"Error fetching node properties for {node_frontend_id}: {e}")
        return None  # Return None instead of raising exception here

    if result and result.result_set and result.result_set[0] and result.result_set[0][0]:
        rg_node_obj = result.result_set[0][0]  # This is a redisgraph.Node object
        
        properties_decoded = {}
        for k_bytes, v_val in rg_node_obj.properties.items():
            k_str = k_bytes.decode('utf-8')
            v_decoded = v_val.decode('utf-8') if isinstance(v_val, bytes) else v_val
            if k_str == 'rawJsonData' and isinstance(v_decoded, str):
                try:
                    v_decoded = json.loads(v_decoded)
                except json.JSONDecodeError:
                    pass  # Keep as string if not valid JSON
            properties_decoded[k_str] = v_decoded
        
        return {
            "properties": properties_decoded,
            "labels": rg_node_obj.labels  # Already a list of strings with redis-py
        }
    return None


===== backend/app/main.py =====
import logging

# Silenciar el warning específico de passlib sobre la versión de bcrypt
logging.getLogger('passlib').setLevel(logging.ERROR)

from fastapi import FastAPI, File, UploadFile, Depends, HTTPException, status, Request
from fastapi.security import OAuth2PasswordRequestForm
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse, JSONResponse
import json
from typing import Any, Dict, List
from datetime import timedelta
from pydantic import BaseModel
import os
import traceback

from . import crud, models, auth

app = FastAPI(title="SIVG Backend")

# CORS Middleware - Allow all origins in development
origins = ["*"]  # Allow all origins

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,  # Keep this True to allow cookies/auth headers
    allow_methods=["*"],     # Allow all methods
    allow_headers=["*"],     # Allow all headers
    expose_headers=["*"]     # Expose all headers
)

# 2. Event Handlers
@app.on_event("startup")
async def startup_event():
    await crud.init_db_connection()
    auth.init_fake_users_db()  # Initialize fake users after DB connection
    await crud.create_indices_if_needed()  # Create indices after DB and users are set

@app.on_event("shutdown")
async def shutdown_event():
    await crud.close_db_connection()

# 3. API Routes (Define ALL of these BEFORE static files/catch-all)
@app.post("/token", response_model=models.Token)
async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):
    user = auth.authenticate_user(auth.fake_users_db, form_data.username, form_data.password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    access_token_expires = timedelta(minutes=auth.ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = auth.create_access_token(
        data={"sub": user.username}, expires_delta=access_token_expires
    )
    return {"access_token": access_token, "token_type": "bearer"}

@app.get("/users/me/", response_model=models.User)
async def read_users_me(current_user: models.User = Depends(auth.get_current_active_user)):
    return current_user

@app.post("/upload-json/")
async def upload_json_file(
    file: UploadFile = File(...),
    current_user: models.User = Depends(auth.get_current_active_user) # Proteger endpoint
):
    try:
        contents = await file.read()
        data = json.loads(contents)
    except json.JSONDecodeError:
        raise HTTPException(status_code=400, detail="Invalid JSON file")
    except Exception:
        raise HTTPException(status_code=500, detail="Error reading file")
    finally:
        await file.close()

    # Aquí llamas a la función que procesa el JSON y lo guarda en Neo4j
    try:
        await crud.process_and_store_json(data)
        return {"message": "JSON processed and data stored successfully."}
    except Exception as e:
        # Log the error e
        print(f"Error processing JSON: {e}")
        raise HTTPException(status_code=500, detail=f"Error processing JSON data: {str(e)}")

class GraphLoadPayload(BaseModel):
    jsonData: Dict[str, Any]
    mode: str

@app.post("/graph/load-json")
async def load_json_to_graph(
    payload: GraphLoadPayload,
    current_user: models.User = Depends(auth.get_current_active_user)
):
    try:
        await crud.process_and_store_json(payload.jsonData, payload.mode)
        return {"message": f"JSON data processed ({payload.mode}) and stored successfully."}
    except HTTPException as he:
        raise he
    except Exception as e:
        print(f"Error processing/loading JSON: {e}\n{traceback.format_exc()}")
        raise HTTPException(
            status_code=500,
            detail=f"Error processing/loading JSON data: {str(e)}"
        )

@app.get("/graph-data/")
async def get_graph_data(
    current_user: models.User = Depends(auth.get_current_active_user)
):
    nodes, relationships = await crud.get_all_graph_data()
    return {"nodes": nodes, "edges": relationships}

@app.get("/node-details/{node_frontend_id}")
async def get_node_details(
    node_frontend_id: str,
    current_user: models.User = Depends(auth.get_current_active_user)
):
    details = await crud.get_node_properties(node_frontend_id)
    if not details:
        raise HTTPException(status_code=404, detail="Node not found")
    return details

# 4. Static Files and SPA Catch-all (Define these LAST)
# In the final production Docker image (docker/Dockerfile),
# backend code is in /app/backend/ and built frontend is in /app/frontend/static/
# So, an absolute path is most reliable here for the production image context.
BUILT_FRONTEND_DIR = "/app/frontend/static"

# Check if the directory for the built frontend exists.
# This check ensures these routes are only active if the frontend has been built and placed here.
if os.path.exists(BUILT_FRONTEND_DIR) and os.path.isdir(BUILT_FRONTEND_DIR):
    print(f"INFO:     Serving static frontend files from {BUILT_FRONTEND_DIR}")
    
    # Serve assets from the 'static' subfolder of the build (e.g., /static/css, /static/js)
    # Create React App typically puts its assets here.
    # Adjust if your build structure is different.
    if os.path.exists(os.path.join(BUILT_FRONTEND_DIR, "static")):
        app.mount(
            "/static",
            StaticFiles(directory=os.path.join(BUILT_FRONTEND_DIR, "static")),
            name="frontend_static_assets"
        )
    else:
        print(f"WARNING:  No 'static' subfolder found in {BUILT_FRONTEND_DIR}. Check your frontend build output.")

    # Serve root files like index.html, favicon.ico, manifest.json, etc.
    # This catch-all MUST be the last route defined.
    @app.get("/{full_path:path}")
    async def serve_spa(request: Request, full_path: str):
        # Check if the request seems to be for an API endpoint that wasn't matched
        if full_path.startswith(("token", "users/me", "graph/", "node-details/", "upload-json/")):
            raise HTTPException(status_code=404, detail="API endpoint not found")
            
        index_path = os.path.join(BUILT_FRONTEND_DIR, "index.html")
        file_path = os.path.join(BUILT_FRONTEND_DIR, full_path)

        # If the requested path is a file that exists in the build directory, serve it.
        if os.path.isfile(file_path):
            return FileResponse(file_path)
        # Otherwise, serve index.html for SPA routing.
        elif os.path.exists(index_path):
            return FileResponse(index_path)
        else:
            # This should ideally not be reached if BUILT_FRONTEND_DIR and index.html exist.
            print(f"ERROR:    index.html not found at {index_path} for SPA path: {full_path}")
            raise HTTPException(status_code=404, detail="Frontend application not found.")
else:
    print(f"INFO:     Static file serving for frontend is SKIPPED (directory {BUILT_FRONTEND_DIR} not found). Assumed dev environment where frontend is served separately.")


===== backend/requirements.txt =====
fastapi
uvicorn[standard]
redis[graph]>=4.5.1
pydantic
python-jose[cryptography]
passlib[bcrypt]
python-multipart
bcrypt==4.0.1  # Fixed bcrypt version to avoid compatibility issues


===== docker-compose.yml =====
# docker-compose.yml (CORREGIDO)
# La directiva 'version' es obsoleta y se ha eliminado.

services:
  # Servicio de Backend (FastAPI) con recarga automática
  backend:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.dev.backend
    container_name: nodex_backend_dev
    volumes:
      # Monta tu código de backend directamente en el contenedor.
      # Cualquier cambio que hagas en tu editor se refleja al instante.
      - ./backend:/code
    ports:
      - "8000:8000"
    networks:
      - sivg-net
    environment:
      # Asegúrate que el backend pueda hablar con Redis
      - REDIS_HOST=redisgraph
      - REDIS_PORT=6379
    # El comando para iniciar el servidor de desarrollo de FastAPI con recarga automática
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Servicio de Frontend (React) con Hot Module Replacement (HMR)
  frontend:
    image: node:18-alpine
    container_name: nodex_frontend_dev
    working_dir: /app
    volumes:
      # Monta el código del frontend y los node_modules para persistencia y velocidad
      - ./frontend:/app
      - /app/node_modules # Previene que el node_modules local sobreescriba el del contenedor
    ports:
      # Expone el puerto del servidor de desarrollo de React
      - "4545:4545"
    networks:
      - sivg-net
    environment:
      - PORT=4545
      - BROWSER=none
      # Permite la recarga en caliente (HMR) incluso dentro de Docker
      - WDS_SOCKET_PORT=4545
      - CHOKIDAR_USEPOLLING=true # Mejora la detección de cambios en algunos sistemas
    # Instala dependencias si no existen y luego inicia el dev server
    command: sh -c "npm install && npm start"

  # Servicio de RedisGraph (para desarrollo)
  redisgraph:
    image: redislabs/redisgraph:latest
    container_name: my-redisgraph-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data_dev:/data
    networks:
      - sivg-net

networks:
  sivg-net:
    # Let Docker Compose manage the network
    # Remove external: true to allow Compose to create and manage the network

volumes:
  redis_data_dev: 

===== docker/supervisord.conf =====
[supervisord]
nodaemon=true
logfile=/var/log/supervisord.log
loglevel=info

[program:backend]
command=uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
autostart=true
autorestart=true
stdout_logfile=/var/log/backend.out.log
stderr_logfile=/var/log/backend.err.log
directory=/app/backend
environment=PYTHONUNBUFFERED=1,REDIS_HOST="my-redisgraph",REDIS_PORT="6379",REDISGRAPH_GRAPH_NAME="sivg_graph",JWT_SECRET_KEY="tu_super_secreto_jwt",ALGORITHM="HS256",ACCESS_TOKEN_EXPIRE_MINUTES="30"

[program:frontend]
command=python3 -m http.server 4545 --directory /app/frontend/static
autostart=true
autorestart=true
stdout_logfile=/var/log/frontend.out.log
stderr_logfile=/var/log/frontend.err.log
directory=/app/frontend/static

# Frontend is now served by the backend through FastAPI static files
# Removed the separate frontend server since it's not needed anymore


===== docker/Dockerfile.dev.backend =====
# docker/Dockerfile.dev.backend

FROM python:3.10-slim

WORKDIR /code

# Copia solo el archivo de requerimientos e instálalos.
# Esto se cachea y solo se re-ejecuta si requirements.txt cambia.
COPY ./backend/requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# El código fuente se montará usando un volumen desde docker-compose.yml.
# El comando para iniciar el servidor también se especifica en docker-compose.yml. 

===== docker/Dockerfile =====
FROM ubuntu:20.04 AS base

ENV DEBIAN_FRONTEND=noninteractive \
    TZ=Etc/UTC \
    PYTHONUNBUFFERED=1

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
      ca-certificates \
      python3 \
      python3-pip \
      supervisor \
    && rm -rf /var/lib/apt/lists/*

FROM base AS backend-builder
WORKDIR /app

COPY backend/requirements.txt ./backend/requirements.txt

RUN --mount=type=cache,target=/root/.cache/pip \
    python3 -m pip install --no-cache-dir --upgrade pip && \
    python3 -m pip install --no-cache-dir -r ./backend/requirements.txt

FROM node:18-alpine AS frontend-builder
WORKDIR /app

COPY frontend/package.json frontend/package-lock.json* frontend/yarn.lock* ./
RUN npm install --frozen-lockfile

COPY frontend/ ./

RUN npm run build

FROM base AS final
WORKDIR /app

ENV REDIS_HOST=localhost \
    REDIS_PORT=6379 \
    REDISGRAPH_GRAPH_NAME=sivg_graph \
    JWT_SECRET_KEY="tu_super_secreto_jwt" \
    ALGORITHM=HS256 \
    ACCESS_TOKEN_EXPIRE_MINUTES=30

COPY backend/requirements.txt ./backend/requirements.txt
RUN --mount=type=cache,target=/root/.cache/pip \
    python3 -m pip install --no-cache-dir -r ./backend/requirements.txt

COPY backend/ ./backend/
COPY --from=frontend-builder /app/build ./frontend/static/
COPY docker/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Expose both backend and frontend ports
EXPOSE 8000 4545

ENTRYPOINT ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf", "-n"]

